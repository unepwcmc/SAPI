SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: binary_upgrade; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA binary_upgrade;


--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

-- *not* creating schema, since initdb creates it


--
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


--
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA public;


--
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


--
-- Name: unaccent; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;


--
-- Name: EXTENSION unaccent; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION unaccent IS 'text search dictionary that removes accents';


--
-- Name: api_annotation; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_annotation AS (
	symbol text,
	note text
);


--
-- Name: api_eu_decision_type; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_eu_decision_type AS (
	name text,
	description text,
	type text
);


--
-- Name: api_event; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_event AS (
	name text,
	date date,
	url text
);


--
-- Name: api_geo_entity; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_geo_entity AS (
	iso_code2 text,
	name text,
	type text
);


--
-- Name: api_higher_taxa; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_higher_taxa AS (
	kingdom text,
	phylum text,
	class text,
	"order" text,
	family text
);


--
-- Name: api_srg_history; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_srg_history AS (
	name text,
	description text
);


--
-- Name: api_taxon_concept; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_taxon_concept AS (
	id integer,
	full_name text,
	author_year text,
	rank text
);


--
-- Name: api_trade_code; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.api_trade_code AS (
	code text,
	name text
);


--
-- Name: document_language_version; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.document_language_version AS (
	id integer,
	title text,
	language text,
	locale_document text
);


--
-- Name: event_properties; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.event_properties AS (
	id integer,
	full_name json,
	taxonomy_name text,
	rank_name json,
	family_name json
);


SET default_tablespace = '';

--
-- Name: listing_changes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.listing_changes (
    id integer NOT NULL,
    taxon_concept_id integer NOT NULL,
    species_listing_id integer,
    change_type_id integer NOT NULL,
    annotation_id integer,
    hash_annotation_id integer,
    effective_at timestamp without time zone DEFAULT '2012-09-21 07:32:20'::timestamp without time zone NOT NULL,
    is_current boolean DEFAULT false NOT NULL,
    parent_id integer,
    inclusion_taxon_concept_id integer,
    event_id integer,
    original_id integer,
    explicit_change boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    import_row_id integer,
    created_by_id integer,
    updated_by_id integer,
    internal_notes text,
    nomenclature_note_en text,
    nomenclature_note_es text,
    nomenclature_note_fr text
);


--
-- Name: taxon_concepts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_concepts (
    id integer NOT NULL,
    taxonomy_id integer DEFAULT 1 NOT NULL,
    parent_id integer,
    rank_id integer NOT NULL,
    taxon_name_id integer NOT NULL,
    author_year character varying(255),
    legacy_id integer,
    legacy_type character varying(255),
    data public.hstore,
    listing public.hstore,
    notes text,
    taxonomic_position character varying(255) DEFAULT '0'::character varying NOT NULL,
    full_name character varying(255),
    name_status character varying(255) DEFAULT 'A'::character varying NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    touched_at timestamp without time zone,
    legacy_trade_code character varying(255),
    updated_by_id integer,
    created_by_id integer,
    dependents_updated_at timestamp without time zone,
    nomenclature_note_en text,
    nomenclature_note_es text,
    nomenclature_note_fr text,
    internal_nomenclature_note text,
    dependents_updated_by_id integer,
    kew_id integer
);


--
-- Name: ancestor_listing_auto_note(public.taxon_concepts, public.listing_changes, character); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.ancestor_listing_auto_note(taxon_concept public.taxon_concepts, listing_change public.listing_changes, locale character) RETURNS text
    LANGUAGE plpgsql STRICT
    AS $$
  DECLARE
    result TEXT;
  BEGIN
    IF NOT ARRAY[LOWER(locale)] && ARRAY['en', 'es', 'fr'] THEN
      locale := 'en';
    END IF;
    EXECUTE 'SELECT
      UPPER(COALESCE(
        ranks.display_name_' || locale || ',
        ranks.display_name_en,
        ranks.name
      )) || '' '' ||
      COALESCE(
        change_types.display_name_' || locale || ',
        change_types.display_name_en,
        change_types.name
      ) || '' '' ||
      full_name_with_spp(ranks.name, ''' || taxon_concept.full_name || ''', ''' || taxon_concept.name_status || ''')
      FROM ranks, change_types
      WHERE ranks.id = ' || taxon_concept.rank_id || '
      AND change_types.id = ' || listing_change.change_type_id
    INTO result;
    RETURN result;
  END;
  $$;


--
-- Name: ancestor_listing_auto_note_en(public.taxon_concepts, public.listing_changes); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.ancestor_listing_auto_note_en(public.taxon_concepts, public.listing_changes) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT * FROM ancestor_listing_auto_note($1, $2, 'en');
  $_$;


--
-- Name: FUNCTION ancestor_listing_auto_note_en(public.taxon_concepts, public.listing_changes); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.ancestor_listing_auto_note_en(public.taxon_concepts, public.listing_changes) IS 'Returns English auto note (used for inherited listing changes).';


--
-- Name: ancestor_listing_auto_note_es(public.taxon_concepts, public.listing_changes); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.ancestor_listing_auto_note_es(public.taxon_concepts, public.listing_changes) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT * FROM ancestor_listing_auto_note($1, $2, 'es');
  $_$;


--
-- Name: FUNCTION ancestor_listing_auto_note_es(public.taxon_concepts, public.listing_changes); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.ancestor_listing_auto_note_es(public.taxon_concepts, public.listing_changes) IS 'Returns Spanish auto note (used for inherited listing changes).';


--
-- Name: ancestor_listing_auto_note_fr(public.taxon_concepts, public.listing_changes); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.ancestor_listing_auto_note_fr(public.taxon_concepts, public.listing_changes) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT * FROM ancestor_listing_auto_note($1, $2, 'fr');
  $_$;


--
-- Name: FUNCTION ancestor_listing_auto_note_fr(public.taxon_concepts, public.listing_changes); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.ancestor_listing_auto_note_fr(public.taxon_concepts, public.listing_changes) IS 'Returns French auto note (used for inherited listing changes).';


--
-- Name: ancestor_node_ids_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.ancestor_node_ids_for_node(node_id integer) RETURNS integer[]
    LANGUAGE sql STABLE
    AS $_$
    WITH RECURSIVE ancestors AS (
      SELECT h.id, h.parent_id
      FROM taxon_concepts h WHERE id = $1

      UNION

      SELECT hi.id, hi.parent_id
      FROM taxon_concepts hi JOIN ancestors ON hi.id = ancestors.parent_id
    )
    SELECT ARRAY(SELECT id FROM ancestors);
  $_$;


--
-- Name: ancestors_names(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.ancestors_names(node_id integer) RETURNS public.hstore
    LANGUAGE sql
    AS $_$
    WITH RECURSIVE q AS (
      SELECT h.id, h.parent_id,
        HSTORE(LOWER(ranks.name) || '_name', taxon_names.scientific_name) ||
        HSTORE(LOWER(ranks.name) || '_id', h.id::VARCHAR) AS ancestors
      FROM taxon_concepts h
      INNER JOIN taxon_names ON h.taxon_name_id = taxon_names.id
      INNER JOIN ranks ON h.rank_id = ranks.id
      WHERE h.id = $1

      UNION

      SELECT hi.id, hi.parent_id, q.ancestors ||
        HSTORE(LOWER(ranks.name) || '_name', taxon_names.scientific_name) ||
        HSTORE(LOWER(ranks.name) || '_id', hi.id::VARCHAR)
      FROM q
      JOIN taxon_concepts hi
      ON hi.id = q.parent_id
      INNER JOIN taxon_names ON hi.taxon_name_id = taxon_names.id
      INNER JOIN ranks ON hi.rank_id = ranks.id
    )
    SELECT ancestors FROM q WHERE parent_id IS NULL;
  $_$;


--
-- Name: array_intersect(anyarray, anyarray); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.array_intersect(anyarray, anyarray) RETURNS anyarray
    LANGUAGE sql
    AS $_$
    SELECT ARRAY(
        SELECT UNNEST($1)
        INTERSECT
        SELECT UNNEST($2)
    );
$_$;


--
-- Name: check_for_duplicates_in_shipments(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_for_duplicates_in_shipments(annual_report_upload_id integer) RETURNS integer[]
    LANGUAGE plpgsql
    AS $$
  DECLARE
    table_name TEXT;
    duplicates_ids INTEGER[];
  BEGIN
    table_name = 'trade_sandbox_' || annual_report_upload_id;

    EXECUTE '
      WITH duplicates AS (
        SELECT DISTINCT sb.id
        FROM ' || table_name || ' AS sb
        JOIN geo_entities AS ge ON ge.iso_code2 = sb.trading_partner
        JOIN trade_shipments AS s ON sb.reported_taxon_concept_id = s.reported_taxon_concept_id
        AND sb.appendix = s.appendix AND sb.year::integer = s.year
        JOIN trade_annual_report_uploads AS aru ON aru.id = ' || annual_report_upload_id || '
        WHERE (
          (aru.point_of_view = ''I'' AND NOT s.reported_by_exporter AND aru.trading_country_id = s.importer_id) AND
          (COALESCE(sb.import_permit,'''') = COALESCE(s.import_permit_number,''''))
        )
        OR
        (
          (aru.point_of_view = ''I'' AND s.reported_by_exporter AND ge.id = s.importer_id) AND
          (COALESCE(sb.import_permit,'''') = COALESCE(s.import_permit_number,''''))
        )
        OR
        (
          (aru.point_of_view = ''E'' AND s.reported_by_exporter AND aru.trading_country_id = s.exporter_id) AND
          (COALESCE(sb.export_permit,'''') = COALESCE(s.export_permit_number,''''))
        )
        OR
        (
          (aru.point_of_view = ''E'' AND NOT s.reported_by_exporter AND ge.id = s.exporter_id) AND
          (COALESCE(sb.export_permit,'''') = COALESCE(s.export_permit_number,''''))
        )
      )

      SELECT ARRAY(SELECT id FROM duplicates);
    ' INTO duplicates_ids;

    RETURN duplicates_ids;

  END;
  $$;


--
-- Name: cites_aggregate_children_listing(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cites_aggregate_children_listing(node_id integer) RETURNS public.hstore
    LANGUAGE sql STABLE
    AS $_$
    WITH aggregated_children_listing AS (
      SELECT
      -- this to be used in the timelines: if there are explicitly listed
      -- descendants, the timeline might differ from the current listing
      -- and a note should be displayed to inform the user
      hstore('cites_listed_descendants', BOOL_OR(
        id != $1
        AND (
          (listing -> 'cites_status_original')::BOOLEAN
          OR
          (listing -> 'cites_listed_descendants')::BOOLEAN
        )
      )::VARCHAR) ||
      hstore('cites_I', MAX((listing -> 'cites_I')::VARCHAR)) ||
      hstore('cites_II', MAX((listing -> 'cites_II')::VARCHAR)) ||
      hstore('cites_III', MAX((listing -> 'cites_III')::VARCHAR)) ||
      hstore('cites_NC', MAX((listing -> 'cites_not_listed')::VARCHAR)) ||
      hstore('cites_listing', ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(SELECT * FROM UNNEST(
          ARRAY[
            (MAX(listing -> 'cites_I')::VARCHAR),
            (MAX(listing -> 'cites_II')::VARCHAR),
            (MAX(listing -> 'cites_III')::VARCHAR),
            (MAX(listing -> 'cites_not_listed')::VARCHAR)
          ]) s WHERE s IS NOT NULL),
          '/'
        )
      ) AS listing
      FROM taxon_concepts
      WHERE
        -- aggregate children's listings
        parent_id = $1
        -- as well as parent if they're explicitly listed
        OR (
          id = $1
          AND (listing->'cites_status_original')::BOOLEAN
        )
        -- as well as parent if they are species
        -- the assumption being they will have subspecies
        -- which are not listed in their own right and
        -- should therefore inherit the cascaded listing
        -- if one exists
        -- this should fix Lutrinae species, which should be I/II
        -- even though subspecies in the db are on I
        OR (
          id = $1
          AND data->'rank_name' = 'SPECIES'
        )
    )
    SELECT listing
    FROM aggregated_children_listing;
  $_$;


--
-- Name: cites_applicable_listing_changes_for_node(text, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cites_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) RETURNS SETOF integer
    LANGUAGE sql STABLE STRICT
    AS $_$
  SELECT * FROM cites_eu_applicable_listing_changes_for_node($1, $2);
$_$;


--
-- Name: FUNCTION cites_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.cites_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) IS 'Returns applicable listing changes for a given node, including own and ancestors (following CITES cascading rules).';


--
-- Name: cites_eu_applicable_listing_changes_for_node(text, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cites_eu_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) RETURNS SETOF integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
DECLARE
  sql TEXT;
BEGIN
  sql := 'WITH RECURSIVE listing_changes_timeline AS (
    SELECT all_listing_changes_mview.id,
    designation_id,
    affected_taxon_concept_id AS original_taxon_concept_id,
    taxon_concept_id AS current_taxon_concept_id,
    CASE
      WHEN inclusion_taxon_concept_id IS NULL
      THEN HSTORE(species_listing_id::TEXT, taxon_concept_id::TEXT)
      ELSE HSTORE(species_listing_id::TEXT, inclusion_taxon_concept_id::TEXT)
    END AS context,
    inclusion_taxon_concept_id,
    species_listing_id,
    change_type_id,
    event_id,
    effective_at,
    tree_distance AS context_tree_distance,
    timeline_position,
    CASE
     WHEN (
      -- there are listed populations
      ARRAY_UPPER(listed_geo_entities_ids, 1) IS NOT NULL
      -- and the taxon has its own distribution and does not occur in any of them
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND NOT listed_geo_entities_ids && taxon_concepts_mview.countries_ids_ary
    )
    -- when all populations are excluded
    OR (
      ARRAY_UPPER(excluded_geo_entities_ids, 1) IS NOT NULL
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND excluded_geo_entities_ids @> taxon_concepts_mview.countries_ids_ary
    )
    THEN FALSE
    WHEN ARRAY_UPPER(excluded_taxon_concept_ids, 1) IS NOT NULL
    -- if taxon or any of its ancestors is excluded from this listing
    AND excluded_taxon_concept_ids && ARRAY[
      affected_taxon_concept_id,
      taxon_concepts_mview.kingdom_id,
      taxon_concepts_mview.phylum_id,
      taxon_concepts_mview.class_id,
      taxon_concepts_mview.order_id,
      taxon_concepts_mview.family_id,
      taxon_concepts_mview.genus_id,
      taxon_concepts_mview.species_id
    ]
    THEN FALSE
    ELSE
    TRUE
    END AS is_applicable
    FROM ' || all_listing_changes_mview || ' all_listing_changes_mview
    JOIN cites_eu_tmp_taxon_concepts_mview taxon_concepts_mview
    ON all_listing_changes_mview.affected_taxon_concept_id = taxon_concepts_mview.id
    WHERE all_listing_changes_mview.affected_taxon_concept_id = $1
    AND timeline_position = 1

    UNION

    SELECT hi.id,
    hi.designation_id,
    listing_changes_timeline.original_taxon_concept_id,
    hi.taxon_concept_id,
    CASE
    WHEN hi.inclusion_taxon_concept_id IS NOT NULL
    AND (
      AVALS(listing_changes_timeline.context) @> ARRAY[hi.taxon_concept_id::TEXT]
      OR listing_changes_timeline.context = ''''::HSTORE
    )
    THEN HSTORE(hi.species_listing_id::TEXT, hi.inclusion_taxon_concept_id::TEXT)
    WHEN change_types.name = ''DELETION''
    AND hi.taxon_concept_id = hi.affected_taxon_concept_id
    THEN listing_changes_timeline.context - ARRAY[hi.species_listing_id::TEXT]
    WHEN change_types.name = ''DELETION''
    THEN listing_changes_timeline.context - HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    -- if it is a new listing at closer level that replaces an older listing, wipe out the context
    WHEN hi.tree_distance < listing_changes_timeline.context_tree_distance
    AND hi.effective_at > listing_changes_timeline.effective_at
    AND change_types.name = ''ADDITION''
    THEN HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    -- if it is a same day split listing we don''t want to wipe the other part of the split from the context
    WHEN hi.tree_distance < listing_changes_timeline.context_tree_distance
    AND change_types.name = ''ADDITION''
    THEN listing_changes_timeline.context || HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    WHEN hi.tree_distance <= listing_changes_timeline.context_tree_distance
    AND hi.affected_taxon_concept_id = hi.taxon_concept_id
    AND change_types.name = ''ADDITION''
    THEN HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    -- changing this to <= breaks Ursus arctos isabellinus
    WHEN hi.tree_distance <= listing_changes_timeline.context_tree_distance
    AND change_types.name = ''ADDITION''
    THEN listing_changes_timeline.context || HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    ELSE listing_changes_timeline.context
    END,
    hi.inclusion_taxon_concept_id,
    hi.species_listing_id,
    hi.change_type_id,
    hi.event_id,
    hi.effective_at,
    CASE
    WHEN (
        hi.inclusion_taxon_concept_id IS NOT NULL
        AND AVALS(listing_changes_timeline.context) @> ARRAY[hi.taxon_concept_id::TEXT]
      ) OR hi.tree_distance < listing_changes_timeline.context_tree_distance
    THEN hi.tree_distance
    ELSE listing_changes_timeline.context_tree_distance
    END,
    hi.timeline_position,
    -- is applicable
    CASE
    WHEN (
      -- there are listed populations
      ARRAY_UPPER(hi.listed_geo_entities_ids, 1) IS NOT NULL
      -- and the taxon has its own distribution and does not occur in any of them
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND NOT hi.listed_geo_entities_ids && taxon_concepts_mview.countries_ids_ary
    )
    -- when all populations are excluded
    OR (
      ARRAY_UPPER(hi.excluded_geo_entities_ids, 1) IS NOT NULL
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND hi.excluded_geo_entities_ids @> taxon_concepts_mview.countries_ids_ary
    )
    THEN FALSE
    WHEN ARRAY_UPPER(hi.excluded_taxon_concept_ids, 1) IS NOT NULL
    -- if taxon or any of its ancestors is excluded from this listing
    AND hi.excluded_taxon_concept_ids && ARRAY[
      hi.affected_taxon_concept_id,
      taxon_concepts_mview.kingdom_id,
      taxon_concepts_mview.phylum_id,
      taxon_concepts_mview.class_id,
      taxon_concepts_mview.order_id,
      taxon_concepts_mview.family_id,
      taxon_concepts_mview.genus_id,
      taxon_concepts_mview.species_id
    ]
    THEN FALSE
    WHEN listing_changes_timeline.context -> hi.species_listing_id::TEXT = hi.taxon_concept_id::TEXT
    OR hi.taxon_concept_id = listing_changes_timeline.original_taxon_concept_id
    -- this line to make Moschus leucogaster happy
    OR AVALS(listing_changes_timeline.context) @> ARRAY[hi.taxon_concept_id::TEXT]
    THEN TRUE
    WHEN listing_changes_timeline.context = ''''::HSTORE  --this would be the case when deleted
    AND (
      ARRAY_UPPER(hi.excluded_taxon_concept_ids, 1) IS NOT NULL
      AND NOT hi.excluded_taxon_concept_ids && ARRAY[hi.affected_taxon_concept_id]
      OR ARRAY_UPPER(hi.excluded_taxon_concept_ids, 1) IS NULL
    )
    AND hi.inclusion_taxon_concept_id IS NULL
    AND hi.change_type_name = ''ADDITION''
    THEN TRUE -- allows for re-listing
    WHEN hi.tree_distance < listing_changes_timeline.context_tree_distance
    THEN TRUE
    ELSE FALSE
    END
    FROM ' || all_listing_changes_mview || ' hi
    JOIN listing_changes_timeline
    ON hi.designation_id = listing_changes_timeline.designation_id
    AND listing_changes_timeline.original_taxon_concept_id = hi.affected_taxon_concept_id
    AND listing_changes_timeline.timeline_position + 1 = hi.timeline_position
    JOIN change_types ON hi.change_type_id = change_types.id
    JOIN cites_eu_tmp_taxon_concepts_mview taxon_concepts_mview
    ON hi.affected_taxon_concept_id = taxon_concepts_mview.id
  )
  SELECT listing_changes_timeline.id
  FROM listing_changes_timeline
  WHERE is_applicable
  ORDER BY timeline_position';

  RETURN QUERY EXECUTE sql USING node_id;
END;
$_$;


--
-- Name: cites_leaf_listing(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cites_leaf_listing(node_id integer) RETURNS public.hstore
    LANGUAGE sql STABLE
    AS $_$
    SELECT hstore(
      'cites_listing',
      ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(
          SELECT * FROM UNNEST(
            ARRAY[
              taxon_concepts.listing -> 'cites_I',
              taxon_concepts.listing -> 'cites_II',
              taxon_concepts.listing -> 'cites_III',
              taxon_concepts.listing -> 'cites_not_listed'
            ]
          ) s WHERE s IS NOT NULL
        ), '/'
      )
    )
    FROM taxon_concepts
    WHERE id = $1;
  $_$;


--
-- Name: cms_aggregate_children_listing(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cms_aggregate_children_listing(node_id integer) RETURNS public.hstore
    LANGUAGE sql STABLE
    AS $_$
    WITH aggregated_children_listing AS (
      SELECT
      -- this to be used in the timelines: if there are explicitly listed
      -- descendants, the timeline might differ from the current listing
      -- and a note should be displayed to inform the user
      hstore('cms_listed_descendants', BOOL_OR(
        (listing -> 'cms_status_original')::BOOLEAN
        OR (listing -> 'cms_listed_descendants')::BOOLEAN
      )::VARCHAR) ||
      hstore('cms_I', MAX((listing -> 'cms_I')::VARCHAR)) ||
      hstore('cms_II', MAX((listing -> 'cms_II')::VARCHAR)) ||
      hstore('cms_NC', MAX((listing -> 'cms_not_listed')::VARCHAR)) ||
      hstore('cms_listing', ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(SELECT * FROM UNNEST(
          ARRAY[
            (MAX(listing -> 'cms_I')::VARCHAR),
            (MAX(listing -> 'cms_II')::VARCHAR),
            (MAX(listing -> 'cms_not_listed')::VARCHAR)
          ]) s WHERE s IS NOT NULL),
          '/'
        )
      ) AS listing
      FROM taxon_concepts
      WHERE
        -- NOTE: THIS WHERE CLAUSE DIFFERS FROM CITES & EU
        -- aggregate children's listings
        parent_id = $1
        -- as well as parent if they're explicitly listed
        OR (
          id = $1
          AND (listing->'cms_status_original')::BOOLEAN
        )
    )
    SELECT listing
    FROM aggregated_children_listing;
  $_$;


--
-- Name: cms_applicable_listing_changes_for_node(text, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cms_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) RETURNS SETOF integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
DECLARE
  sql TEXT;
BEGIN
  sql := 'WITH RECURSIVE listing_changes_timeline AS (
    SELECT all_listing_changes_mview.id,
    designation_id,
    affected_taxon_concept_id AS original_taxon_concept_id,
    taxon_concept_id AS current_taxon_concept_id,
    HSTORE(species_listing_id::TEXT, taxon_concept_id::TEXT) AS context,
    inclusion_taxon_concept_id,
    species_listing_id,
    change_type_id,
    effective_at,
    tree_distance AS context_tree_distance,
    timeline_position,
    CASE
     WHEN (
      -- there are listed populations
      ARRAY_UPPER(listed_geo_entities_ids, 1) IS NOT NULL
      -- and the taxon has its own distribution and does not occur in any of them
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND NOT listed_geo_entities_ids && taxon_concepts_mview.countries_ids_ary
    )
    -- when all populations are excluded
    OR (
      ARRAY_UPPER(excluded_geo_entities_ids, 1) IS NOT NULL
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND excluded_geo_entities_ids @> taxon_concepts_mview.countries_ids_ary
    )
    THEN FALSE
    WHEN ARRAY_UPPER(excluded_taxon_concept_ids, 1) IS NOT NULL
    -- if taxon or any of its ancestors is excluded from this listing
    AND excluded_taxon_concept_ids && ARRAY[
      affected_taxon_concept_id,
      taxon_concepts_mview.kingdom_id,
      taxon_concepts_mview.phylum_id,
      taxon_concepts_mview.class_id,
      taxon_concepts_mview.order_id,
      taxon_concepts_mview.family_id,
      taxon_concepts_mview.genus_id,
      taxon_concepts_mview.species_id
    ]
    THEN FALSE
    ELSE
    TRUE
    END AS is_applicable
    FROM ' || all_listing_changes_mview || ' all_listing_changes_mview
    JOIN cms_tmp_taxon_concepts_mview taxon_concepts_mview
    ON all_listing_changes_mview.affected_taxon_concept_id = taxon_concepts_mview.id
    WHERE all_listing_changes_mview.affected_taxon_concept_id = $1
    AND timeline_position = 1

    UNION

    SELECT hi.id,
    hi.designation_id,
    listing_changes_timeline.original_taxon_concept_id,
    hi.taxon_concept_id,
    -- BEGIN context
    CASE
    WHEN change_types.name = ''DELETION''
    AND hi.taxon_concept_id = hi.affected_taxon_concept_id
    THEN listing_changes_timeline.context - ARRAY[hi.species_listing_id::TEXT]
    WHEN change_types.name = ''DELETION''
    THEN listing_changes_timeline.context - HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    WHEN change_types.name = ''ADDITION''
    THEN listing_changes_timeline.context || HSTORE(hi.species_listing_id::TEXT, hi.taxon_concept_id::TEXT)
    ELSE listing_changes_timeline.context
    END,
    -- END context
    hi.inclusion_taxon_concept_id,
    hi.species_listing_id,
    hi.change_type_id,
    hi.effective_at,
    CASE
    WHEN hi.inclusion_taxon_concept_id IS NOT NULL
    OR hi.tree_distance < listing_changes_timeline.context_tree_distance
    THEN hi.tree_distance
    ELSE listing_changes_timeline.context_tree_distance
    END,
    hi.timeline_position,
    -- BEGIN is_applicable
    CASE
    WHEN (
      -- there are listed populations
      ARRAY_UPPER(hi.listed_geo_entities_ids, 1) IS NOT NULL
      -- and the taxon has its own distribution and does not occur in any of them
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND NOT hi.listed_geo_entities_ids && taxon_concepts_mview.countries_ids_ary
    )
    -- when all populations are excluded
    OR (
      ARRAY_UPPER(hi.excluded_geo_entities_ids, 1) IS NOT NULL
      AND ARRAY_UPPER(taxon_concepts_mview.countries_ids_ary, 1) IS NOT NULL
      AND hi.excluded_geo_entities_ids @> taxon_concepts_mview.countries_ids_ary
    )
    THEN FALSE
    WHEN ARRAY_UPPER(hi.excluded_taxon_concept_ids, 1) IS NOT NULL
    -- if taxon or any of its ancestors is excluded from this listing
    AND hi.excluded_taxon_concept_ids && ARRAY[
      hi.affected_taxon_concept_id,
      taxon_concepts_mview.kingdom_id,
      taxon_concepts_mview.phylum_id,
      taxon_concepts_mview.class_id,
      taxon_concepts_mview.order_id,
      taxon_concepts_mview.family_id,
      taxon_concepts_mview.genus_id,
      taxon_concepts_mview.species_id
    ]
    THEN FALSE
    ELSE TRUE -- in CMS everything happily cascades
    END
    -- END is_applicable
    FROM ' || all_listing_changes_mview || ' hi
    JOIN listing_changes_timeline
    ON hi.designation_id = listing_changes_timeline.designation_id
    AND listing_changes_timeline.original_taxon_concept_id = hi.affected_taxon_concept_id
    AND listing_changes_timeline.timeline_position + 1 = hi.timeline_position
    JOIN change_types ON hi.change_type_id = change_types.id
    JOIN cms_tmp_taxon_concepts_mview taxon_concepts_mview
    ON hi.affected_taxon_concept_id = taxon_concepts_mview.id
  )
  SELECT listing_changes_timeline.id
  FROM listing_changes_timeline
  WHERE is_applicable
  ORDER BY timeline_position';

  -- note to self: the reason to execute a string here rather than use an SQL
  -- function is that cms_all_listing_changes_mview does not exist at the time
  -- this function is defined.
  RETURN QUERY EXECUTE sql USING node_id;
END;
$_$;


--
-- Name: FUNCTION cms_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.cms_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) IS 'Returns applicable listing changes for a given node, including own and ancestors (following CMS cascading rules).';


--
-- Name: cms_leaf_listing(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cms_leaf_listing(node_id integer) RETURNS public.hstore
    LANGUAGE sql STABLE
    AS $_$
    SELECT hstore(
      'cms_listing',
      ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(
          SELECT * FROM UNNEST(
            ARRAY[
              taxon_concepts.listing -> 'cms_I',
              taxon_concepts.listing -> 'cms_II',
              taxon_concepts.listing -> 'cms_not_listed'
            ]
          ) s WHERE s IS NOT NULL
        ), '/'
      )
    )
    FROM taxon_concepts
    WHERE id = $1;
  $_$;


--
-- Name: copy_eu_suspensions_across_events(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.copy_eu_suspensions_across_events(from_event_id integer, to_event_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      to_event events%ROWTYPE;
    BEGIN

    SELECT INTO to_event * FROM events WHERE id = to_event_id;

    -- copy eu_suspensions
    INSERT INTO eu_decisions (
      is_current, notes, internal_notes, taxon_concept_id, geo_entity_id,
      start_date, start_event_id, end_date, end_event_id, type,
      conditions_apply, created_at, updated_at, eu_decision_type_id,
      term_id, source_id, created_by_id, updated_by_id
    )
    SELECT true, source.notes, source.internal_notes,
      source.taxon_concept_id, source.geo_entity_id,
      to_event.effective_at, to_event_id, null, null, source.type,
      source.conditions_apply, current_date, current_date,
      source.eu_decision_type_id, source.term_id, source_id,
      events.created_by_id, events.updated_by_id
    FROM eu_decisions source
    JOIN events
    ON events.id = to_event_id
    WHERE source.start_event_id = from_event_id  AND source.type = 'EuSuspension';

    UPDATE eu_decisions SET end_event_id = to_event.id
    WHERE start_event_id = from_event_id AND type = 'EuSuspension';

    END;
  $$;


--
-- Name: FUNCTION copy_eu_suspensions_across_events(from_event_id integer, to_event_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.copy_eu_suspensions_across_events(from_event_id integer, to_event_id integer) IS 'Procedure to copy eu suspensions across two events.';


--
-- Name: copy_listing_changes_across_events(integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.copy_listing_changes_across_events(from_event_id integer, to_event_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      to_event events%ROWTYPE;
    BEGIN
    SELECT INTO to_event * FROM events WHERE id = to_event_id;

    WITH event_lcs AS (
      SELECT *
      FROM listing_changes
      WHERE event_id = from_event_id
    ), exclusions AS (
      SELECT listing_changes.*
      FROM event_lcs
      JOIN listing_changes
      ON event_lcs.id = listing_changes.parent_id
    ), lcs_to_copy AS (
      SELECT * FROM event_lcs
      UNION
      SELECT * FROM exclusions
    ), copied_annotations AS (
      -- copy regular annotations
      INSERT INTO annotations (
        symbol, parent_symbol,
        short_note_en, short_note_es, short_note_fr,
        full_note_en, full_note_es, full_note_fr,
        display_in_index, display_in_footnote,
        created_at, updated_at, original_id
      )
      SELECT symbol, parent_symbol,
        short_note_en, short_note_es, short_note_fr,
        full_note_en, full_note_es, full_note_fr,
        display_in_index, display_in_footnote,
        current_date, current_date, original.id
      FROM annotations original
      INNER JOIN lcs_to_copy lc
        ON lc.annotation_id = original.id
      RETURNING id, original_id
    ), copied_hash_annotations AS (
      -- copy hash annotations
      INSERT INTO annotations (
        symbol, parent_symbol, event_id,
        short_note_en, short_note_es, short_note_fr,
        full_note_en, full_note_es, full_note_fr,
        display_in_index, display_in_footnote,
        created_at, updated_at, original_id
      )
      SELECT DISTINCT symbol, to_event.name, to_event_id,
        short_note_en, short_note_es, short_note_fr,
        full_note_en, full_note_es, full_note_fr,
        display_in_index, display_in_footnote,
        current_date, current_date, original.id
      FROM annotations original
      JOIN lcs_to_copy lc
        ON lc.hash_annotation_id = original.id
      RETURNING id, original_id
    ), copied_listing_changes AS (
      -- copy listing_changes
      INSERT INTO listing_changes (
        change_type_id, species_listing_id, annotation_id, hash_annotation_id,
        parent_id, taxon_concept_id, event_id, effective_at, is_current,
        created_at, updated_at, original_id, created_by_id, updated_by_id
      )
      SELECT DISTINCT ON (original.id) original.change_type_id, original.species_listing_id,
        copied_annotations.id, copied_hash_annotations.id, original.parent_id,
        original.taxon_concept_id, to_event.id, to_event.effective_at, to_event.is_current,
        current_date, current_date, original.id,
        events.created_by_id, events.updated_by_id
      FROM event_lcs original
      LEFT JOIN copied_annotations
        ON original.annotation_id = copied_annotations.original_id
      LEFT JOIN copied_hash_annotations
        ON original.hash_annotation_id = copied_hash_annotations.original_id
      JOIN events
        ON events.id = to_event_id
      RETURNING id, original_id, created_at, created_by_id, updated_at, updated_by_id
    ), copied_exclusions AS (
      INSERT INTO listing_changes (
        change_type_id, species_listing_id, annotation_id, hash_annotation_id,
        parent_id, taxon_concept_id, event_id, effective_at, is_current,
        created_at, updated_at, original_id, created_by_id, updated_by_id
      )
      SELECT DISTINCT ON (original.id) original.change_type_id, original.species_listing_id,
        NULL::INT, NULL::INT, copied_listing_changes.id,
        original.taxon_concept_id, NULL::INT, to_event.effective_at, to_event.is_current,
        copied_listing_changes.created_at, copied_listing_changes.updated_at, original.id,
        copied_listing_changes.created_by_id, copied_listing_changes.updated_by_id
      FROM exclusions original
      JOIN copied_listing_changes
      ON copied_listing_changes.original_id = original.parent_id
      RETURNING id, original_id, created_at, created_by_id, updated_at, updated_by_id
    )
    INSERT INTO listing_distributions (
      listing_change_id, geo_entity_id, is_party, created_at, updated_at
    )
    SELECT DISTINCT copied_listing_changes.id, original.geo_entity_id, original.is_party,
      current_date, current_date
    FROM listing_distributions original
    JOIN copied_listing_changes
      ON copied_listing_changes.original_id = original.listing_change_id
    UNION
    SELECT DISTINCT copied_exclusions.id, original.geo_entity_id, original.is_party,
      current_date, current_date
    FROM listing_distributions original
    JOIN copied_exclusions
      ON copied_exclusions.original_id = original.listing_change_id;

    END;
  $$;


--
-- Name: FUNCTION copy_listing_changes_across_events(from_event_id integer, to_event_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.copy_listing_changes_across_events(from_event_id integer, to_event_id integer) IS 'Procedure to copy listing changes across two events.';


--
-- Name: copy_quotas_across_years(integer, date, date, date, integer[], integer[], integer[], integer[], character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
   included_taxon_concepts INTEGER[];
   excluded_taxon_concepts INTEGER[];
   included_geo_entities INTEGER[];
   excluded_geo_entities INTEGER[];
   cites_taxonomy_id INTEGER;
   updated_rows INTEGER;
BEGIN

    SELECT id into cites_taxonomy_id FROM taxonomies WHERE name = 'CITES_EU';

    -- fetch included_taxon_concepts
    WITH RECURSIVE self_and_descendants(id, full_name) AS (
      SELECT id, full_name FROM taxon_concepts
      WHERE included_taxon_concepts_ids @> ARRAY[id] AND taxonomy_id = cites_taxonomy_id

      UNION

      SELECT hi.id, hi.full_name FROM taxon_concepts hi
      JOIN self_and_descendants d ON d.id = hi.parent_id
      WHERE  hi.taxonomy_id = cites_taxonomy_id
    )
    SELECT array_agg(id) INTO included_taxon_concepts FROM self_and_descendants;

    -- fetch excluded_taxon_concepts
    WITH RECURSIVE self_and_descendants(id, full_name) AS (
      SELECT id, full_name FROM taxon_concepts
      WHERE excluded_taxon_concepts_ids @> ARRAY[id] AND taxonomy_id = cites_taxonomy_id

      UNION

      SELECT hi.id, hi.full_name FROM taxon_concepts hi
      JOIN self_and_descendants d ON d.id = hi.parent_id
    )
    SELECT array_agg(id) INTO excluded_taxon_concepts FROM self_and_descendants;

    -- fetch included geo entities
    SELECT array_agg(matches.id) INTO included_geo_entities
    FROM (
      SELECT geo_entities.id FROM geo_entities
      WHERE included_geo_entities_ids @> ARRAY[id]
      UNION
      SELECT geo_entities.id FROM geo_entities
      INNER JOIN geo_relationships ON geo_relationships.other_geo_entity_id = geo_entities.id
        AND included_geo_entities_ids @> ARRAY[geo_relationships.geo_entity_id]
      INNER JOIN geo_relationship_types ON geo_relationship_types.id = geo_relationships.geo_relationship_type_id
        AND geo_relationship_types.name = 'CONTAINS'
    ) AS matches;

    -- fetch excluded geo entities
    SELECT array_agg(matches.id) INTO excluded_geo_entities
    FROM (
      SELECT geo_entities.id FROM geo_entities
      WHERE excluded_geo_entities_ids @> ARRAY[id]
      UNION
      SELECT geo_entities.id FROM geo_entities
      INNER JOIN geo_relationships ON geo_relationships.other_geo_entity_id = geo_entities.id
        AND excluded_geo_entities_ids @> ARRAY[geo_relationships.geo_entity_id]
      INNER JOIN geo_relationship_types ON geo_relationship_types.id = geo_relationships.geo_relationship_type_id
        AND geo_relationship_types.name = 'CONTAINS'
    ) AS matches;

    WITH original_current_quotas AS (
      SELECT *
      FROM trade_restrictions
      WHERE type = 'Quota' AND EXTRACT(year FROM start_date) =  from_year AND is_current = true
      AND (ARRAY_LENGTH(excluded_taxon_concepts, 1) IS NULL OR NOT excluded_taxon_concepts @> ARRAY[taxon_concept_id])
      AND (ARRAY_LENGTH(included_taxon_concepts, 1) IS NULL OR included_taxon_concepts @> ARRAY[taxon_concept_id])	
      AND (ARRAY_LENGTH(excluded_geo_entities, 1) IS NULL OR NOT excluded_geo_entities @> ARRAY[geo_entity_id])
      AND (ARRAY_LENGTH(included_geo_entities, 1) IS NULL OR included_geo_entities  @> ARRAY[geo_entity_id])
    ), original_terms AS (
      SELECT quota_terms.*
      FROM trade_restriction_terms quota_terms
      JOIN original_current_quotas quotas
      ON quota_terms.trade_restriction_id = quotas.id
    ), original_sources AS (
      SELECT quota_sources.*
      FROM trade_restriction_sources quota_sources
      JOIN original_current_quotas quotas
      ON quota_sources.trade_restriction_id = quotas.id
    ), updated_quotas AS (
      UPDATE trade_restrictions
      SET is_current = false
      FROM original_current_quotas
      WHERE trade_restrictions.id = original_current_quotas.id
    ), inserted_quotas AS (
      INSERT INTO trade_restrictions(type, is_current, start_date, end_date, geo_entity_id, quota,
      publication_date, notes, unit_id, taxon_concept_id, public_display, url, created_at, updated_at,
      excluded_taxon_concepts_ids, original_id)
      SELECT 'Quota', is_current, new_start_date, new_end_date, geo_entity_id, quota,
      new_publication_date,
      CASE
        WHEN LENGTH(from_text) = 0
        THEN notes
      ELSE
        REPLACE(notes, from_text, to_text)
      END, unit_id, taxon_concept_id, public_display, url,
      NOW(), NOW(), trade_restrictions.excluded_taxon_concepts_ids,
      trade_restrictions.id
      FROM original_current_quotas AS trade_restrictions
      RETURNING *
    ), inserted_terms AS (
      INSERT INTO trade_restriction_terms (
        trade_restriction_id, term_id, created_at, updated_at
      )
      SELECT inserted_quotas.id, original_terms.term_id, NOW(), NOW()
      FROM original_terms
      JOIN inserted_quotas
      ON inserted_quotas.original_id = original_terms.trade_restriction_id
    ), inserted_sources AS (
      INSERT INTO trade_restriction_sources (
        trade_restriction_id, source_id, created_at, updated_at
      )
      SELECT inserted_quotas.id, original_sources.source_id, NOW(), NOW()
      FROM original_sources
      JOIN inserted_quotas
      ON inserted_quotas.original_id = original_sources.trade_restriction_id
    )
    SELECT COUNT(*) INTO updated_rows
    FROM inserted_quotas;

    RAISE INFO '[%] Copied % quotas', 'trade_transactions', updated_rows;
  END;
$$;


--
-- Name: FUNCTION copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying) IS 'Procedure to copy quotas across two years with some filtering parameters.';


--
-- Name: copy_quotas_across_years(integer, date, date, date, integer[], integer[], integer[], integer[], character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying, current_user_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
   included_taxon_concepts INTEGER[];
   excluded_taxon_concepts INTEGER[];
   included_geo_entities INTEGER[];
   excluded_geo_entities INTEGER[];
   cites_taxonomy_id INTEGER;
   updated_rows INTEGER;
BEGIN

    SELECT id into cites_taxonomy_id FROM taxonomies WHERE name = 'CITES_EU';

    -- fetch included_taxon_concepts
    WITH RECURSIVE self_and_descendants(id, full_name) AS (
      SELECT id, full_name FROM taxon_concepts
      WHERE included_taxon_concepts_ids @> ARRAY[id] AND taxonomy_id = cites_taxonomy_id

      UNION

      SELECT hi.id, hi.full_name FROM taxon_concepts hi
      JOIN self_and_descendants d ON d.id = hi.parent_id
      WHERE  hi.taxonomy_id = cites_taxonomy_id
    )
    SELECT array_agg(id) INTO included_taxon_concepts FROM self_and_descendants;

    -- fetch excluded_taxon_concepts
    WITH RECURSIVE self_and_descendants(id, full_name) AS (
      SELECT id, full_name FROM taxon_concepts
      WHERE excluded_taxon_concepts_ids @> ARRAY[id] AND taxonomy_id = cites_taxonomy_id

      UNION

      SELECT hi.id, hi.full_name FROM taxon_concepts hi
      JOIN self_and_descendants d ON d.id = hi.parent_id
    )
    SELECT array_agg(id) INTO excluded_taxon_concepts FROM self_and_descendants;

    -- fetch included geo entities
    SELECT array_agg(matches.id) INTO included_geo_entities
    FROM (
      SELECT geo_entities.id FROM geo_entities
      WHERE included_geo_entities_ids @> ARRAY[id]
      UNION
      SELECT geo_entities.id FROM geo_entities
      INNER JOIN geo_relationships ON geo_relationships.other_geo_entity_id = geo_entities.id
        AND included_geo_entities_ids @> ARRAY[geo_relationships.geo_entity_id]
      INNER JOIN geo_relationship_types ON geo_relationship_types.id = geo_relationships.geo_relationship_type_id
        AND geo_relationship_types.name = 'CONTAINS'
    ) AS matches;

    -- fetch excluded geo entities
    SELECT array_agg(matches.id) INTO excluded_geo_entities
    FROM (
      SELECT geo_entities.id FROM geo_entities
      WHERE excluded_geo_entities_ids @> ARRAY[id]
      UNION
      SELECT geo_entities.id FROM geo_entities
      INNER JOIN geo_relationships ON geo_relationships.other_geo_entity_id = geo_entities.id
        AND excluded_geo_entities_ids @> ARRAY[geo_relationships.geo_entity_id]
      INNER JOIN geo_relationship_types ON geo_relationship_types.id = geo_relationships.geo_relationship_type_id
        AND geo_relationship_types.name = 'CONTAINS'
    ) AS matches;

    WITH original_current_quotas AS (
      SELECT *
      FROM trade_restrictions
      WHERE type = 'Quota' AND EXTRACT(year FROM start_date) =  from_year AND is_current = true
      AND (ARRAY_LENGTH(excluded_taxon_concepts, 1) IS NULL OR NOT excluded_taxon_concepts @> ARRAY[taxon_concept_id])
      AND (ARRAY_LENGTH(included_taxon_concepts, 1) IS NULL OR included_taxon_concepts @> ARRAY[taxon_concept_id])	
      AND (ARRAY_LENGTH(excluded_geo_entities, 1) IS NULL OR NOT excluded_geo_entities @> ARRAY[geo_entity_id])
      AND (ARRAY_LENGTH(included_geo_entities, 1) IS NULL OR included_geo_entities  @> ARRAY[geo_entity_id])
    ), original_terms AS (
      SELECT quota_terms.*
      FROM trade_restriction_terms quota_terms
      JOIN original_current_quotas quotas
      ON quota_terms.trade_restriction_id = quotas.id
    ), original_sources AS (
      SELECT quota_sources.*
      FROM trade_restriction_sources quota_sources
      JOIN original_current_quotas quotas
      ON quota_sources.trade_restriction_id = quotas.id
    ), updated_quotas AS (
      UPDATE trade_restrictions
      SET is_current = false
      FROM original_current_quotas
      WHERE trade_restrictions.id = original_current_quotas.id
    ), inserted_quotas AS (
      INSERT INTO trade_restrictions(created_by_id, updated_by_id, type, is_current, start_date, 
      end_date, geo_entity_id, quota, publication_date, notes, unit_id, taxon_concept_id, 
      public_display, url, created_at, updated_at, excluded_taxon_concepts_ids, original_id)
      SELECT current_user_id, current_user_id, 'Quota', is_current, new_start_date, new_end_date, geo_entity_id, 
      quota, new_publication_date,
      CASE
        WHEN LENGTH(from_text) = 0
        THEN notes
      ELSE
        REPLACE(notes, from_text, to_text)
      END, unit_id, taxon_concept_id, public_display, url,
      NOW(), NOW(), trade_restrictions.excluded_taxon_concepts_ids,
      trade_restrictions.id
      FROM original_current_quotas AS trade_restrictions
      RETURNING *
    ), inserted_terms AS (
      INSERT INTO trade_restriction_terms (
        trade_restriction_id, term_id, created_at, updated_at
      )
      SELECT inserted_quotas.id, original_terms.term_id, NOW(), NOW()
      FROM original_terms
      JOIN inserted_quotas
      ON inserted_quotas.original_id = original_terms.trade_restriction_id
    ), inserted_sources AS (
      INSERT INTO trade_restriction_sources (
        trade_restriction_id, source_id, created_at, updated_at
      )
      SELECT inserted_quotas.id, original_sources.source_id, NOW(), NOW()
      FROM original_sources
      JOIN inserted_quotas
      ON inserted_quotas.original_id = original_sources.trade_restriction_id
    )
    SELECT COUNT(*) INTO updated_rows
    FROM inserted_quotas;

    RAISE INFO '[%] Copied % quotas', 'trade_transactions', updated_rows;
  END;
$$;


--
-- Name: FUNCTION copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying, current_user_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying, current_user_id integer) IS 'Procedure to copy quotas across two years with some filtering parameters.';


--
-- Name: copy_quotas_across_years(integer, date, date, date, integer[], integer[], integer[], integer[], character varying, character varying, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying, current_user_id integer, new_url character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
   included_taxon_concepts INTEGER[];
   excluded_taxon_concepts INTEGER[];
   included_geo_entities INTEGER[];
   excluded_geo_entities INTEGER[];
   cites_taxonomy_id INTEGER;
   updated_rows INTEGER;
BEGIN

    SELECT id into cites_taxonomy_id FROM taxonomies WHERE name = 'CITES_EU';

    -- fetch included_taxon_concepts
    WITH RECURSIVE self_and_descendants(id, full_name) AS (
      SELECT id, full_name FROM taxon_concepts
      WHERE included_taxon_concepts_ids @> ARRAY[id] AND taxonomy_id = cites_taxonomy_id

      UNION

      SELECT hi.id, hi.full_name FROM taxon_concepts hi
      JOIN self_and_descendants d ON d.id = hi.parent_id
      WHERE  hi.taxonomy_id = cites_taxonomy_id
    )
    SELECT array_agg(id) INTO included_taxon_concepts FROM self_and_descendants;

    -- fetch excluded_taxon_concepts
    WITH RECURSIVE self_and_descendants(id, full_name) AS (
      SELECT id, full_name FROM taxon_concepts
      WHERE excluded_taxon_concepts_ids @> ARRAY[id] AND taxonomy_id = cites_taxonomy_id

      UNION

      SELECT hi.id, hi.full_name FROM taxon_concepts hi
      JOIN self_and_descendants d ON d.id = hi.parent_id
    )
    SELECT array_agg(id) INTO excluded_taxon_concepts FROM self_and_descendants;

    -- fetch included geo entities
    SELECT array_agg(matches.id) INTO included_geo_entities
    FROM (
      SELECT geo_entities.id FROM geo_entities
      WHERE included_geo_entities_ids @> ARRAY[id]
      UNION
      SELECT geo_entities.id FROM geo_entities
      INNER JOIN geo_relationships ON geo_relationships.other_geo_entity_id = geo_entities.id
        AND included_geo_entities_ids @> ARRAY[geo_relationships.geo_entity_id]
      INNER JOIN geo_relationship_types ON geo_relationship_types.id = geo_relationships.geo_relationship_type_id
        AND geo_relationship_types.name = 'CONTAINS'
    ) AS matches;

    -- fetch excluded geo entities
    SELECT array_agg(matches.id) INTO excluded_geo_entities
    FROM (
      SELECT geo_entities.id FROM geo_entities
      WHERE excluded_geo_entities_ids @> ARRAY[id]
      UNION
      SELECT geo_entities.id FROM geo_entities
      INNER JOIN geo_relationships ON geo_relationships.other_geo_entity_id = geo_entities.id
        AND excluded_geo_entities_ids @> ARRAY[geo_relationships.geo_entity_id]
      INNER JOIN geo_relationship_types ON geo_relationship_types.id = geo_relationships.geo_relationship_type_id
        AND geo_relationship_types.name = 'CONTAINS'
    ) AS matches;

    WITH original_current_quotas AS (
      SELECT *
      FROM trade_restrictions
      WHERE type = 'Quota' AND EXTRACT(year FROM start_date) =  from_year AND is_current = true
      AND (ARRAY_LENGTH(excluded_taxon_concepts, 1) IS NULL OR NOT excluded_taxon_concepts @> ARRAY[taxon_concept_id])
      AND (ARRAY_LENGTH(included_taxon_concepts, 1) IS NULL OR included_taxon_concepts @> ARRAY[taxon_concept_id])
      AND (ARRAY_LENGTH(excluded_geo_entities, 1) IS NULL OR NOT excluded_geo_entities @> ARRAY[geo_entity_id])
      AND (ARRAY_LENGTH(included_geo_entities, 1) IS NULL OR included_geo_entities  @> ARRAY[geo_entity_id])
    ), original_terms AS (
      SELECT quota_terms.*
      FROM trade_restriction_terms quota_terms
      JOIN original_current_quotas quotas
      ON quota_terms.trade_restriction_id = quotas.id
    ), original_sources AS (
      SELECT quota_sources.*
      FROM trade_restriction_sources quota_sources
      JOIN original_current_quotas quotas
      ON quota_sources.trade_restriction_id = quotas.id
    ), updated_quotas AS (
      UPDATE trade_restrictions
      SET is_current = false
      FROM original_current_quotas
      WHERE trade_restrictions.id = original_current_quotas.id
    ), inserted_quotas AS (
      INSERT INTO trade_restrictions(created_by_id, updated_by_id, type, is_current, start_date,
      end_date, geo_entity_id, quota, publication_date, notes, unit_id, taxon_concept_id,
      public_display, url, created_at, updated_at, excluded_taxon_concepts_ids, original_id)
      SELECT current_user_id, current_user_id, 'Quota', is_current, new_start_date, new_end_date, geo_entity_id,
      quota, new_publication_date,
      CASE
        WHEN LENGTH(from_text) = 0
        THEN notes
      ELSE
        REPLACE(notes, from_text, to_text)
      END, unit_id, taxon_concept_id, public_display, new_url,
      NOW(), NOW(), trade_restrictions.excluded_taxon_concepts_ids,
      trade_restrictions.id
      FROM original_current_quotas AS trade_restrictions
      RETURNING *
    ), inserted_terms AS (
      INSERT INTO trade_restriction_terms (
        trade_restriction_id, term_id, created_at, updated_at
      )
      SELECT inserted_quotas.id, original_terms.term_id, NOW(), NOW()
      FROM original_terms
      JOIN inserted_quotas
      ON inserted_quotas.original_id = original_terms.trade_restriction_id
    ), inserted_sources AS (
      INSERT INTO trade_restriction_sources (
        trade_restriction_id, source_id, created_at, updated_at
      )
      SELECT inserted_quotas.id, original_sources.source_id, NOW(), NOW()
      FROM original_sources
      JOIN inserted_quotas
      ON inserted_quotas.original_id = original_sources.trade_restriction_id
    )
    SELECT COUNT(*) INTO updated_rows
    FROM inserted_quotas;

    RAISE INFO '[%] Copied % quotas', 'trade_transactions', updated_rows;
  END;
$$;


--
-- Name: FUNCTION copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying, current_user_id integer, new_url character varying); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.copy_quotas_across_years(from_year integer, new_start_date date, new_end_date date, new_publication_date date, excluded_taxon_concepts_ids integer[], included_taxon_concepts_ids integer[], excluded_geo_entities_ids integer[], included_geo_entities_ids integer[], from_text character varying, to_text character varying, current_user_id integer, new_url character varying) IS 'Procedure to copy quotas across two years with some filtering parameters.';


--
-- Name: copy_transactions_from_sandbox_to_shipments(integer, character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.copy_transactions_from_sandbox_to_shipments(annual_report_upload_id integer, submitter_type character varying, submitter_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  aru trade_annual_report_uploads%ROWTYPE;
  table_name TEXT;
  cites_taxonomy_id INTEGER;
  reported_by_exporter BOOLEAN;
  inserted_rows INTEGER;
  inserted_shipments INTEGER;
  total_shipments INTEGER;
  sql TEXT;
  permit_type TEXT;
  sapi_type BOOLEAN;
BEGIN
  SELECT * INTO aru FROM trade_annual_report_uploads WHERE id = annual_report_upload_id;
  IF NOT FOUND THEN
    RAISE NOTICE '[%] Annual report upload not found.', table_name;
    RETURN -1;
  END IF;
  IF aru.point_of_view = 'E' THEN
    reported_by_exporter := TRUE;
  ELSE
    reported_by_exporter := FALSE;
  END IF;
  SELECT id INTO cites_taxonomy_id FROM taxonomies WHERE name = 'CITES_EU';
  IF NOT FOUND THEN
    RAISE NOTICE '[%] Taxonomy not found.', table_name;
    RETURN -1;
  END IF;
  table_name := 'trade_sandbox_' || annual_report_upload_id;
  EXECUTE 'SELECT COUNT(*) FROM ' || table_name INTO total_shipments;
  RAISE INFO '[%] Copying % rows from %', table_name, total_shipments, table_name;

  sql := '
    WITH split_permits AS (
      SELECT id,
      SQUISH(regexp_split_to_table(export_permit, ''[:;,]'')) AS permit
      FROM '|| table_name || '
      UNION
      SELECT id,
      SQUISH(regexp_split_to_table(import_permit, ''[:;,]'')) AS permit
      FROM '|| table_name || '
      UNION
      SELECT id,
      SQUISH(regexp_split_to_table(origin_permit, ''[:;,]'')) AS permit
      FROM '|| table_name || '
      UNION
      SELECT id,
      SQUISH(regexp_split_to_table(ifs_permit, ''[:;,]'')) AS permit
      FROM '|| table_name || '
    ), permits_to_be_inserted (number) AS (
      SELECT DISTINCT UPPER(permit) FROM split_permits WHERE permit IS NOT NULL
      EXCEPT
      SELECT UPPER(number) FROM trade_permits
    )
    INSERT INTO trade_permits(number, created_at, updated_at)
    SELECT UPPER(number), current_timestamp, current_timestamp
    FROM permits_to_be_inserted';

  EXECUTE sql;

  GET DIAGNOSTICS inserted_rows = ROW_COUNT;
  RAISE INFO '[%] Inserted % permits', table_name, inserted_rows;

  sapi_type := CASE WHEN submitter_type = 'Sapi' THEN true ELSE false END;

  sql := '
    CREATE TEMP TABLE ' || table_name || '_for_submit AS
    WITH inserted_shipments AS (
      INSERT INTO trade_shipments (
        source_id,
        unit_id,
        purpose_id,
        term_id,
        quantity,
        appendix,
        trade_annual_report_upload_id,
        exporter_id,
        importer_id,
        country_of_origin_id,
        reported_by_exporter,
        taxon_concept_id,
        reported_taxon_concept_id,
        year,
        sandbox_id,
        created_at,
        updated_at,
        epix_created_at,
        epix_updated_at,
        created_by_id,
        updated_by_id,
        epix_created_by_id,
        epix_updated_by_id
      )
      SELECT
        sources.id AS source_id,
        units.id AS unit_id,
        purposes.id AS purpose_id,
        terms.id AS term_id,
        sandbox_table.quantity::NUMERIC AS quantity,
        sandbox_table.appendix,
        ' || aru.id || ' AS trade_annual_report_upload_id,
        exporters.id AS exporter_id,
        importers.id AS importer_id,
        origins.id AS country_of_origin_id,
        ' || reported_by_exporter || ' AS reported_by_exporter,
        taxon_concept_id,
        reported_taxon_concept_id,
        sandbox_table.year::INTEGER AS year,
        sandbox_table.id AS sandbox_id,
        CASE WHEN ' || sapi_type || ' IS TRUE THEN current_timestamp ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS TRUE THEN current_timestamp ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS FALSE THEN current_timestamp ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS FALSE THEN current_timestamp ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS TRUE THEN ' || submitter_id || ' ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS TRUE THEN ' || submitter_id || ' ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS FALSE THEN ' || submitter_id || ' ELSE NULL END,
        CASE WHEN ' || sapi_type || ' IS FALSE THEN ' || submitter_id || ' ELSE NULL END
      FROM '|| table_name || ' sandbox_table';

    IF reported_by_exporter THEN
      sql := sql ||
      '
      JOIN geo_entities AS exporters ON
        exporters.id = ' || aru.trading_country_id ||
      '
      JOIN geo_entities AS importers ON
        importers.iso_code2 = sandbox_table.trading_partner';
    ELSE
      sql := sql ||
      '
      JOIN geo_entities AS exporters ON
        exporters.iso_code2 = sandbox_table.trading_partner
      JOIN geo_entities AS importers ON
        importers.id = ' || aru.trading_country_id;
    END IF;
    sql := sql ||
      '
      JOIN trade_codes AS terms ON sandbox_table.term_code = terms.code
        AND terms.type = ''Term''
      LEFT JOIN trade_codes AS sources ON sandbox_table.source_code = sources.code
        AND sources.type = ''Source''
      LEFT JOIN trade_codes AS units ON sandbox_table.unit_code = units.code
        AND units.type = ''Unit''
      LEFT JOIN trade_codes AS purposes ON sandbox_table.purpose_code = purposes.code
        AND purposes.type = ''Purpose''
      LEFT JOIN geo_entities AS origins ON origins.iso_code2 = sandbox_table.country_of_origin
      RETURNING *
    ) SELECT * FROM inserted_shipments';

  EXECUTE sql;

  GET DIAGNOSTICS inserted_shipments = ROW_COUNT;
  RAISE INFO '[%] Inserted % shipments out of %', table_name, inserted_shipments, total_shipments;
  IF inserted_shipments < total_shipments THEN
    RETURN -1;
  END IF;

  FOREACH permit_type IN ARRAY ARRAY['export', 'import', 'origin', 'ifs'] LOOP

    sql := 'WITH split_permits AS (
      SELECT id, SQUISH(regexp_split_to_table(' || permit_type || '_permit, ''[:;,]'')) AS permit
      FROM '|| table_name || '
    ), shipment_permits AS (
      SELECT DISTINCT ON (1,2)
        shipments_for_submit.id AS trade_shipment_id,
        trade_permits.id AS trade_permit_id,
        trade_permits.number
      FROM '|| table_name || '_for_submit shipments_for_submit
      INNER JOIN split_permits
        ON split_permits.id = shipments_for_submit.sandbox_id
      INNER JOIN trade_permits
        ON UPPER(trade_permits.number) = UPPER(split_permits.permit)
    ), agg_shipment_permits AS (
      SELECT trade_shipment_id,
      ARRAY_AGG(trade_permit_id) AS permits_ids,
      ARRAY_TO_STRING(ARRAY_AGG(number), '';'') AS permit_number
      FROM shipment_permits
      GROUP BY trade_shipment_id
    )
    UPDATE trade_shipments
    SET ' || permit_type || '_permit_number = UPPER(sp.permit_number),
    ' || permit_type || '_permits_ids = sp.permits_ids
    FROM agg_shipment_permits sp
    WHERE sp.trade_shipment_id = trade_shipments.id;
    ';

    EXECUTE sql;

    GET DIAGNOSTICS inserted_rows = ROW_COUNT;
    RAISE INFO '[%] Inserted % shipment % permits', table_name, inserted_rows, permit_type;

  END LOOP;

  sql := 'UPDATE trade_shipments SET sandbox_id = NULL
  WHERE trade_shipments.trade_annual_report_upload_id = ' || aru.id;
  EXECUTE sql;
  RETURN inserted_shipments;
END;
$$;


--
-- Name: FUNCTION copy_transactions_from_sandbox_to_shipments(annual_report_upload_id integer, submitter_type character varying, submitter_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.copy_transactions_from_sandbox_to_shipments(annual_report_upload_id integer, submitter_type character varying, submitter_id integer) IS 'Procedure to copy transactions from sandbox to shipments. Returns the number of rows copied if success, 0 if failure.';


--
-- Name: create_trade_plus_complete_mview_indexes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_trade_plus_complete_mview_indexes() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    CREATE UNIQUE INDEX "index_trade_plus_complete_mview_on_id" ON trade_plus_complete_mview (id);
    CREATE INDEX "index_trade_plus_complete_mview_on_appendix" ON trade_plus_complete_mview USING btree (appendix);
    CREATE INDEX "index_trade_plus_complete_mview_on_group_code" ON trade_plus_complete_mview USING btree(group_code);
    CREATE INDEX "index_trade_plus_complete_mview_on_origin_id" ON trade_plus_complete_mview USING btree (origin_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_origin_iso" ON trade_plus_complete_mview USING btree (origin_iso);
    CREATE INDEX "index_trade_plus_complete_mview_on_exporter_id" ON trade_plus_complete_mview USING btree (exporter_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_exporter_iso" ON trade_plus_complete_mview USING btree (exporter_iso);
    CREATE INDEX "index_trade_plus_complete_mview_on_importer_id" ON trade_plus_complete_mview USING btree (importer_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_importer_iso" ON trade_plus_complete_mview USING btree (importer_iso);
    CREATE INDEX "index_trade_plus_complete_mview_on_purpose_id" ON trade_plus_complete_mview USING btree (purpose_id);
    -- Index on quantity was not used in production per pg_stat_user_indexes, checked on 2025-03-26
    -- CREATE INDEX "index_trade_plus_complete_mview_on_quantity" ON trade_plus_complete_mview USING btree (quantity);
    CREATE INDEX "index_trade_plus_complete_mview_on_taxon_id" ON trade_plus_complete_mview USING btree (taxon_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_source_id" ON trade_plus_complete_mview USING btree (source_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_term_id" ON trade_plus_complete_mview USING btree (term_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_term_code" ON trade_plus_complete_mview USING btree (term_code);
    -- Indexes on term_{en,es,fr} were not used in production per pg_stat_user_indexes, checked on 2025-03-26
    -- CREATE INDEX "index_trade_plus_complete_mview_on_term_en" ON trade_plus_complete_mview USING btree (term_en);
    -- CREATE INDEX "index_trade_plus_complete_mview_on_term_es" ON trade_plus_complete_mview USING btree (term_es);
    -- CREATE INDEX "index_trade_plus_complete_mview_on_term_fr" ON trade_plus_complete_mview USING btree (term_fr);
    CREATE INDEX "index_trade_plus_complete_mview_on_unit_id" ON trade_plus_complete_mview USING btree (unit_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_unit_code" ON trade_plus_complete_mview USING btree (unit_code);
    -- Indexes on unit_{en,es,fr} were not used in production per pg_stat_user_indexes, checked on 2025-03-26
    -- CREATE INDEX "index_trade_plus_complete_mview_on_unit_en" ON trade_plus_complete_mview USING btree (unit_en);
    -- CREATE INDEX "index_trade_plus_complete_mview_on_unit_es" ON trade_plus_complete_mview USING btree (unit_es);
    -- CREATE INDEX "index_trade_plus_complete_mview_on_unit_fr" ON trade_plus_complete_mview USING btree (unit_fr);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_btree" ON trade_plus_complete_mview USING btree (year);
    CREATE INDEX "index_trade_plus_complete_mview_on_year" ON trade_plus_complete_mview USING brin (year);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_exporter_id" ON trade_plus_complete_mview USING brin (year, exporter_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_importer_id" ON trade_plus_complete_mview USING brin (year, importer_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_origin_id" ON trade_plus_complete_mview USING brin (year, origin_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_source_id" ON trade_plus_complete_mview USING brin (year, source_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_purpose_id" ON trade_plus_complete_mview USING brin (year, purpose_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_unit_id" ON trade_plus_complete_mview USING brin (year, unit_id);
    CREATE INDEX "index_trade_plus_complete_mview_on_year_term_id" ON trade_plus_complete_mview USING brin (year, term_id);
  END
  $$;


--
-- Name: create_trade_sandbox_view(text, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_trade_sandbox_view(target_table_name text, idx integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    execute 'CREATE VIEW ' || target_table_name || '_view AS
      SELECT aru.point_of_view,
      CASE
        WHEN aru.point_of_view = ''E''
        THEN geo_entities.iso_code2
        ELSE trading_partner
      END AS exporter,
      CASE
        WHEN aru.point_of_view = ''E''
        THEN trading_partner
        ELSE geo_entities.iso_code2
      END AS importer,
      taxon_concepts.full_name AS accepted_taxon_name,
      taxon_concepts.data->''rank_name'' AS rank,
      taxon_concepts.rank_id,
      ' || target_table_name || '.*
      FROM ' || target_table_name || '
      JOIN trade_annual_report_uploads aru ON aru.id = ' || idx || '
      JOIN geo_entities ON geo_entities.id = aru.trading_country_id
      LEFT JOIN taxon_concepts ON taxon_concept_id = taxon_concepts.id';
    RETURN;
  END;
  $$;


--
-- Name: create_trade_sandbox_views(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_trade_sandbox_views() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    current_table_name TEXT;
    aru_id INT;
  BEGIN
    FOR current_table_name IN SELECT table_name FROM information_schema.tables
    WHERE table_name LIKE 'trade_sandbox%'
      AND table_name != 'trade_sandbox_template'
      AND table_type != 'VIEW'
    LOOP
      aru_id := SUBSTRING(current_table_name, E'trade_sandbox_(\\d+)')::INT;
      IF aru_id IS NULL THEN
  RAISE WARNING 'Unable to determine annual report upload id from %', current_table_name;
      ELSE
  PERFORM create_trade_sandbox_view(current_table_name, aru_id);
      END IF;
    END LOOP;
    RETURN;
  END;
  $$;


--
-- Name: drop_eu_lc_mviews(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.drop_eu_lc_mviews() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    current_table_name TEXT;
  BEGIN
    FOR current_table_name IN SELECT table_name FROM information_schema.tables
    WHERE table_name LIKE 'eu_%_listing_changes_mview'
      AND table_type != 'VIEW'
    LOOP
      EXECUTE 'DROP TABLE ' || current_table_name || ' CASCADE';
    END LOOP;
    RETURN;
  END;
  $$;


--
-- Name: drop_import_tables(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.drop_import_tables() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    current_table_name TEXT;
  BEGIN
    FOR current_table_name IN SELECT table_name FROM information_schema.tables
    WHERE table_name LIKE '%_import'
      AND table_type != 'VIEW'
    LOOP
      EXECUTE 'DROP TABLE ' || current_table_name || ' CASCADE';
    END LOOP;
    RETURN;
  END;
  $$;


--
-- Name: drop_trade_sandbox_views(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.drop_trade_sandbox_views() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    current_view_name TEXT;
  BEGIN
    FOR current_view_name IN SELECT table_name FROM information_schema.tables
    WHERE table_name LIKE 'trade_sandbox%_view'
      AND table_type = 'VIEW'
    LOOP
      EXECUTE 'DROP VIEW IF EXISTS ' || current_view_name || ' CASCADE';
    END LOOP;
    RETURN;
  END;
  $$;


--
-- Name: drop_trade_sandboxes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.drop_trade_sandboxes() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    current_table_name TEXT;
  BEGIN
    FOR current_table_name IN SELECT table_name FROM information_schema.tables
    WHERE table_name LIKE 'trade_sandbox%'
      AND table_name != 'trade_sandbox_template'
      AND table_type != 'VIEW'
    LOOP
      EXECUTE 'DROP TABLE ' || current_table_name || ' CASCADE';
    END LOOP;
    RETURN;
  END;
  $$;


--
-- Name: FUNCTION drop_trade_sandboxes(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.drop_trade_sandboxes() IS '
Drops all trade_sandbox_n tables. Used in specs only, you need to know what
you''re doing. If you''re looking to drop all sandboxes in the live system,
use the rake db:drop_sandboxes task instead.';


--
-- Name: eu_aggregate_children_listing(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.eu_aggregate_children_listing(node_id integer) RETURNS public.hstore
    LANGUAGE sql STABLE
    AS $_$
    WITH aggregated_children_listing AS (
      SELECT
      -- this to be used in the timelines: if there are explicitly listed
      -- descendants, the timeline might differ from the current listing
      -- and a note should be displayed to inform the user
      hstore('eu_listed_descendants', BOOL_OR(
        (listing -> 'eu_status_original')::BOOLEAN
        OR (listing -> 'eu_listed_descendants')::BOOLEAN
      )::VARCHAR) ||
      hstore('eu_A', MAX((listing -> 'eu_A')::VARCHAR)) ||
      hstore('eu_B', MAX((listing -> 'eu_B')::VARCHAR)) ||
      hstore('eu_C', MAX((listing -> 'eu_C')::VARCHAR)) ||
      hstore('eu_D', MAX((listing -> 'eu_D')::VARCHAR)) ||
      hstore('eu_NC', MAX((listing -> 'eu_not_listed')::VARCHAR)) ||
      hstore('eu_listing', ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(SELECT * FROM UNNEST(
          ARRAY[
            (MAX(listing -> 'eu_A')::VARCHAR),
            (MAX(listing -> 'eu_B')::VARCHAR),
            (MAX(listing -> 'eu_C')::VARCHAR),
            (MAX(listing -> 'eu_D')::VARCHAR),
            (MAX(listing -> 'eu_not_listed')::VARCHAR)
          ]) s WHERE s IS NOT NULL),
          '/'
        )
      ) AS listing
      FROM taxon_concepts
      WHERE
        -- aggregate children's listings
        parent_id = $1
        -- as well as parent if they're explicitly listed
        OR (
          id = $1
          AND (listing->'eu_status_original')::BOOLEAN
        )
        -- as well as parent if they are species
        -- the assumption being they will have subspecies
        -- which are not listed in their own right and
        -- should therefore inherit the cascaded listing
        -- if one exists
        -- this should fix Lutrinae species, which should be I/II
        -- even though subspecies in the db are on I
        OR (
          id = $1
          AND data->'rank_name' = 'SPECIES'
        )
    )
    SELECT listing
    FROM aggregated_children_listing;
  $_$;


--
-- Name: eu_applicable_listing_changes_for_node(text, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.eu_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) RETURNS SETOF integer
    LANGUAGE sql STABLE STRICT
    AS $_$
  SELECT * FROM cites_eu_applicable_listing_changes_for_node($1, $2);
$_$;


--
-- Name: FUNCTION eu_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.eu_applicable_listing_changes_for_node(all_listing_changes_mview text, node_id integer) IS 'Returns applicable listing changes for a given node, including own and ancestors (following EU cascading rules).';


--
-- Name: eu_leaf_listing(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.eu_leaf_listing(node_id integer) RETURNS public.hstore
    LANGUAGE sql STABLE
    AS $_$
    SELECT hstore(
      'eu_listing',
      ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(
          SELECT * FROM UNNEST(
            ARRAY[
              taxon_concepts.listing -> 'eu_A',
              taxon_concepts.listing -> 'eu_B',
              taxon_concepts.listing -> 'eu_C',
              taxon_concepts.listing -> 'eu_D',
              taxon_concepts.listing -> 'eu_not_listed'
            ]
          ) s WHERE s IS NOT NULL
        ), '/'
      )
    )
    FROM taxon_concepts
    WHERE id = $1;
  $_$;


--
-- Name: fn_array_agg_notnull(anyarray, anyelement); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.fn_array_agg_notnull(a anyarray, b anyelement) RETURNS anyarray
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN

    IF b IS NOT NULL THEN
        a := array_append(a, b);
    END IF;

    RETURN a;

END;
$$;


--
-- Name: full_name(character varying, public.hstore); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.full_name(rank_name character varying, ancestors public.hstore) RETURNS character varying
    LANGUAGE sql IMMUTABLE
    AS $_$
  SELECT CASE
      WHEN $1 = 'SPECIES' THEN
        -- now create a binomen for full name
        CAST($2 -> 'genus_name' AS VARCHAR) || ' ' ||
        LOWER(CAST($2 -> 'species_name' AS VARCHAR))
      WHEN $1 = 'SUBSPECIES' THEN
        -- now create a trinomen for full name
        CAST($2 -> 'genus_name' AS VARCHAR) || ' ' ||
        LOWER(CAST($2 -> 'species_name' AS VARCHAR)) || ' ' ||
        LOWER(CAST($2 -> 'subspecies_name' AS VARCHAR))
      WHEN $1 = 'VARIETY' THEN
        -- now create a trinomen for full name
        CAST($2 -> 'genus_name' AS VARCHAR) || ' ' ||
        LOWER(CAST($2 -> 'species_name' AS VARCHAR)) || ' var. ' ||
        LOWER(CAST($2 -> 'variety_name' AS VARCHAR))
      ELSE $2 -> LOWER($1 || '_name')
  END;
  $_$;


--
-- Name: full_name_with_spp(character varying, character varying, character); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.full_name_with_spp(rank_name character varying, full_name character varying, name_status character) RETURNS character varying
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT CASE
      WHEN $1 IN ('ORDER', 'FAMILY', 'SUBFAMILY', 'GENUS') AND $3 != 'H'
      THEN $2 || ' spp.'
      ELSE $2
    END;
  $_$;


--
-- Name: FUNCTION full_name_with_spp(rank_name character varying, full_name character varying, name_status character); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.full_name_with_spp(rank_name character varying, full_name character varying, name_status character) IS 'Returns full name with ssp where applicable depending on rank. This is not applied for higher than species level hybrids';


--
-- Name: higher_or_equal_ranks_names(character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.higher_or_equal_ranks_names(in_rank_name character varying) RETURNS text[]
    LANGUAGE sql IMMUTABLE
    AS $_$
    WITH ranks_in_order(row_no, rank_name) AS (
      SELECT ROW_NUMBER() OVER(), *
      FROM UNNEST(ARRAY[
      'VARIETY', 'SUBSPECIES', 'SPECIES', 'GENUS', 'SUBFAMILY',
      'FAMILY', 'ORDER', 'CLASS', 'PHYLUM', 'KINGDOM'
      ])
    )
    SELECT ARRAY_AGG(rank_name) FROM ranks_in_order
    WHERE row_no >= (SELECT row_no FROM ranks_in_order WHERE rank_name = $1);
  $_$;


--
-- Name: FUNCTION higher_or_equal_ranks_names(in_rank_name character varying); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.higher_or_equal_ranks_names(in_rank_name character varying) IS 'Returns an array of rank names above the given rank (sorted lowest first).';


--
-- Name: isnumeric(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.isnumeric(text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE x NUMERIC;
BEGIN
    x = $1::NUMERIC;
    RETURN TRUE;
EXCEPTION WHEN others THEN
    RETURN FALSE;
END;
$_$;


--
-- Name: listing_changes_mview_name(text, text, integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.listing_changes_mview_name(prefix text, designation text, events_ids integer[]) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT CASE WHEN $1 IS NULL THEN '' ELSE $1 || '_' END ||
    $2 ||
    CASE
      WHEN $3 IS NOT NULL
      THEN '_' || ARRAY_TO_STRING($3, '_')
      ELSE ''
    END || '_listing_changes_mview';
  $_$;


--
-- Name: rebuild_ancestor_cites_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_cites_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_ancestor_cites_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_ancestor_cites_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_ancestor_cites_listing() IS 'Procedure to rebuild CITES ancestor listings in taxon_concepts.';


--
-- Name: rebuild_ancestor_cites_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_cites_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      ancestor_node_ids INTEGER[];
      tmp_node_id int;
    BEGIN
      IF node_id IS NULL THEN
        FOR tmp_node_id IN SELECT taxon_concepts.id FROM taxon_concepts
          JOIN taxonomies ON taxon_concepts.taxonomy_id = taxonomies.id
          AND taxonomies.name = 'CITES_EU'
          WHERE parent_id IS NULL
        LOOP
          PERFORM rebuild_ancestor_cites_listing_for_node(tmp_node_id);
        END LOOP;
        RETURN;
      END IF;
      PERFORM rebuild_ancestor_cites_listing_recursively_for_node(node_id);
      -- if we're not starting from root, we need to update ancestors
      -- up till root
      ancestor_node_ids := ancestor_node_ids_for_node(node_id);
      FOREACH tmp_node_id IN ARRAY ancestor_node_ids
      LOOP
        UPDATE taxon_concepts
        SET listing  = listing || cites_aggregate_children_listing(tmp_node_id)
        WHERE id = tmp_node_id;
      END LOOP;
    END;
  $$;


--
-- Name: rebuild_ancestor_cites_listing_recursively_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_cites_listing_recursively_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      children_node_ids INTEGER[];
      tmp_node_id INT;
    BEGIN
      SELECT ARRAY_AGG_NOTNULL(id) INTO children_node_ids
      FROM taxon_concepts
      WHERE parent_id = node_id;
      -- if there are children, rebuild their aggregated listing first
      FOREACH tmp_node_id IN ARRAY children_node_ids
      LOOP
        PERFORM rebuild_ancestor_cites_listing_recursively_for_node(tmp_node_id);
      END LOOP;

      -- update this node's aggregated listing
      IF ARRAY_UPPER(children_node_ids, 1) IS NULL THEN
        UPDATE taxon_concepts
        SET listing = listing || cites_leaf_listing(node_id)
        WHERE id = node_id;
      ELSE
        UPDATE taxon_concepts
        SET listing = listing || cites_aggregate_children_listing(node_id)
        WHERE id = node_id;
      END IF;
    END;
  $$;


--
-- Name: rebuild_ancestor_cms_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_cms_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_ancestor_cms_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_ancestor_cms_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_ancestor_cms_listing() IS 'Procedure to rebuild CITES ancestor listings in taxon_concepts.';


--
-- Name: rebuild_ancestor_cms_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_cms_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      ancestor_node_ids INTEGER[];
      tmp_node_id int;
    BEGIN
      IF node_id IS NULL THEN
        FOR tmp_node_id IN SELECT taxon_concepts.id FROM taxon_concepts
          JOIN taxonomies ON taxon_concepts.taxonomy_id = taxonomies.id
          AND taxonomies.name = 'CMS'
          WHERE parent_id IS NULL
        LOOP
          PERFORM rebuild_ancestor_cms_listing_for_node(tmp_node_id);
        END LOOP;
        RETURN;
      END IF;
      PERFORM rebuild_ancestor_cms_listing_recursively_for_node(node_id);
      -- if we're not starting from root, we need to update ancestors
      -- up till root
      ancestor_node_ids := ancestor_node_ids_for_node(node_id);
      FOREACH tmp_node_id IN ARRAY ancestor_node_ids
      LOOP
        UPDATE taxon_concepts
        SET listing  = listing || cms_aggregate_children_listing(tmp_node_id)
        WHERE id = tmp_node_id;
      END LOOP;
    END;
  $$;


--
-- Name: rebuild_ancestor_cms_listing_recursively_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_cms_listing_recursively_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      children_node_ids INTEGER[];
      tmp_node_id INT;
    BEGIN
      SELECT ARRAY_AGG_NOTNULL(id) INTO children_node_ids
      FROM taxon_concepts
      WHERE parent_id = node_id;
      -- if there are children, rebuild their aggregated listing first
      FOREACH tmp_node_id IN ARRAY children_node_ids
      LOOP
        PERFORM rebuild_ancestor_cms_listing_recursively_for_node(tmp_node_id);
      END LOOP;

      -- update this node's aggregated listing
      IF ARRAY_UPPER(children_node_ids, 1) IS NULL THEN
        UPDATE taxon_concepts
        SET listing = listing || cms_leaf_listing(node_id)
        WHERE id = node_id;
      ELSE
        UPDATE taxon_concepts
        SET listing = listing || cms_aggregate_children_listing(node_id)
        WHERE id = node_id;
      END IF;
    END;
  $$;


--
-- Name: rebuild_ancestor_eu_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_eu_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_ancestor_eu_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_ancestor_eu_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_ancestor_eu_listing() IS 'Procedure to rebuild EU ancestor listings in taxon_concepts.';


--
-- Name: rebuild_ancestor_eu_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_eu_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      ancestor_node_ids INTEGER[];
      tmp_node_id int;
    BEGIN
      IF node_id IS NULL THEN
        FOR tmp_node_id IN SELECT taxon_concepts.id FROM taxon_concepts
          JOIN taxonomies ON taxon_concepts.taxonomy_id = taxonomies.id
          AND taxonomies.name = 'CITES_EU'
          WHERE parent_id IS NULL
        LOOP
          PERFORM rebuild_ancestor_eu_listing_for_node(tmp_node_id);
        END LOOP;
        RETURN;
      END IF;
      PERFORM rebuild_ancestor_eu_listing_recursively_for_node(node_id);
      -- if we're not starting from root, we need to update ancestors
      -- up till root
      ancestor_node_ids := ancestor_node_ids_for_node(node_id);
      FOREACH tmp_node_id IN ARRAY ancestor_node_ids
      LOOP
        UPDATE taxon_concepts
        SET listing  = listing || eu_aggregate_children_listing(tmp_node_id)
        WHERE id = tmp_node_id;
      END LOOP;
    END;
  $$;


--
-- Name: rebuild_ancestor_eu_listing_recursively_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_eu_listing_recursively_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      children_node_ids INTEGER[];
      tmp_node_id INT;
    BEGIN
      SELECT ARRAY_AGG_NOTNULL(id) INTO children_node_ids
      FROM taxon_concepts
      WHERE parent_id = node_id;
      -- if there are children, rebuild their aggregated listing first
      FOREACH tmp_node_id IN ARRAY children_node_ids
      LOOP
        PERFORM rebuild_ancestor_eu_listing_recursively_for_node(tmp_node_id);
      END LOOP;

      -- update this node's aggregated listing
      IF ARRAY_UPPER(children_node_ids, 1) IS NULL THEN
        UPDATE taxon_concepts
        SET listing = listing || eu_leaf_listing(node_id)
        WHERE id = node_id;
      ELSE
        UPDATE taxon_concepts
        SET listing = listing || eu_aggregate_children_listing(node_id)
        WHERE id = node_id;
      END IF;
    END;
  $$;


--
-- Name: rebuild_ancestor_valid_tc_appdx_year_designation_mview(character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_valid_tc_appdx_year_designation_mview(designation_name character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      node_id INT;
    BEGIN
  FOR node_id IN SELECT taxon_concepts.id FROM taxon_concepts
    JOIN taxonomies ON taxon_concepts.taxonomy_id = taxonomies.id
    AND taxonomies.name = 'CITES_EU' AND name_status IN ('A', 'N', 'H')
    WHERE parent_id IS NULL
  LOOP
    PERFORM rebuild_ancestor_valid_tc_appdx_year_designation_mview_for_node(designation_name, node_id);
  END LOOP;
  RETURN;
    END;
  $$;


--
-- Name: rebuild_ancestor_valid_tc_appdx_year_designation_mview_for_node(character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_ancestor_valid_tc_appdx_year_designation_mview_for_node(designation_name character varying, node_id integer) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$
    DECLARE
      children_node_ids INTEGER[];
      tmp_node_id INT;
      mview_name VARCHAR;
      appendix VARCHAR;
      sql TEXT;
    BEGIN
      SELECT ARRAY_AGG_NOTNULL(id) INTO children_node_ids
      FROM taxon_concepts
      WHERE parent_id = node_id;
      -- if there are children, rebuild their aggregated listing first
      FOREACH tmp_node_id IN ARRAY children_node_ids
      LOOP
        PERFORM rebuild_ancestor_valid_tc_appdx_year_designation_mview_for_node(designation_name, tmp_node_id);
      END LOOP;

      IF ARRAY_UPPER(children_node_ids, 1) IS NOT NULL THEN
        IF designation_name = 'EU' THEN
          appendix := 'annex';
        ELSE
          appendix := 'appendix';
        END IF;

        mview_name := 'valid_taxon_concept_' || appendix || '_year_mview';
        -- update this node's aggregated listing
        sql := '
          WITH children_intervals AS (
            SELECT taxon_concepts.id, taxon_concepts.parent_id, taxon_concepts.full_name
            FROM taxon_concepts
            JOIN ' || mview_name || ' t
            ON t.taxon_concept_id = taxon_concepts.id
            WHERE taxon_concepts.name_status IN (''A'', ''N'', ''H'')
            AND taxon_concepts.parent_id = ' || node_id || '
            GROUP BY taxon_concepts.id, taxon_concepts.parent_id, taxon_concepts.full_name
          )
          INSERT INTO ' || mview_name || '
          (taxon_concept_id, ' || appendix || ', effective_from, effective_to)
          SELECT COALESCE(parent_id, id) AS taxon_concept_id,
          ' || appendix || ', effective_from, effective_to
          FROM children_intervals
          JOIN ' || mview_name || ' t
          ON children_intervals.id = t.taxon_concept_id OR children_intervals.parent_id = t.taxon_concept_id
          GROUP BY COALESCE(parent_id, id), ' || appendix || ', effective_from, effective_to';
        EXECUTE sql;
      END IF;
    END;
  $$;


--
-- Name: rebuild_auto_complete_taxon_concepts_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_auto_complete_taxon_concepts_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP TABLE IF EXISTS auto_complete_taxon_concepts_mview_tmp CASCADE;

    RAISE INFO 'Creating auto complete taxon concepts materialized view (tmp)';

    CREATE TABLE auto_complete_taxon_concepts_mview_tmp AS
    SELECT * FROM auto_complete_taxon_concepts_view;

    RAISE INFO 'Creating indexes on auto complete taxon concepts materialized view (tmp)';

    CREATE INDEX idx_ac_taxon_gist_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING GIST(name_for_matching gist_trgm_ops);

    -- For Species+ autocomplete (both main and higher taxa in downloads)
    CREATE INDEX idx_ac_taxon_splus_btree_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING BTREE(name_for_matching text_pattern_ops, taxonomy_is_cites_eu, type_of_match)
      WHERE show_in_species_plus_ac;

    -- For Species+ autocomplete (both main and higher taxa in downloads), GIST trigrams
    CREATE INDEX idx_ac_taxon_splus_gist_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING GIST(name_for_matching gist_trgm_ops)
      WHERE show_in_species_plus_ac;

    -- For Checklist autocomplete
    CREATE INDEX idx_ac_taxon_checklist_btree_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING BTREE(name_for_matching text_pattern_ops, type_of_match)
      WHERE taxonomy_is_cites_eu AND show_in_checklist_ac;

    -- For Checklist autocomplete, GIST trigrams
    CREATE INDEX idx_ac_taxon_checklist_gist_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING GIST(name_for_matching gist_trgm_ops) WHERE taxonomy_is_cites_eu AND show_in_checklist_ac;

    -- For Trade autocomplete
    CREATE INDEX idx_ac_taxon_trade_ac_btree_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING BTREE(name_for_matching text_pattern_ops, type_of_match, taxonomy_is_cites_eu)
      WHERE show_in_trade_ac;

    -- For Trade autocomplete, GIST trigrams
    CREATE INDEX idx_ac_taxon_trade_ac_gist_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING GIST(name_for_matching gist_trgm_ops)
      WHERE show_in_trade_ac;

    -- For Trade internal autocomplete
    CREATE INDEX idx_ac_taxon_trade_internal_btree_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING BTREE(name_for_matching text_pattern_ops, type_of_match, taxonomy_is_cites_eu)
      WHERE show_in_trade_internal_ac;

    -- For Trade internal autocomplete, GIST trigrams
    CREATE INDEX idx_ac_taxon_trade_internal_gist_tmp ON auto_complete_taxon_concepts_mview_tmp
      USING GIST(name_for_matching gist_trgm_ops)
      WHERE show_in_trade_internal_ac;

    RAISE INFO 'Swapping auto complete taxon concepts materialized view';

    DROP TABLE IF EXISTS auto_complete_taxon_concepts_mview CASCADE;

    ALTER TABLE auto_complete_taxon_concepts_mview_tmp RENAME TO auto_complete_taxon_concepts_mview;

    ALTER INDEX idx_ac_taxon_gist_tmp                 RENAME TO idx_ac_taxon_gist;
    ALTER INDEX idx_ac_taxon_splus_btree_tmp          RENAME TO idx_ac_taxon_splus_btree;
    ALTER INDEX idx_ac_taxon_splus_gist_tmp           RENAME TO idx_ac_taxon_splus_gist;
    ALTER INDEX idx_ac_taxon_checklist_btree_tmp      RENAME TO idx_ac_taxon_checklist_btree;
    ALTER INDEX idx_ac_taxon_checklist_gist_tmp       RENAME TO idx_ac_taxon_checklist_gist;
    ALTER INDEX idx_ac_taxon_trade_ac_btree_tmp       RENAME TO idx_ac_taxon_trade_ac_btree;
    ALTER INDEX idx_ac_taxon_trade_ac_gist_tmp        RENAME TO idx_ac_taxon_trade_ac_gist;
    ALTER INDEX idx_ac_taxon_trade_internal_btree_tmp RENAME TO idx_ac_taxon_trade_internal_btree;
    ALTER INDEX idx_ac_taxon_trade_internal_gist_tmp  RENAME TO idx_ac_taxon_trade_internal_gist;
  END;
  $$;


--
-- Name: FUNCTION rebuild_auto_complete_taxon_concepts_mview(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_auto_complete_taxon_concepts_mview() IS 'Procedure to rebuild taxon concept autocomplete table in the database.';


--
-- Name: rebuild_cites_accepted_flags(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_accepted_flags() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_cites_accepted_flags_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cites_accepted_flags(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cites_accepted_flags() IS 'Procedure to rebuild the cites_accepted flag in taxon_concepts.data. The meaning of this flag is as follows: "t" - CITES accepted name, "f" - not accepted, but shows in Checklist, null - not accepted, doesn''t show';


--
-- Name: rebuild_cites_accepted_flags_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_accepted_flags_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      cites_eu_id int;
      ancestor_node_id int;
    BEGIN
    SELECT id INTO cites_eu_id FROM taxonomies WHERE name = 'CITES_EU';
    -- set the cites_accepted flag to null for all taxa (so we start clear)
    UPDATE taxon_concepts SET data =
      CASE
        WHEN data IS NULL THEN ''::HSTORE
        ELSE data
      END || hstore('cites_accepted', NULL)
    WHERE taxonomy_id = cites_eu_id AND
      CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END;

    -- set the cites_accepted flag to true for all explicitly referenced taxa
    UPDATE taxon_concepts
    SET data = data || hstore('cites_accepted', 't')
    FROM (
      SELECT taxon_concepts.id
      FROM taxon_concepts
      INNER JOIN taxon_concept_references
        ON taxon_concept_references.taxon_concept_id = taxon_concepts.id
      INNER JOIN taxonomies ON taxon_concepts.taxonomy_id = taxonomies.id
        AND taxonomies.name = 'CITES_EU'
      WHERE
        taxon_concept_references.is_standard = TRUE
        AND CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END
    ) AS q
    WHERE taxon_concepts.id = q.id;

    -- set the cites_accepted flag to false for all synonyms
    UPDATE taxon_concepts
    SET data = data || hstore('cites_accepted', 'f')
    FROM (
      SELECT taxon_relationships.other_taxon_concept_id AS id
      FROM taxon_relationships
      INNER JOIN taxon_relationship_types
        ON taxon_relationship_types.id =
          taxon_relationships.taxon_relationship_type_id
      INNER JOIN taxon_concepts
        ON taxon_concepts.id = taxon_relationships.other_taxon_concept_id
      INNER JOIN taxonomies
        ON taxonomies.id = taxon_concepts.taxonomy_id
        AND taxonomies.name = 'CITES_EU'
      WHERE
        taxon_relationship_types.name = 'HAS_SYNONYM'
        AND CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END
    ) AS q
    WHERE taxon_concepts.id = q.id;

    -- set the usr_no_std_ref for exclusions
    UPDATE taxon_concepts
    SET data = data || hstore('usr_no_std_ref', 't')
    FROM (
      WITH RECURSIVE cascading_refs AS (
        SELECT h.id, h.parent_id, taxon_concept_references.excluded_taxon_concepts_ids exclusions, false AS i_am_excluded
        FROM taxon_concept_references
        INNER JOIN taxon_concepts h
          ON h.id = taxon_concept_references.taxon_concept_id
        WHERE taxon_concept_references.is_cascaded AND
        CASE WHEN node_id IS NOT NULL THEN h.id = node_id ELSE TRUE END

        UNION

        SELECT hi.id, hi.parent_id, exclusions, exclusions @> ARRAY[hi.id]
        FROM cascading_refs
        JOIN taxon_concepts hi
        ON hi.parent_id = cascading_refs.id
      )
      SELECT id, BOOL_AND(i_am_excluded) AS i_am_excluded --excluded from all parent refs
      FROM cascading_refs
      GROUP BY id
    ) AS q
    WHERE taxon_concepts.id = q.id AND i_am_excluded;

    IF node_id IS NOT NULL THEN
      WITH RECURSIVE ancestors AS (
        SELECT h.id, h.parent_id, h_ref.is_standard AS is_std_ref,
          h_ref.is_cascaded AS cascade
        FROM taxon_concepts h
        LEFT JOIN taxon_concept_references h_ref
          ON h_ref.taxon_concept_id = h.id
        WHERE h.id = node_id

        UNION

        SELECT hi.id, hi.parent_id, hi_ref.is_standard,
          hi_ref.is_cascaded
        FROM taxon_concepts hi JOIN ancestors ON hi.id = ancestors.parent_id
        LEFT JOIN taxon_concept_references hi_ref
          ON hi_ref.taxon_concept_id = hi.id
      )
      SELECT id INTO ancestor_node_id
      FROM ancestors
      WHERE is_std_ref AND cascade
      LIMIT 1;
    END IF;

    -- set the cites_accepted flag to true for all implicitly referenced taxa
    WITH RECURSIVE q AS
    (
      SELECT  h.id, h.parent_id, h.data,
        CASE
          WHEN (h.data->'usr_no_std_ref')::BOOLEAN = 't' THEN 'f'
          ELSE (h.data->'cites_accepted')::BOOLEAN
        END AS inherited_cites_accepted
      FROM taxon_concept_references
      INNER JOIN taxon_concepts h
        ON h.id = taxon_concept_references.taxon_concept_id
      WHERE taxon_concept_references.is_cascaded AND
      CASE WHEN ancestor_node_id IS NOT NULL THEN h.id = ancestor_node_id ELSE TRUE END

      UNION

      SELECT  hi.id, hi.parent_id, hi.data,
      CASE
        WHEN (hi.data->'cites_accepted')::BOOLEAN = 't' THEN 't'
        WHEN (hi.data->'usr_no_std_ref')::BOOLEAN = 't' THEN 'f'
        ELSE inherited_cites_accepted
      END
      FROM    q
      JOIN    taxon_concepts hi
      ON      hi.parent_id = q.id
    )
    UPDATE taxon_concepts
    SET data = taxon_concepts.data || hstore('cites_accepted', (q.inherited_cites_accepted)::VARCHAR)
    FROM q
    WHERE taxon_concepts.id = q.id;

    -- set the cites_accepted flag to false where it is not set
    UPDATE taxon_concepts
    SET data = taxon_concepts.data || hstore('cites_accepted', 'f')
    WHERE (taxon_concepts.data->'cites_accepted')::BOOLEAN IS NULL AND
      CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;

    END;
  $$;


--
-- Name: rebuild_cites_annotation_symbols(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_annotation_symbols() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_cites_annotation_symbols_for_node(NULL);
    PERFORM rebuild_cites_hash_annotation_symbols_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cites_annotation_symbols(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cites_annotation_symbols() IS 'Procedure to rebuild generic and specific annotation symbols to be used in the CITES index pdf.';


--
-- Name: rebuild_cites_annotation_symbols_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_annotation_symbols_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN

    WITH listing_changes_with_annotations AS (
      SELECT taxon_concept_id,
        listing_changes.id AS listing_change_id,
        annotations.id AS annotation_id
      FROM listing_changes
      INNER JOIN annotations
        ON listing_changes.annotation_id = annotations.id
      INNER JOIN change_types
        ON listing_changes.change_type_id = change_types.id
      INNER JOIN designations
        ON change_types.designation_id = designations.id AND designations.name = 'CITES'
      WHERE is_current = TRUE AND display_in_index = TRUE
      GROUP BY taxon_concept_id, listing_changes.id, annotations.id
    ), ordered_annotations AS (
      SELECT ROW_NUMBER() OVER(ORDER BY taxonomic_position) AS calculated_symbol,
        -- ignore split listings
        MAX(listing_change_id) AS listing_change_id, MAX(annotation_id) AS annotation_id
      FROM listing_changes_with_annotations listing_changes
      INNER JOIN taxon_concepts
        ON listing_changes.taxon_concept_id = taxon_concepts.id
      GROUP BY taxon_concept_id, taxonomic_position
    ), updated_annotations AS (
      UPDATE annotations
      SET symbol = ordered_annotations.calculated_symbol, parent_symbol = NULL
      FROM ordered_annotations
      WHERE ordered_annotations.annotation_id = annotations.id
    )
    UPDATE cites_listing_changes_mview
    SET ann_symbol = ordered_annotations.calculated_symbol
    FROM ordered_annotations
    WHERE ordered_annotations.listing_change_id = cites_listing_changes_mview.id;

    --clear all annotation symbols (non-hash ones)
    UPDATE taxon_concepts
    SET listing = listing - ARRAY['ann_symbol'];

    UPDATE taxon_concepts
    SET listing = COALESCE(listing, ''::HSTORE) || hstore('ann_symbol', taxon_concept_annotations.symbol)
    FROM
    (
      SELECT taxon_concept_id, MAX(ann_symbol) AS symbol
      FROM cites_listing_changes_mview
      WHERE is_current = TRUE AND display_in_index = TRUE
      GROUP BY taxon_concept_id
    ) taxon_concept_annotations
    WHERE
      taxon_concept_annotations.taxon_concept_id = taxon_concepts.id;
    END;
  $$;


--
-- Name: rebuild_cites_eu_taxon_concepts_and_ancestors_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_eu_taxon_concepts_and_ancestors_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    taxonomy taxonomies%ROWTYPE;
  BEGIN
    SELECT * INTO taxonomy FROM taxonomies WHERE name = 'CITES_EU';
    IF FOUND THEN
      PERFORM rebuild_taxonomy_tmp_taxon_concepts_mview(taxonomy);
    END IF;
  END;
  $$;


--
-- Name: rebuild_cites_hash_annotation_symbols_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_hash_annotation_symbols_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN

    UPDATE taxon_concepts
    SET listing = listing - ARRAY['hash_ann_symbol', 'hash_ann_parent_symbol']
    WHERE CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END;

    UPDATE taxon_concepts
    SET listing = COALESCE(listing, ''::HSTORE) ||
      hstore('hash_ann_symbol', taxon_concept_hash_annotations.symbol) ||
      hstore('hash_ann_parent_symbol', taxon_concept_hash_annotations.parent_symbol)
    FROM
    (
      SELECT taxon_concept_id, MAX(hash_ann_symbol) AS symbol, MAX(hash_ann_parent_symbol) AS parent_symbol
      FROM cites_listing_changes_mview
      WHERE is_current = TRUE
      GROUP BY taxon_concept_id
    ) taxon_concept_hash_annotations
    WHERE
      taxon_concept_hash_annotations.taxon_concept_id = taxon_concepts.id AND
      CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END;

    END;
  $$;


--
-- Name: rebuild_cites_listed_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_listed_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_cites_listed_status_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cites_listed_status(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cites_listed_status() IS '
  Procedure to rebuild the cites status flags in taxon_concepts.listing.
  1. cites_status
    "LISTED" - explicit/implicit cites listing,
    "DELETED" - taxa previously listed and then deleted
    "EXCLUDED" - taxonomic exceptions
  2. cites_status_original
    TRUE - cites_status is explicit (original)
    FALSE - cites_status is implicit (inherited)
  3. cites_show
    TRUE - taxon should show up in the checklist
    FALSE
';


--
-- Name: rebuild_cites_listed_status_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_listed_status_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CITES';
    IF NOT FOUND THEN
      RETURN;
    END IF;
    PERFORM rebuild_listing_status_for_designation_and_node(designation, node_id);
    PERFORM set_cites_historically_listed_flag_for_node(node_id);
    END;
  $$;


--
-- Name: rebuild_cites_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_cites_annotation_symbols_for_node(NULL);
    PERFORM rebuild_cites_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cites_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cites_listing() IS 'Procedure to rebuild CITES listing in taxon_concepts.';


--
-- Name: rebuild_cites_listing_changes_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_listing_changes_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    taxonomy taxonomies%ROWTYPE;
    designation designations%ROWTYPE;
    tmp_listing_changes_mview TEXT;
    tmp_current_listing_changes_mview TEXT;
  BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CITES';
    IF FOUND THEN
      SELECT * INTO taxonomy FROM taxonomies WHERE id = designation.taxonomy_id;
      PERFORM rebuild_designation_all_listing_changes_mview(
        taxonomy, designation, NULL
      );
      PERFORM rebuild_designation_listing_changes_mview(taxonomy, designation, NULL);
      SELECT listing_changes_mview_name('tmp', designation.name, NULL)
      INTO tmp_listing_changes_mview;
      SELECT listing_changes_mview_name('tmp_current', designation.name, NULL)
      INTO tmp_current_listing_changes_mview;
      EXECUTE 'DROP VIEW IF EXISTS ' || tmp_current_listing_changes_mview;
      EXECUTE 'CREATE VIEW ' || tmp_current_listing_changes_mview || ' AS
      SELECT * FROM ' || tmp_listing_changes_mview || '
      WHERE is_current';
    END IF;
  END;
  $$;


--
-- Name: rebuild_cites_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_cites_listed_status_for_node(node_id);
    PERFORM rebuild_cites_not_listed_status_for_node(node_id);
    PERFORM rebuild_cites_hash_annotation_symbols_for_node(node_id);
    PERFORM rebuild_explicit_cites_listing_for_node(node_id);
    PERFORM rebuild_ancestor_cites_listing_for_node(node_id);
    END;
  $$;


--
-- Name: rebuild_cites_not_listed_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_not_listed_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_cites_not_listed_status_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cites_not_listed_status(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cites_not_listed_status() IS '
  Procedure to rebuild the cites_fully_covered AND cites_not_listed flags in taxon_concepts.listing.
  1. cites_fully_covered
    TRUE - all descendants are listed,
    FALSE - some descendants were excluded or deleted from listing
  2. cites_not_listed
    NC - either this taxon or some of its descendants were excluded or deleted from listing
';


--
-- Name: rebuild_cites_not_listed_status_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_not_listed_status_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CITES';
    PERFORM rebuild_not_listed_status_for_designation_and_node(designation, node_id);
    END;
  $$;


--
-- Name: rebuild_cites_species_listing_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cites_species_listing_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN

  DROP TABLE IF EXISTS cites_species_listing_mview_tmp;

CREATE TABLE cites_species_listing_mview_tmp AS
SELECT
  taxon_concepts_mview.id AS id,
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.kingdom_id AS kingdom_id,
  taxon_concepts_mview.phylum_id AS phylum_id,
  taxon_concepts_mview.class_id AS class_id,
  taxon_concepts_mview.order_id AS order_id,
  taxon_concepts_mview.family_id AS family_id,
  taxon_concepts_mview.genus_id AS genus_id,
  taxon_concepts_mview.kingdom_name AS kingdom_name,
  taxon_concepts_mview.phylum_name AS phylum_name,
  taxon_concepts_mview.class_name AS class_name,
  taxon_concepts_mview.order_name AS order_name,
  taxon_concepts_mview.family_name AS family_name,
  taxon_concepts_mview.genus_name AS genus_name,
  taxon_concepts_mview.species_name AS species_name,
  taxon_concepts_mview.subspecies_name AS subspecies_name,
  taxon_concepts_mview.full_name AS full_name,
  taxon_concepts_mview.author_year AS author_year,
  taxon_concepts_mview.rank_name AS rank_name,
  taxon_concepts_mview.cites_listed,
  CASE
    WHEN taxon_concepts_mview.cites_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.cites_listing_original) = 0
    OR taxon_concepts_mview.cites_listing_original = 'NC'
    THEN TRUE
    ELSE FALSE
  END AS cites_nc,
  CASE
    WHEN taxon_concepts_mview.cites_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.cites_listing_original) = 0
    THEN 'NC'
    ELSE taxon_concepts_mview.cites_listing_original
  END AS cites_listing_original,
  ARRAY_TO_STRING(
    ARRAY_AGG(DISTINCT listing_changes_mview.party_iso_code),
    ','
  ) AS original_taxon_concept_party_iso_code,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      DISTINCT full_name_with_spp(
        COALESCE(inclusion_taxon_concepts_mview.rank_name, original_taxon_concepts_mview.rank_name),
        COALESCE(inclusion_taxon_concepts_mview.full_name, original_taxon_concepts_mview.full_name),
        COALESCE(inclusion_taxon_concepts_mview.name_status, original_taxon_concepts_mview.name_status)
      )
    ),
    ','
  ) AS original_taxon_concept_full_name_with_spp,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      '**' || listing_changes_mview.species_listing_name || '** '
      || CASE
        WHEN LENGTH(listing_changes_mview.auto_note_en) > 0 THEN '[' || listing_changes_mview.auto_note_en || '] '
        ELSE ''
      END
      || CASE
        WHEN LENGTH(listing_changes_mview.inherited_full_note_en) > 0 THEN strip_tags(listing_changes_mview.inherited_full_note_en)
        WHEN LENGTH(listing_changes_mview.inherited_short_note_en) > 0 THEN strip_tags(listing_changes_mview.inherited_short_note_en)
        WHEN LENGTH(listing_changes_mview.full_note_en) > 0 THEN strip_tags(listing_changes_mview.full_note_en)
        ELSE strip_tags(listing_changes_mview.short_note_en)
      END
      || CASE
          WHEN LENGTH(listing_changes_mview.nomenclature_note_en) > 0 THEN strip_tags(listing_changes_mview.nomenclature_note_en)
          ELSE ''
      END
      ORDER BY listing_changes_mview.species_listing_name
    ),
    E'\n'
  ) AS original_taxon_concept_full_note_en,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      '**' || species_listing_name || '** ' || listing_changes_mview.hash_ann_symbol || ' '
      || strip_tags(listing_changes_mview.hash_full_note_en)
      ORDER BY species_listing_name
    ),
    E'\n'
  ) AS original_taxon_concept_hash_full_note_en,
  taxon_concepts_mview.countries_ids_ary,
  ARRAY_TO_STRING(taxon_concepts_mview.all_distribution_ary_en, ',') AS all_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.all_distribution_iso_codes_ary, ',') AS all_distribution_iso_codes,
  ARRAY_TO_STRING(taxon_concepts_mview.native_distribution_ary_en, ',') AS native_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.introduced_distribution_ary_en, ',') AS introduced_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.introduced_uncertain_distribution_ary_en, ',') AS introduced_uncertain_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.reintroduced_distribution_ary_en, ',') AS reintroduced_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.extinct_distribution_ary_en, ',') AS extinct_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.extinct_uncertain_distribution_ary_en, ',') AS extinct_uncertain_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.uncertain_distribution_ary_en, ',') AS uncertain_distribution
FROM "taxon_concepts_mview"
JOIN cites_listing_changes_mview listing_changes_mview
  ON listing_changes_mview.taxon_concept_id = taxon_concepts_mview.id
  AND is_current
  AND change_type_name = 'ADDITION'
JOIN taxon_concepts_mview original_taxon_concepts_mview
  ON listing_changes_mview.original_taxon_concept_id = original_taxon_concepts_mview.id
LEFT JOIN taxon_concepts_mview inclusion_taxon_concepts_mview
  ON listing_changes_mview.inclusion_taxon_concept_id = inclusion_taxon_concepts_mview.id
WHERE "taxon_concepts_mview"."name_status" = 'A'
  AND "taxon_concepts_mview".taxonomy_is_cites_eu = TRUE
  AND "taxon_concepts_mview"."cites_show" = 't'
  AND "taxon_concepts_mview"."rank_name" IN ('SPECIES', 'SUBSPECIES', 'VARIETY')
  AND (taxon_concepts_mview.cites_listing_original != 'NC')
GROUP BY
  taxon_concepts_mview.id,
  taxon_concepts_mview.kingdom_id,
  taxon_concepts_mview.phylum_id,
  taxon_concepts_mview.class_id,
  taxon_concepts_mview.order_id,
  taxon_concepts_mview.family_id,
  taxon_concepts_mview.genus_id,
  taxon_concepts_mview.kingdom_name,
  taxon_concepts_mview.phylum_name,
  taxon_concepts_mview.class_name,
  taxon_concepts_mview.order_name,
  taxon_concepts_mview.family_name,
  taxon_concepts_mview.genus_name,
  taxon_concepts_mview.species_name,
  taxon_concepts_mview.subspecies_name,
  taxon_concepts_mview.full_name,
  taxon_concepts_mview.author_year,
  taxon_concepts_mview.rank_name,
  taxon_concepts_mview.cites_listed,
  CASE
    WHEN taxon_concepts_mview.cites_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.cites_listing_original) = 0
    OR taxon_concepts_mview.cites_listing_original = 'NC'
    THEN TRUE
    ELSE FALSE
  END,
  CASE
    WHEN taxon_concepts_mview.cites_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.cites_listing_original) = 0
    THEN 'NC' ELSE taxon_concepts_mview.cites_listing_original
  END,
  COALESCE(inclusion_taxon_concepts_mview.full_name, original_taxon_concepts_mview.full_name),
  COALESCE(inclusion_taxon_concepts_mview.spp, original_taxon_concepts_mview.spp),
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.countries_ids_ary,
  taxon_concepts_mview.all_distribution_ary_en,
  taxon_concepts_mview.all_distribution_iso_codes_ary,
  taxon_concepts_mview.native_distribution_ary_en,
  taxon_concepts_mview.introduced_distribution_ary_en,
  taxon_concepts_mview.introduced_uncertain_distribution_ary_en,
  taxon_concepts_mview.reintroduced_distribution_ary_en,
  taxon_concepts_mview.extinct_distribution_ary_en,
  taxon_concepts_mview.extinct_uncertain_distribution_ary_en,
  taxon_concepts_mview.uncertain_distribution_ary_en;

  CREATE INDEX ON cites_species_listing_mview_tmp USING GIN (countries_ids_ary); -- search by geo entity

  DROP TABLE IF EXISTS cites_species_listing_mview;
  ALTER TABLE cites_species_listing_mview_tmp RENAME TO cites_species_listing_mview;

END;
$$;


--
-- Name: rebuild_cms_listed_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_listed_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_cms_listed_status_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cms_listed_status(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cms_listed_status() IS '
  Procedure to rebuild the CMS status flags in taxon_concepts.listing.
  1. cms_status
    "LISTED" - explicit/implicit cites listing,
    "DELETED" - taxa previously listed and then deleted
    "EXCLUDED" - taxonomic exceptions
  2. cms_status_original
    TRUE - cites_status is explicit (original)
    FALSE - cites_status is implicit (inherited)
';


--
-- Name: rebuild_cms_listed_status_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_listed_status_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CMS';
    IF NOT FOUND THEN
      RETURN;
    END IF;

    PERFORM rebuild_listing_status_for_designation_and_node(designation, node_id);
    PERFORM set_cms_historically_listed_flag_for_node(node_id);
    END;
  $$;


--
-- Name: rebuild_cms_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_cms_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cms_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cms_listing() IS 'Procedure to rebuild CMS listing in taxon_concepts.';


--
-- Name: rebuild_cms_listing_changes_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_listing_changes_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    taxonomy taxonomies%ROWTYPE;
    designation designations%ROWTYPE;
    tmp_listing_changes_mview TEXT;
    tmp_current_listing_changes_mview TEXT;
  BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CMS';
    IF FOUND THEN
      SELECT * INTO taxonomy FROM taxonomies WHERE id = designation.taxonomy_id;
      PERFORM rebuild_designation_all_listing_changes_mview(
        taxonomy, designation, NULL
      );
      PERFORM rebuild_designation_listing_changes_mview(taxonomy, designation, NULL);
      SELECT listing_changes_mview_name('tmp', designation.name, NULL)
      INTO tmp_listing_changes_mview;
      SELECT listing_changes_mview_name('tmp_current', designation.name, NULL)
      INTO tmp_current_listing_changes_mview;
      EXECUTE 'DROP VIEW IF EXISTS ' || tmp_current_listing_changes_mview;
      EXECUTE 'CREATE VIEW ' || tmp_current_listing_changes_mview || ' AS
      SELECT * FROM ' || tmp_listing_changes_mview || '
      WHERE is_current';
    END IF;
  END;
  $$;


--
-- Name: rebuild_cms_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_cms_listed_status_for_node(node_id);
    PERFORM rebuild_cms_not_listed_status_for_node(node_id);
    PERFORM rebuild_explicit_cms_listing_for_node(node_id);
    PERFORM rebuild_ancestor_cms_listing_for_node(node_id);
    END;
  $$;


--
-- Name: rebuild_cms_not_listed_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_not_listed_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_cms_not_listed_status_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_cms_not_listed_status(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_cms_not_listed_status() IS '
  Procedure to rebuild the cms_fully_covered AND cms_not_listed flags in taxon_concepts.listing.
  1. cms_fully_covered
    TRUE - all descendants are listed,
    FALSE - some descendants were excluded or deleted from listing
  2. cms_not_listed
    NC - either this taxon or some of its descendants were excluded or deleted from listing
';


--
-- Name: rebuild_cms_not_listed_status_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_not_listed_status_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CMS';
    IF NOT FOUND THEN
      RETURN;
    END IF;
    PERFORM rebuild_not_listed_status_for_designation_and_node(designation, node_id);
    END;
  $$;


--
-- Name: rebuild_cms_species_listing_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_species_listing_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN

  DROP TABLE IF EXISTS cms_species_listing_mview_tmp;

CREATE TABLE cms_species_listing_mview_tmp AS
SELECT
  taxon_concepts_mview.id AS id,
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.kingdom_id AS kingdom_id,
  taxon_concepts_mview.phylum_id AS phylum_id,
  taxon_concepts_mview.class_id AS class_id,
  taxon_concepts_mview.order_id AS order_id,
  taxon_concepts_mview.family_id AS family_id,
  taxon_concepts_mview.genus_id AS genus_id,
  taxon_concepts_mview.phylum_name AS phylum_name,
  taxon_concepts_mview.class_name AS class_name,
  taxon_concepts_mview.order_name AS order_name,
  taxon_concepts_mview.family_name AS family_name,
  taxon_concepts_mview.genus_name AS genus_name,
  taxon_concepts_mview.full_name AS full_name,
  taxon_concepts_mview.author_year AS author_year,
  taxon_concepts_mview.rank_name AS rank_name,
  'CMS' AS agreement,
  taxon_concepts_mview.cms_listed,
  taxon_concepts_mview.cms_listing_original AS cms_listing_original,
  ARRAY_TO_STRING(
    ARRAY_AGG(DISTINCT full_name_with_spp(original_taxon_concepts_mview.rank_name, original_taxon_concepts_mview.full_name, original_taxon_concepts_mview.name_status)),
    ','
  ) AS original_taxon_concept_full_name_with_spp,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      '**' || listing_changes_mview.species_listing_name || '** '
      || to_char(listing_changes_mview.effective_at, 'DD/MM/YYYY')
      ORDER BY listing_changes_mview.species_listing_name
    ),
    E'\n'
  ) AS original_taxon_concept_effective_at,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      '**' || listing_changes_mview.species_listing_name || '** '
      || CASE
      WHEN LENGTH(listing_changes_mview.auto_note_en) > 0 THEN '[' || listing_changes_mview.auto_note_en || '] '
      ELSE ''
      END
      || CASE
      WHEN LENGTH(listing_changes_mview.full_note_en) > 0 THEN strip_tags(listing_changes_mview.full_note_en)
      ELSE strip_tags(listing_changes_mview.short_note_en)
      END
      || CASE
          WHEN LENGTH(listing_changes_mview.nomenclature_note_en) > 0 THEN strip_tags(listing_changes_mview.nomenclature_note_en)
          ELSE ''
      END
      ORDER BY listing_changes_mview.species_listing_name
    ),
    E'\n'
  ) AS original_taxon_concept_full_note_en,
  taxon_concepts_mview.countries_ids_ary,
  ARRAY_TO_STRING(taxon_concepts_mview.all_distribution_ary_en, ',') AS all_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.all_distribution_iso_codes_ary, ',') AS all_distribution_iso_codes,
  ARRAY_TO_STRING(taxon_concepts_mview.native_distribution_ary_en, ',') AS native_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.introduced_distribution_ary_en, ',') AS introduced_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.introduced_uncertain_distribution_ary_en, ',') AS introduced_uncertain_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.reintroduced_distribution_ary_en, ',') AS reintroduced_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.extinct_distribution_ary_en, ',') AS extinct_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.extinct_uncertain_distribution_ary_en, ',') AS extinct_uncertain_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.uncertain_distribution_ary_en, ',') AS uncertain_distribution
FROM "taxon_concepts_mview"
JOIN cms_listing_changes_mview listing_changes_mview
   ON listing_changes_mview.taxon_concept_id = taxon_concepts_mview.id
   AND is_current
   AND change_type_name = 'ADDITION'
JOIN taxon_concepts_mview original_taxon_concepts_mview
   ON listing_changes_mview.original_taxon_concept_id = original_taxon_concepts_mview.id
LEFT JOIN taxon_concepts_mview inclusion_taxon_concepts_mview
   ON listing_changes_mview.inclusion_taxon_concept_id = inclusion_taxon_concepts_mview.id
WHERE "taxon_concepts_mview"."name_status" = 'A'
   AND "taxon_concepts_mview"."taxonomy_is_cites_eu" = FALSE
   AND "taxon_concepts_mview"."cms_show" = 't'
   AND "taxon_concepts_mview"."rank_name" IN ('SPECIES', 'SUBSPECIES', 'VARIETY')
   AND (taxon_concepts_mview.cms_listing_original != 'NC')
GROUP BY
  taxon_concepts_mview.id,
  taxon_concepts_mview.kingdom_id,
  taxon_concepts_mview.phylum_id,
  taxon_concepts_mview.class_id,
  taxon_concepts_mview.order_id,
  taxon_concepts_mview.family_id,
  taxon_concepts_mview.genus_id,
  taxon_concepts_mview.phylum_name,
  taxon_concepts_mview.class_name,
  taxon_concepts_mview.order_name,
  taxon_concepts_mview.family_name,
  taxon_concepts_mview.genus_name,
  taxon_concepts_mview.full_name,
  taxon_concepts_mview.author_year,
  taxon_concepts_mview.rank_name,
  taxon_concepts_mview.cms_listed,
  taxon_concepts_mview.cms_listing_original,
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.countries_ids_ary,
  taxon_concepts_mview.all_distribution_ary_en,
  taxon_concepts_mview.all_distribution_iso_codes_ary,
  taxon_concepts_mview.native_distribution_ary_en,
  taxon_concepts_mview.introduced_distribution_ary_en,
  taxon_concepts_mview.introduced_uncertain_distribution_ary_en,
  taxon_concepts_mview.reintroduced_distribution_ary_en,
  taxon_concepts_mview.extinct_distribution_ary_en,
  taxon_concepts_mview.extinct_uncertain_distribution_ary_en,
  taxon_concepts_mview.uncertain_distribution_ary_en

UNION

SELECT
  taxon_concepts_mview.id AS id,
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.kingdom_id AS kingdom_id,
  taxon_concepts_mview.phylum_id AS phylum_id,
  taxon_concepts_mview.class_id AS class_id,
  taxon_concepts_mview.order_id AS order_id,
  taxon_concepts_mview.family_id AS family_id,
  taxon_concepts_mview.genus_id,
  taxon_concepts_mview.phylum_name AS phylum_name,
  taxon_concepts_mview.class_name AS class_name,
  taxon_concepts_mview.order_name AS order_name,
  taxon_concepts_mview.family_name AS family_name,
  taxon_concepts_mview.genus_name AS genus_name,
  taxon_concepts_mview.full_name AS full_name,
  taxon_concepts_mview.author_year AS author_year,
  taxon_concepts_mview.rank_name AS rank_name,
  instruments.name AS agreement,
  NULL,
  '',
  '',
  to_char(taxon_instruments.effective_from, 'DD/MM/YYYY') AS effective_at,
  '',
  '{}'::INT[],
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL
 FROM taxon_instruments
 JOIN taxon_concepts_mview
   ON taxon_instruments.taxon_concept_id = taxon_concepts_mview.id
 JOIN instruments
   ON taxon_instruments.instrument_id = instruments.id;

  CREATE INDEX ON cms_species_listing_mview_tmp USING GIN (countries_ids_ary); -- search by geo entity

  DROP TABLE IF EXISTS cms_species_listing_mview;
  ALTER TABLE cms_species_listing_mview_tmp RENAME TO cms_species_listing_mview;

END;
$$;


--
-- Name: rebuild_cms_taxon_concepts_and_ancestors_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_cms_taxon_concepts_and_ancestors_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    taxonomy taxonomies%ROWTYPE;
  BEGIN
    SELECT * INTO taxonomy FROM taxonomies WHERE name = 'CMS';
    IF FOUND THEN
      PERFORM rebuild_taxonomy_tmp_taxon_concepts_mview(taxonomy);
    END IF;
  END;
  $$;


--
-- Name: rebuild_descendant_cites_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_cites_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_descendant_cites_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_descendant_cites_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_descendant_cites_listing() IS 'Procedure to rebuild CITES descendant listings in taxon_concepts.';


--
-- Name: rebuild_descendant_cites_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_cites_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CITES';
    PERFORM rebuild_descendant_listing_for_designation_and_node(designation, node_id);
    END;
  $$;


--
-- Name: rebuild_descendant_cms_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_cms_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_descendant_cms_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_descendant_cms_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_descendant_cms_listing() IS 'Procedure to rebuild CMS descendant listings in taxon_concepts.';


--
-- Name: rebuild_descendant_cms_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_cms_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'CMS';
    PERFORM rebuild_descendant_listing_for_designation_and_node(designation, node_id);
    END;
  $$;


--
-- Name: rebuild_descendant_eu_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_eu_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_descendant_eu_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_descendant_eu_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_descendant_eu_listing() IS 'Procedure to rebuild EU descendant listings in taxon_concepts.';


--
-- Name: rebuild_descendant_eu_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_eu_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'EU';
    PERFORM rebuild_descendant_listing_for_designation_and_node(designation, node_id);
    END;
  $$;


--
-- Name: designations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.designations (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    taxonomy_id integer DEFAULT 1 NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: rebuild_descendant_listing_for_designation_and_node(public.designations, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_descendant_listing_for_designation_and_node(designation public.designations, node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      ancestor_node_id integer;
      fully_covered_flag varchar;
      not_listed_flag varchar;
      status_original_flag varchar;
      status_flag varchar;
      listing_original_flag varchar;
      listing_flag varchar;
      level_of_listing_flag varchar;
    BEGIN

    fully_covered_flag := LOWER(designation.name) || '_fully_covered';
    not_listed_flag := LOWER(designation.name) || '_not_listed';
    status_original_flag := LOWER(designation.name) || '_status_original';
    status_flag := LOWER(designation.name) || '_status';
    listing_original_flag := LOWER(designation.name) || '_listing_original';
    listing_flag := LOWER(designation.name) || '_listing';
    level_of_listing_flag := LOWER(designation.name) || '_level_of_listing';

    IF node_id IS NOT NULL THEN
      WITH RECURSIVE ancestors AS (
        SELECT h.id, h.parent_id, h.listing
        FROM taxon_concepts h WHERE id = node_id

        UNION

        SELECT hi.id, hi.parent_id, hi.listing
        FROM taxon_concepts hi JOIN ancestors ON hi.id = ancestors.parent_id
      )
      SELECT id INTO ancestor_node_id
      FROM ancestors
      WHERE (listing->status_original_flag)::BOOLEAN = TRUE
      LIMIT 1;

      IF FOUND THEN
        node_id := ancestor_node_id;
      END IF;
    END IF;

    WITH RECURSIVE q AS (
      SELECT h.id, parent_id,
      hstore(listing_flag,
        CASE
          WHEN listing->status_flag = 'LISTED'
          THEN listing->listing_original_flag
          WHEN listing->not_listed_flag = 'NC'
          THEN listing->not_listed_flag
          ELSE NULL
        END
      )  ||
      slice(h.listing, ARRAY[listing_original_flag, fully_covered_flag,'hash_ann_symbol', 'ann_symbol']) ||
      CASE
        WHEN designation.name = 'CITES' THEN slice(h.listing, ARRAY['cites_I', 'cites_II', 'cites_III'])
        WHEN designation.name = 'EU' THEN slice(h.listing, ARRAY['eu_A', 'eu_B', 'eu_C', 'eu_D'])
        WHEN designation.name = 'CMS' THEN slice(h.listing, ARRAY['cms_I', 'cms_II'])
        ELSE ''::HSTORE
      END
      AS inherited_listing
      FROM taxon_concepts h
      JOIN taxonomies ON h.taxonomy_id = taxonomies.id
      AND taxonomies.name = CASE WHEN designation.name = 'CMS' THEN 'CMS' ELSE 'CITES_EU' END
      WHERE CASE WHEN node_id IS NOT NULL THEN h.id = node_id ELSE h.parent_id IS NULL END

      UNION

      SELECT hi.id, hi.parent_id,
      CASE
      WHEN
        (hi.listing->status_original_flag)::BOOLEAN
      THEN
        hstore(listing_flag, hi.listing->listing_original_flag) ||
        slice(hi.listing, ARRAY[listing_original_flag, fully_covered_flag,'hash_ann_symbol', 'ann_symbol']) ||
        CASE
          WHEN designation.name = 'CITES' THEN slice(hi.listing, ARRAY['cites_I', 'cites_II', 'cites_III'])
          WHEN designation.name = 'EU' THEN slice(hi.listing, ARRAY['eu_A', 'eu_B', 'eu_C', 'eu_D'])
          WHEN designation.name = 'CMS' 
          THEN HSTORE('cms_I', COALESCE(hi.listing->'cms_I', inherited_listing->'cms_I'))
          || HSTORE('cms_II', COALESCE(hi.listing->'cms_II', inherited_listing->'cms_II'))
          ELSE ''::HSTORE
        END
      ELSE
        inherited_listing
      END
      FROM q
      JOIN taxon_concepts hi
      ON hi.parent_id = q.id
    )
    UPDATE taxon_concepts
    SET
    listing = listing ||
    CASE
    WHEN listing->status_flag = 'EXCLUDED' OR listing->status_flag = 'DELETED'
    THEN q.inherited_listing - ARRAY[not_listed_flag]
    ELSE q.inherited_listing
    END
    FROM q
    WHERE taxon_concepts.id = q.id;
    END;
  $$;


--
-- Name: taxonomies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxonomies (
    id integer NOT NULL,
    name character varying(255) DEFAULT 'DEAFAULT TAXONOMY'::character varying NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: rebuild_designation_all_listing_changes_mview(public.taxonomies, public.designations, integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_designation_all_listing_changes_mview(taxonomy public.taxonomies, designation public.designations, events_ids integer[]) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    all_lc_table_name TEXT;
    tmp_lc_table_name TEXT;
    tc_table_name TEXT;
    sql TEXT;
  BEGIN
    SELECT listing_changes_mview_name('all', designation.name, events_ids)
    INTO all_lc_table_name;
    SELECT listing_changes_mview_name('tmp', designation.name, events_ids)
    INTO tmp_lc_table_name;

    SELECT LOWER(taxonomy.name) || '_taxon_concepts_and_ancestors_view' INTO tc_table_name;

    EXECUTE 'DROP TABLE IF EXISTS ' || tmp_lc_table_name || ' CASCADE';

    sql := 'CREATE TEMP TABLE ' || tmp_lc_table_name || ' AS
    -- affected_taxon_concept -- is a taxon concept that is affected by this listing change,
    -- even though it might not have an explicit connection to it
    -- (i.e. it''s an ancestor''s listing change)
    WITH listing_changes_with_exceptions AS (
      -- the purpose of this CTE is to aggregate excluded taxon concept ids
      SELECT
        listing_changes.id,
        change_types.designation_id,
        change_types.name AS change_type_name,
        listing_changes.taxon_concept_id,
        listing_changes.species_listing_id,
        listing_changes.change_type_id,
        listing_changes.inclusion_taxon_concept_id,
        listing_changes.event_id,
        listing_changes.effective_at::DATE,
        listing_changes.is_current,
        ARRAY_AGG_NOTNULL(taxonomic_exceptions.taxon_concept_id) AS excluded_taxon_concept_ids
      FROM listing_changes
      LEFT JOIN listing_changes taxonomic_exceptions
      ON listing_changes.id = taxonomic_exceptions.parent_id
      AND listing_changes.taxon_concept_id != taxonomic_exceptions.taxon_concept_id
      JOIN change_types ON change_types.id = listing_changes.change_type_id
      AND change_types.designation_id = ' || designation.id
      || CASE
      WHEN events_ids IS NOT NULL AND ARRAY_UPPER(events_ids, 1) IS NOT NULL
      THEN ' WHERE listing_changes.event_id = ANY (''{' || ARRAY_TO_STRING(events_ids, ', ') || '}''::INT[])'
      ELSE ''
      END ||
      '
      GROUP BY
        listing_changes.id,
        change_types.designation_id,
        change_types.name,
        listing_changes.taxon_concept_id,
        listing_changes.species_listing_id,
        listing_changes.change_type_id,
        listing_changes.inclusion_taxon_concept_id,
        listing_changes.event_id,
        listing_changes.effective_at::DATE,
        listing_changes.is_current
    )
    -- the purpose of this CTE is to aggregate listed and excluded populations
    SELECT lc.id,
      lc.designation_id,
      lc.change_type_name,
      lc.taxon_concept_id,
      lc.species_listing_id,
      lc.change_type_id,
      lc.inclusion_taxon_concept_id,
      lc.event_id,
      lc.effective_at,
      lc.is_current,
      lc.excluded_taxon_concept_ids,
      party_distribution.geo_entity_id AS party_id,
      ARRAY_AGG_NOTNULL(listing_distributions.geo_entity_id) AS listed_geo_entities_ids,
      ARRAY_AGG_NOTNULL(excluded_distributions.geo_entity_id) AS excluded_geo_entities_ids
    FROM listing_changes_with_exceptions lc
    LEFT JOIN listing_distributions
    ON lc.id = listing_distributions.listing_change_id AND NOT listing_distributions.is_party
    LEFT JOIN listing_distributions party_distribution
    ON lc.id = party_distribution.listing_change_id AND party_distribution.is_party
    LEFT JOIN listing_changes population_exceptions
    ON lc.id = population_exceptions.parent_id
    AND lc.taxon_concept_id = population_exceptions.taxon_concept_id
    LEFT JOIN listing_distributions excluded_distributions
    ON population_exceptions.id = excluded_distributions.listing_change_id AND NOT excluded_distributions.is_party
    GROUP BY lc.id,
      lc.designation_id,
      lc.change_type_name,
      lc.taxon_concept_id,
      lc.species_listing_id,
      lc.change_type_id,
      lc.inclusion_taxon_concept_id,
      lc.event_id,
      lc.effective_at,
      lc.is_current,
      party_distribution.geo_entity_id,
      lc.excluded_taxon_concept_ids';

    EXECUTE sql;

    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (taxon_concept_id)';
    -- for the current listing calculation
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (taxon_concept_id, is_current, change_type_name, inclusion_taxon_concept_id)';

    EXECUTE 'DROP TABLE IF EXISTS ' || all_lc_table_name || ' CASCADE';

    sql := 'CREATE TEMP TABLE ' || all_lc_table_name || ' AS
    SELECT
      lc.*,
      tc.taxon_concept_id AS affected_taxon_concept_id,
      tc.tree_distance,
      -- the following ROW_NUMBER call will assign chronological order to listing changes
      -- in scope of the affected taxon concept and a particular designation
      ROW_NUMBER() OVER (
          PARTITION BY tc.taxon_concept_id, designation_id
          ORDER BY effective_at,
          CASE
            WHEN change_type_name = ''DELETION'' THEN 0
            WHEN change_type_name = ''RESERVATION_WITHDRAWAL'' THEN 1
            WHEN change_type_name = ''ADDITION'' THEN 2
            WHEN change_type_name = ''RESERVATION'' THEN 3
            WHEN change_type_name = ''EXCEPTION'' THEN 4
          END,
          tree_distance
      )::INT AS timeline_position
    FROM ' || tmp_lc_table_name || ' lc
    JOIN ' || tc_table_name || ' tc
    ON lc.taxon_concept_id = tc.ancestor_taxon_concept_id';

    EXECUTE sql;

    EXECUTE 'CREATE INDEX ON ' || all_lc_table_name || ' (designation_id, timeline_position, affected_taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || all_lc_table_name || ' (affected_taxon_concept_id, inclusion_taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || all_lc_table_name || ' (id, affected_taxon_concept_id)';

    -- make the tree distance reflect distance from inclusion (Rhinopittecus roxellana)
    sql := 'UPDATE ' || all_lc_table_name
    || ' SET tree_distance = tc.tree_distance
    FROM ' || all_lc_table_name || ' alc
    JOIN ' || tc_table_name || ' tc
    ON alc.inclusion_taxon_concept_id = tc.ancestor_taxon_concept_id
    AND alc.affected_taxon_concept_id = tc.taxon_concept_id
    WHERE alc.id = ' || all_lc_table_name || '.id
    AND alc.affected_taxon_concept_id = ' || all_lc_table_name || '.affected_taxon_concept_id';

    EXECUTE sql;

  END;
  $$;


--
-- Name: FUNCTION rebuild_designation_all_listing_changes_mview(taxonomy public.taxonomies, designation public.designations, events_ids integer[]); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_designation_all_listing_changes_mview(taxonomy public.taxonomies, designation public.designations, events_ids integer[]) IS 'Procedure to create a helper table with all listing changes
  + their included / excluded populations
  + tree distance between affected taxon concept and the taxon concept this listing change applies to.';


--
-- Name: rebuild_designation_listing_changes_mview(public.taxonomies, public.designations, integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_designation_listing_changes_mview(taxonomy public.taxonomies, designation public.designations, events_ids integer[]) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    all_lc_table_name TEXT;
    tmp_lc_table_name TEXT;
    raw_lc_table_name TEXT;
    lc_table_name TEXT;
    master_lc_table_name TEXT;
    sql TEXT;
    addition_id INT;
    deletion_id INT;
  BEGIN
    SELECT listing_changes_mview_name('all', designation.name, events_ids)
    INTO all_lc_table_name;
    SELECT listing_changes_mview_name('tmp', designation.name, events_ids)
    INTO raw_lc_table_name;
    SELECT listing_changes_mview_name('tmp_cascaded', designation.name, events_ids)
    INTO tmp_lc_table_name;
    SELECT listing_changes_mview_name('child', designation.name, events_ids)
    INTO lc_table_name;
    SELECT listing_changes_mview_name(NULL, designation.name, events_ids)
    INTO master_lc_table_name;

    RAISE INFO 'Creating %', tmp_lc_table_name;

    SELECT id INTO deletion_id FROM change_types WHERE name = 'DELETION' AND designation_id = designation.id;
    SELECT id INTO addition_id FROM change_types WHERE name = 'ADDITION' AND designation_id = designation.id;

    IF deletion_id IS NULL THEN
      RAISE EXCEPTION 'Could not find change_type of type DELETION';
    END IF;

    IF addition_id IS NULL THEN
      RAISE EXCEPTION 'Could not find change_type of type ADDITION';
    END IF;

    sql := 'CREATE TABLE ' || tmp_lc_table_name || ' AS
    WITH applicable_listing_changes AS (
        SELECT affected_taxon_concept_id,'
        || designation.name || '_applicable_listing_changes_for_node(''' ||
          all_lc_table_name || ''', affected_taxon_concept_id
        ) AS listing_change_id
        FROM ' || all_lc_table_name
        || ' GROUP BY affected_taxon_concept_id
    )
    SELECT
    applicable_listing_changes.affected_taxon_concept_id AS taxon_concept_id,
    listing_changes.id AS id,
    listing_changes.taxon_concept_id AS original_taxon_concept_id,
    listing_changes.event_id,
    listing_changes.effective_at,
    listing_changes.species_listing_id,
    species_listings.abbreviation::VARCHAR(255) AS species_listing_name,
    listing_changes.change_type_id,
    change_types.name::VARCHAR(255) AS change_type_name,
    change_types.designation_id AS designation_id,
    designations.name::VARCHAR(255) AS designation_name,
    listing_changes.parent_id,
    listing_changes.nomenclature_note_en::text,
    listing_changes.nomenclature_note_fr::text,
    listing_changes.nomenclature_note_es::text,
    tmp_lc.party_id,
    geo_entities.iso_code2::VARCHAR(255) AS party_iso_code,
    geo_entities.name_en::VARCHAR(255) AS party_full_name_en,
    geo_entities.name_es::VARCHAR(255) AS party_full_name_es,
    geo_entities.name_fr::VARCHAR(255) AS party_full_name_fr,
    geo_entity_types.name AS geo_entity_type,
    annotations.symbol::VARCHAR(255) AS ann_symbol,
    annotations.full_note_en,
    annotations.full_note_es,
    annotations.full_note_fr,
    annotations.short_note_en,
    annotations.short_note_es,
    annotations.short_note_fr,
    annotations.display_in_index,
    annotations.display_in_footnote,
    hash_annotations.symbol::VARCHAR(255) AS hash_ann_symbol,
    hash_annotations.parent_symbol::VARCHAR(255) AS hash_ann_parent_symbol,
    hash_annotations.full_note_en AS hash_full_note_en,
    hash_annotations.full_note_es AS hash_full_note_es,
    hash_annotations.full_note_fr AS hash_full_note_fr,
    listing_changes.inclusion_taxon_concept_id,
    NULL::TEXT AS inherited_short_note_en, -- this column is populated later
    NULL::TEXT AS inherited_full_note_en, -- this column is populated later
    NULL::TEXT AS inherited_short_note_es, -- this column is populated later
    NULL::TEXT AS inherited_full_note_es, -- this column is populated later
    NULL::TEXT AS inherited_short_note_fr, -- this column is populated later
    NULL::TEXT AS inherited_full_note_fr, -- this column is populated later
    CASE
    WHEN listing_changes.inclusion_taxon_concept_id IS NOT NULL
    THEN ancestor_listing_auto_note_en(
      inclusion_taxon_concepts, listing_changes
    )
    WHEN applicable_listing_changes.affected_taxon_concept_id != listing_changes.taxon_concept_id
    THEN ancestor_listing_auto_note_en(
      original_taxon_concepts, listing_changes
    )
    ELSE NULL
    END AS auto_note_en,
    CASE
    WHEN listing_changes.inclusion_taxon_concept_id IS NOT NULL
    THEN ancestor_listing_auto_note_es(
      inclusion_taxon_concepts, listing_changes
    )
    WHEN applicable_listing_changes.affected_taxon_concept_id != listing_changes.taxon_concept_id
    THEN ancestor_listing_auto_note_es(
      original_taxon_concepts, listing_changes
    )
    ELSE NULL
    END AS auto_note_es,
    CASE
    WHEN listing_changes.inclusion_taxon_concept_id IS NOT NULL
    THEN ancestor_listing_auto_note_fr(
      inclusion_taxon_concepts, listing_changes
    )
    WHEN applicable_listing_changes.affected_taxon_concept_id != listing_changes.taxon_concept_id
    THEN ancestor_listing_auto_note_fr(
      original_taxon_concepts, listing_changes
    )
    ELSE NULL
    END AS auto_note_fr,
    listing_changes.is_current,
    listing_changes.explicit_change,
    --populations.countries_ids_ary,
    listing_changes.updated_at,
    CASE
    WHEN change_types.name != ''EXCEPTION'' AND listing_changes.explicit_change
    THEN TRUE
    ELSE FALSE
    END AS show_in_history,
    CASE
    WHEN change_types.name != ''EXCEPTION'' AND listing_changes.explicit_change
    THEN TRUE
    ELSE FALSE
    END AS show_in_downloads,
    CASE
    WHEN change_types.name != ''EXCEPTION''
    THEN TRUE
    ELSE FALSE
    END AS show_in_timeline,
    tmp_lc.listed_geo_entities_ids,
    tmp_lc.excluded_geo_entities_ids,
    tmp_lc.excluded_taxon_concept_ids,
    false as dirty,
    null::timestamp with time zone as expiry
    FROM
    applicable_listing_changes
    JOIN listing_changes ON applicable_listing_changes.listing_change_id  = listing_changes.id
    JOIN ' || raw_lc_table_name || ' tmp_lc
    ON applicable_listing_changes.listing_change_id  = tmp_lc.id
    JOIN taxon_concepts original_taxon_concepts
    ON original_taxon_concepts.id = listing_changes.taxon_concept_id
    LEFT JOIN taxon_concepts inclusion_taxon_concepts
    ON inclusion_taxon_concepts.id = listing_changes.inclusion_taxon_concept_id
    INNER JOIN change_types
    ON listing_changes.change_type_id = change_types.id
    INNER JOIN designations
    ON change_types.designation_id = designations.id
    LEFT JOIN species_listings
    ON listing_changes.species_listing_id = species_listings.id
    LEFT JOIN geo_entities ON
    geo_entities.id = tmp_lc.party_id
    LEFT JOIN geo_entity_types ON
    geo_entity_types.id = geo_entities.geo_entity_type_id
    LEFT JOIN annotations ON
    annotations.id = listing_changes.annotation_id
    LEFT JOIN annotations hash_annotations ON
    hash_annotations.id = listing_changes.hash_annotation_id
    ORDER BY taxon_concept_id, listing_changes.effective_at,
    CASE
    WHEN change_types.name = ''ADDITION'' THEN 0
    WHEN change_types.name = ''RESERVATION'' THEN 1
    WHEN change_types.name = ''RESERVATION_WITHDRAWAL'' THEN 2
    WHEN change_types.name = ''DELETION'' THEN 3
    END';

    EXECUTE 'DROP TABLE IF EXISTS ' || tmp_lc_table_name || ' CASCADE';

    EXECUTE sql;

    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (id, taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (inclusion_taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at)';

    -- now for those taxon concepts that only have inherited legislation,
    -- ignore them in downloads
    sql := 'WITH taxon_concepts_with_inherited_legislation_only AS (
      SELECT taxon_concept_id
      FROM ' || tmp_lc_table_name
      || ' GROUP BY taxon_concept_id
      HAVING EVERY(original_taxon_concept_id != taxon_concept_id)
    )
    UPDATE '|| tmp_lc_table_name || ' listing_changes_mview
    SET show_in_downloads = FALSE
    FROM taxon_concepts_with_inherited_legislation_only
    WHERE taxon_concepts_with_inherited_legislation_only.taxon_concept_id = listing_changes_mview.taxon_concept_id';

    EXECUTE sql;

    -- find inherited listing changes superceded by own listing changes
    -- mark them as not current in context of the child and add fake deletion records
    -- so that those inherited events are terminated properly on the timelines
    sql := 'WITH next_lc AS (
      SELECT taxon_concept_id, original_taxon_concept_id, species_listing_id, effective_at
      FROM ' || tmp_lc_table_name
      || ' -- note to self: removed the is_current filter here to also handle cases
      -- where an appendix changed in the past, e.g. Amazona auropalliata
      WHERE change_type_id = ' || addition_id
    || '), prev_lc AS (
      SELECT id,
      listing_changes_mview.original_taxon_concept_id,
      listing_changes_mview.taxon_concept_id,
      next_lc.effective_at,
      listing_changes_mview.species_listing_id,
      species_listing_name,
      designation_id, designation_name,
      party_id, party_iso_code,
      listing_changes_mview.species_listing_id != next_lc.species_listing_id AS appendix_change
      FROM next_lc
      JOIN ' || tmp_lc_table_name || ' listing_changes_mview
      ON listing_changes_mview.taxon_concept_id = next_lc.taxon_concept_id
      AND change_type_id = ' || addition_id
      || ' AND listing_changes_mview.effective_at < next_lc.effective_at
      AND (
        (
          -- own listing change preceded by inherited listing change
          next_lc.original_taxon_concept_id = next_lc.taxon_concept_id
          AND listing_changes_mview.original_taxon_concept_id != listing_changes_mview.taxon_concept_id
        ) OR (
          -- own listing change preceded by own listing change if it is a not current inclusion
          next_lc.original_taxon_concept_id = next_lc.taxon_concept_id
          AND listing_changes_mview.original_taxon_concept_id = listing_changes_mview.taxon_concept_id
          AND listing_changes_mview.inclusion_taxon_concept_id IS NOT NULL
          AND NOT listing_changes_mview.is_current
        ) OR (
          -- inherited listing change preceded by inherited listing change
          next_lc.original_taxon_concept_id != next_lc.taxon_concept_id
          AND listing_changes_mview.original_taxon_concept_id != listing_changes_mview.taxon_concept_id
        ) OR (
          -- inherited listing change preceded by own listing change if it is a not current inclusion
          -- in the same taxon concept as the current listing change
          next_lc.original_taxon_concept_id != next_lc.taxon_concept_id
          AND listing_changes_mview.original_taxon_concept_id = listing_changes_mview.taxon_concept_id
          AND listing_changes_mview.inclusion_taxon_concept_id IS NOT NULL
          AND (
            listing_changes_mview.inclusion_taxon_concept_id = next_lc.original_taxon_concept_id
            OR NOT listing_changes_mview.is_current
          )
        )
      )
    ), fake_deletions AS (
      -- note: this inserts records without an id
      -- this is ok for the timelines, and those records are not used elsewhere
      -- note to self: ids in this view are not unique anyway, since any id
      -- from listing changes can occur multiple times
      INSERT INTO ' || tmp_lc_table_name || ' (
        original_taxon_concept_id, taxon_concept_id,
        effective_at,
        species_listing_id, species_listing_name,
        change_type_id, change_type_name,
        designation_id, designation_name,
        party_id, party_iso_code,
        is_current, explicit_change,
        show_in_timeline, show_in_downloads, show_in_history
      )
      SELECT
      original_taxon_concept_id, taxon_concept_id,
      MIN(effective_at) AS effective_at,
      species_listing_id, species_listing_name, '
      || deletion_id ||', ''DELETION'',
      prev_lc.designation_id, designation_name,
      party_id, party_iso_code,
      TRUE AS is_current, FALSE AS explicit_change,
      TRUE AS show_in_timeline, FALSE AS show_in_downloads, FALSE AS show_in_history
      FROM prev_lc
      WHERE appendix_change
      GROUP BY original_taxon_concept_id, taxon_concept_id,
      species_listing_id, species_listing_name,
      prev_lc.designation_id, designation_name, party_id, party_iso_code
      RETURNING *
    )
    UPDATE ' || tmp_lc_table_name || ' SET is_current = FALSE
    FROM prev_lc terminated_lc
    WHERE terminated_lc.id = ' || tmp_lc_table_name || '.id
    AND terminated_lc.taxon_concept_id = ' || tmp_lc_table_name || '.taxon_concept_id';

    IF designation.name != 'CMS' THEN
      EXECUTE sql;
    END IF;

    -- current inclusions superceded by:
    -- deletions of higher taxa or self
    -- Notomys aquilo, Caracara lutosa, Sceloglaux albifacies
    -- other additions, including appendix transitions
    -- Moschus moschiferus moschiferus

    sql := 'WITH current_inclusions AS (
      SELECT * FROM ' || tmp_lc_table_name || '
      WHERE change_type_name = ''ADDITION''
      AND inclusion_taxon_concept_id IS NOT NULL
      AND is_current
      ), non_current_inclusions AS (
        SELECT current_inclusions.id, current_inclusions.taxon_concept_id
        FROM current_inclusions
        JOIN ' || tmp_lc_table_name || ' lc
        ON lc.change_type_name IN (''ADDITION'', ''DELETION'')
        AND lc.explicit_change
        AND lc.taxon_concept_id = current_inclusions.taxon_concept_id
        AND lc.effective_at > current_inclusions.effective_at
        AND lc.is_current
      )
      UPDATE ' || tmp_lc_table_name || ' lc
      SET is_current = FALSE
      FROM non_current_inclusions
      WHERE lc.id = non_current_inclusions.id
      AND lc.taxon_concept_id = non_current_inclusions.taxon_concept_id';

    EXECUTE sql;

    sql := 'WITH double_inclusions AS (
      SELECT lc.taxon_concept_id, lc.id AS own_inclusion_id, lc_inh.id AS inherited_inclusion_id,
      lc_inh.full_note_en AS inherited_full_note_en,
      lc_inh.short_note_en AS inherited_short_note_en,
      lc_inh.full_note_es AS inherited_full_note_es,
      lc_inh.short_note_es AS inherited_short_note_es,
      lc_inh.full_note_fr AS inherited_full_note_fr,
      lc_inh.short_note_fr AS inherited_short_note_fr
      FROM ' || tmp_lc_table_name || ' lc
      JOIN ' || tmp_lc_table_name || ' lc_inh
      ON lc.taxon_concept_id = lc_inh.taxon_concept_id
      AND lc.species_listing_id = lc_inh.species_listing_id
      AND lc.change_type_id = lc_inh.change_type_id
      AND lc.effective_at = lc_inh.effective_at
      AND (lc.party_id IS NULL OR lc.party_id = lc_inh.party_id)
      AND lc.inclusion_taxon_concept_id = lc_inh.original_taxon_concept_id
      WHERE lc.inclusion_taxon_concept_id IS NOT NULL
    ), rows_to_be_deleted AS (
      DELETE
      FROM ' || tmp_lc_table_name || ' lc
      USING double_inclusions
      WHERE double_inclusions.taxon_concept_id = lc.taxon_concept_id
      AND double_inclusions.inherited_inclusion_id = lc.id
      RETURNING *
    )
    UPDATE ' || tmp_lc_table_name || ' lc
    SET inherited_full_note_en = double_inclusions.inherited_full_note_en,
    inherited_short_note_en = double_inclusions.inherited_short_note_en,
    inherited_full_note_es = double_inclusions.inherited_full_note_es,
    inherited_short_note_es = double_inclusions.inherited_short_note_es,
    inherited_full_note_fr = double_inclusions.inherited_full_note_fr,
    inherited_short_note_fr = double_inclusions.inherited_short_note_fr
    FROM double_inclusions
    WHERE double_inclusions.taxon_concept_id = lc.taxon_concept_id
    AND double_inclusions.own_inclusion_id = lc.id
    AND (double_inclusions.inherited_full_note_en IS NOT NULL OR double_inclusions.inherited_short_note_en IS NOT NULL)';

    EXECUTE sql;

    RAISE INFO 'Creating indexes on %', tmp_lc_table_name;
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (show_in_timeline, taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (show_in_downloads, taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (original_taxon_concept_id)';
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' (is_current, change_type_name)'; -- Species+ downloads
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' USING GIN (listed_geo_entities_ids)'; -- search by geo entity
    EXECUTE 'CREATE INDEX ON ' || tmp_lc_table_name || ' USING GIN (excluded_geo_entities_ids)'; -- search by geo entity


    RAISE INFO 'Swapping %  materialized view', lc_table_name;
    EXECUTE 'DROP TABLE IF EXISTS ' || lc_table_name || ' CASCADE';
    EXECUTE 'ALTER TABLE ' || tmp_lc_table_name || ' RENAME TO ' || lc_table_name;
    IF designation.name != 'EU' THEN
      EXECUTE 'ALTER TABLE ' || lc_table_name || ' INHERIT ' || master_lc_table_name;
    END IF;
  END;
  $$;


--
-- Name: FUNCTION rebuild_designation_listing_changes_mview(taxonomy public.taxonomies, designation public.designations, events_ids integer[]); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_designation_listing_changes_mview(taxonomy public.taxonomies, designation public.designations, events_ids integer[]) IS 'Procedure to rebuild designation listing changes materialized view in the database.';


--
-- Name: rebuild_eu_listed_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_listed_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_eu_listed_status_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_eu_listed_status(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_eu_listed_status() IS '
  Procedure to rebuild the eu status flags in taxon_concepts.listing.
  1. eu_status
    "LISTED" - explicit/implicit cites listing,
    "DELETED" - taxa previously listed and then deleted
    "EXCLUDED" - taxonomic exceptions
  2. eu_status_original
    TRUE - cites_status is explicit (original)
    FALSE - cites_status is implicit (inherited)
';


--
-- Name: rebuild_eu_listed_status_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_listed_status_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'EU';
    IF NOT FOUND THEN
      RETURN;
    END IF;
    PERFORM rebuild_listing_status_for_designation_and_node(designation, node_id);
    PERFORM set_eu_historically_listed_flag_for_node(node_id);
    END;
  $$;


--
-- Name: rebuild_eu_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    --PERFORM rebuild_eu_annotation_symbols_for_node(NULL);
    PERFORM rebuild_eu_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_eu_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_eu_listing() IS 'Procedure to rebuild EU listing in taxon_concepts.';


--
-- Name: rebuild_eu_listing_changes_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_listing_changes_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    taxonomy taxonomies%ROWTYPE;
    designation designations%ROWTYPE;
    eu_interval RECORD;
    mviews TEXT[];
    sql TEXT;
    tmp_listing_changes_mview TEXT;
    tmp_current_listing_changes_mview TEXT;
    listing_changes_mview TEXT;
    master_listing_changes_mview TEXT;
  BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'EU';
    IF FOUND THEN
      SELECT * INTO taxonomy FROM taxonomies WHERE id = designation.taxonomy_id;
      PERFORM drop_eu_lc_mviews();
      FOR eu_interval IN (SELECT * FROM eu_regulations_applicability_view) LOOP
        SELECT ARRAY_APPEND(mviews, 'SELECT * FROM ' ||
          listing_changes_mview_name('child', designation.name, eu_interval.events_ids)
        ) INTO mviews;
        PERFORM rebuild_designation_all_listing_changes_mview(
          taxonomy, designation, eu_interval.events_ids
        );
        PERFORM rebuild_designation_listing_changes_mview(
          taxonomy, designation, eu_interval.events_ids
        );
        IF eu_interval.end_date IS NULL THEN -- current
          SELECT listing_changes_mview_name('tmp_current', designation.name, NULL)
          INTO tmp_current_listing_changes_mview;
          EXECUTE 'DROP VIEW IF EXISTS ' || tmp_current_listing_changes_mview;
          sql := 'CREATE VIEW ' || tmp_current_listing_changes_mview || ' AS
            SELECT * FROM ' || listing_changes_mview_name('tmp', designation.name, eu_interval.events_ids);
          EXECUTE sql;
        END IF;
      END LOOP;
      SELECT listing_changes_mview_name('tmp_cascaded', designation.name, NULL)
      INTO tmp_listing_changes_mview;
      SELECT listing_changes_mview_name('child', designation.name, NULL)
      INTO listing_changes_mview;
      SELECT listing_changes_mview_name(NULL, designation.name, NULL)
      INTO master_listing_changes_mview;
      IF ARRAY_UPPER(mviews, 1) IS NULL THEN
        RETURN;
      END IF;
      -- same listing changes might be present in more than one interval
      -- need to DISTINCT
      sql := 'CREATE TABLE ' || tmp_listing_changes_mview || ' AS ' ||
        'SELECT DISTINCT ON (id, taxon_concept_id) * FROM (' || ARRAY_TO_STRING(mviews, ' UNION ') || ') q';
      EXECUTE sql;
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' (inclusion_taxon_concept_id)';
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at)';
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' (show_in_timeline, taxon_concept_id)';
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' (show_in_downloads, taxon_concept_id)';
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' (original_taxon_concept_id)';
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' (is_current, change_type_name)'; -- Species+ downloads
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' USING GIN (listed_geo_entities_ids)'; -- search by geo entity
      EXECUTE 'CREATE INDEX ON ' || tmp_listing_changes_mview || ' USING GIN (excluded_geo_entities_ids)'; -- search by geo entity

      RAISE INFO 'Swapping eu_listing_changes materialized view';
      EXECUTE 'DROP TABLE IF EXISTS ' || listing_changes_mview || ' CASCADE';
      EXECUTE 'ALTER TABLE ' || tmp_listing_changes_mview || ' RENAME TO ' || listing_changes_mview;
      EXECUTE 'ALTER TABLE ' || listing_changes_mview || ' INHERIT ' || master_listing_changes_mview;
    END IF;
  END;
  $$;


--
-- Name: rebuild_eu_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_eu_listed_status_for_node(node_id);
    PERFORM rebuild_eu_not_listed_status_for_node(node_id);
    --PERFORM rebuild_eu_hash_annotation_symbols_for_node(node_id);
    PERFORM rebuild_explicit_eu_listing_for_node(node_id);
    PERFORM rebuild_ancestor_eu_listing_for_node(node_id);
    END;
  $$;


--
-- Name: rebuild_eu_not_listed_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_not_listed_status() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_eu_not_listed_status_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_eu_not_listed_status(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_eu_not_listed_status() IS '
  Procedure to rebuild the eu_fully_covered AND eu_not_listed flags in taxon_concepts.listing.
  1. eu_fully_covered
    TRUE - all descendants are listed,
    FALSE - some descendants were excluded or deleted from listing
  2. eu_not_listed
    NC - either this taxon or some of its descendants were excluded or deleted from listing
';


--
-- Name: rebuild_eu_not_listed_status_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_not_listed_status_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      designation designations%ROWTYPE;
    BEGIN
    SELECT * INTO designation FROM designations WHERE name = 'EU';
    PERFORM rebuild_not_listed_status_for_designation_and_node(designation, node_id);
    END;
  $$;


--
-- Name: rebuild_eu_species_listing_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_eu_species_listing_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN

  DROP TABLE IF EXISTS eu_species_listing_mview_tmp;

CREATE TABLE eu_species_listing_mview_tmp AS
SELECT
  taxon_concepts_mview.id AS id,
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.kingdom_id AS kingdom_id,
  taxon_concepts_mview.phylum_id AS phylum_id,
  taxon_concepts_mview.class_id AS class_id,
  taxon_concepts_mview.order_id AS order_id,
  taxon_concepts_mview.family_id AS family_id,
  taxon_concepts_mview.genus_id AS genus_id,
  taxon_concepts_mview.kingdom_name AS kingdom_name,
  taxon_concepts_mview.phylum_name AS phylum_name,
  taxon_concepts_mview.class_name AS class_name,
  taxon_concepts_mview.order_name AS order_name,
  taxon_concepts_mview.family_name AS family_name,
  taxon_concepts_mview.genus_name AS genus_name,
  taxon_concepts_mview.species_name AS species_name,
  taxon_concepts_mview.subspecies_name AS subspecies_name,
  taxon_concepts_mview.full_name AS full_name,
  taxon_concepts_mview.author_year AS author_year,
  taxon_concepts_mview.rank_name AS rank_name,
  taxon_concepts_mview.eu_listed,
  CASE
    WHEN taxon_concepts_mview.eu_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.eu_listing_original) = 0
    THEN 'NC'
    ELSE taxon_concepts_mview.eu_listing_original
  END AS eu_listing_original,
  CASE
    WHEN taxon_concepts_mview.cites_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.cites_listing_original) = 0
    THEN 'NC'
    ELSE taxon_concepts_mview.cites_listing_original
  END AS cites_listing_original,
  ARRAY_TO_STRING(
    ARRAY_AGG(DISTINCT listing_changes_mview.party_iso_code),
    ','
  ) AS original_taxon_concept_party_iso_code,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      DISTINCT full_name_with_spp(
        COALESCE(inclusion_taxon_concepts_mview.rank_name, original_taxon_concepts_mview.rank_name),
        COALESCE(inclusion_taxon_concepts_mview.full_name, original_taxon_concepts_mview.full_name),
        COALESCE(inclusion_taxon_concepts_mview.name_status, original_taxon_concepts_mview.name_status)
      )
    ),
    ','
  ) AS original_taxon_concept_full_name_with_spp,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      '**' || listing_changes_mview.species_listing_name || '** '
      || CASE
        WHEN LENGTH(listing_changes_mview.auto_note_en) > 0 THEN '[' || listing_changes_mview.auto_note_en || '] '
        ELSE ''
      END
      || CASE
        WHEN LENGTH(listing_changes_mview.inherited_full_note_en) > 0 THEN strip_tags(listing_changes_mview.inherited_full_note_en)
        WHEN LENGTH(listing_changes_mview.inherited_short_note_en) > 0 THEN strip_tags(listing_changes_mview.inherited_short_note_en)
        WHEN LENGTH(listing_changes_mview.full_note_en) > 0 THEN strip_tags(listing_changes_mview.full_note_en)
        ELSE strip_tags(listing_changes_mview.short_note_en)
      END
      || CASE
          WHEN LENGTH(listing_changes_mview.nomenclature_note_en) > 0 THEN strip_tags(listing_changes_mview.nomenclature_note_en)
          ELSE ''
      END
      ORDER BY listing_changes_mview.species_listing_name
    ),
    E'\n'
  ) AS original_taxon_concept_full_note_en,
  ARRAY_TO_STRING(
    ARRAY_AGG(
      '**' || species_listing_name || '** ' || listing_changes_mview.hash_ann_symbol || ' '
      || strip_tags(listing_changes_mview.hash_full_note_en)
      ORDER BY species_listing_name
    ),
    E'\n'
  ) AS original_taxon_concept_hash_full_note_en,
  taxon_concepts_mview.countries_ids_ary,
  ARRAY_TO_STRING(taxon_concepts_mview.all_distribution_ary_en, ',') AS all_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.all_distribution_iso_codes_ary, ',') AS all_distribution_iso_codes,
  ARRAY_TO_STRING(taxon_concepts_mview.native_distribution_ary_en, ',') AS native_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.introduced_distribution_ary_en, ',') AS introduced_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.introduced_uncertain_distribution_ary_en, ',') AS introduced_uncertain_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.reintroduced_distribution_ary_en, ',') AS reintroduced_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.extinct_distribution_ary_en, ',') AS extinct_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.extinct_uncertain_distribution_ary_en, ',') AS extinct_uncertain_distribution,
  ARRAY_TO_STRING(taxon_concepts_mview.uncertain_distribution_ary_en, ',') AS uncertain_distribution
FROM "taxon_concepts_mview"
JOIN eu_listing_changes_mview listing_changes_mview
  ON listing_changes_mview.taxon_concept_id = taxon_concepts_mview.id
  AND is_current
  AND change_type_name = 'ADDITION'
JOIN taxon_concepts_mview original_taxon_concepts_mview
  ON listing_changes_mview.original_taxon_concept_id = original_taxon_concepts_mview.id
LEFT JOIN taxon_concepts_mview inclusion_taxon_concepts_mview
  ON listing_changes_mview.inclusion_taxon_concept_id = inclusion_taxon_concepts_mview.id
WHERE "taxon_concepts_mview"."name_status" = 'A'
  AND "taxon_concepts_mview".taxonomy_is_cites_eu = TRUE
  AND "taxon_concepts_mview"."eu_show" = 't'
  AND "taxon_concepts_mview"."rank_name" IN ('SPECIES', 'SUBSPECIES', 'VARIETY')
  AND (taxon_concepts_mview.eu_listing_original != 'NC')
GROUP BY
  taxon_concepts_mview.id,
  taxon_concepts_mview.kingdom_id,
  taxon_concepts_mview.phylum_id,
  taxon_concepts_mview.class_id,
  taxon_concepts_mview.order_id,
  taxon_concepts_mview.family_id,
  taxon_concepts_mview.genus_id,
  taxon_concepts_mview.kingdom_name,
  taxon_concepts_mview.phylum_name,
  taxon_concepts_mview.class_name,
  taxon_concepts_mview.order_name,
  taxon_concepts_mview.family_name,
  taxon_concepts_mview.genus_name,
  taxon_concepts_mview.species_name,
  taxon_concepts_mview.subspecies_name,
  taxon_concepts_mview.full_name,
  taxon_concepts_mview.author_year,
  taxon_concepts_mview.rank_name,
  taxon_concepts_mview.eu_listed,
  CASE
    WHEN taxon_concepts_mview.eu_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.eu_listing_original) = 0
    THEN 'NC' ELSE taxon_concepts_mview.eu_listing_original
  END,
  CASE
    WHEN taxon_concepts_mview.cites_listing_original IS NULL
    OR LENGTH(taxon_concepts_mview.cites_listing_original) = 0
    THEN 'NC'
    ELSE taxon_concepts_mview.cites_listing_original
  END,
  COALESCE(inclusion_taxon_concepts_mview.full_name, original_taxon_concepts_mview.full_name),
  COALESCE(inclusion_taxon_concepts_mview.spp, original_taxon_concepts_mview.spp),
  taxon_concepts_mview.taxonomic_position,
  taxon_concepts_mview.countries_ids_ary,
  taxon_concepts_mview.all_distribution_ary_en,
  taxon_concepts_mview.all_distribution_iso_codes_ary,
  taxon_concepts_mview.native_distribution_ary_en,
  taxon_concepts_mview.introduced_distribution_ary_en,
  taxon_concepts_mview.introduced_uncertain_distribution_ary_en,
  taxon_concepts_mview.reintroduced_distribution_ary_en,
  taxon_concepts_mview.extinct_distribution_ary_en,
  taxon_concepts_mview.extinct_uncertain_distribution_ary_en,
  taxon_concepts_mview.uncertain_distribution_ary_en;

  CREATE INDEX ON eu_species_listing_mview_tmp USING GIN (countries_ids_ary); -- search by geo entity

  DROP TABLE IF EXISTS eu_species_listing_mview;
  ALTER TABLE eu_species_listing_mview_tmp RENAME TO eu_species_listing_mview;

END;
$$;


--
-- Name: rebuild_explicit_cites_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_explicit_cites_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
      PERFORM rebuild_explicit_cites_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_explicit_cites_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_explicit_cites_listing() IS '
Procedure to rebuild explicit CITES listing in taxon_concepts.
';


--
-- Name: rebuild_explicit_cites_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_explicit_cites_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN

    UPDATE taxon_concepts SET listing =
    CASE
    WHEN NOT (taxon_concepts.listing->'cites_status_original')::BOOLEAN
    THEN taxon_concepts.listing - ARRAY['cites_not_listed']
    ELSE taxon_concepts.listing
    END || qqq.listing
    FROM (
      SELECT taxon_concept_id, listing ||
      hstore('cites_listing_original', ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(SELECT * FROM UNNEST(
          ARRAY[
            listing -> 'cites_I', listing -> 'cites_II', listing -> 'cites_III',
            listing -> 'cites_not_listed'
          ]
        ) s WHERE s IS NOT NULL),
          '/'
        )
      ) AS listing
      FROM (
        SELECT taxon_concept_id,
        CASE
          WHEN BOOL_OR(species_listing_name = 'I')
          THEN hstore('cites_I', 'I') ELSE hstore('cites_I', NULL)
        END ||
        CASE
          WHEN BOOL_OR(species_listing_name = 'II')
          THEN hstore('cites_II', 'II') ELSE hstore('cites_II', NULL)
        END ||
        CASE
          WHEN BOOL_OR(species_listing_name = 'III')
          THEN hstore('cites_III', 'III') ELSE hstore('cites_III', NULL)
        END AS listing
        FROM cites_listing_changes_mview
        WHERE change_type_name = 'ADDITION' AND is_current
        GROUP BY taxon_concept_id
      ) AS qq
    ) AS qqq
    WHERE taxon_concepts.id = qqq.taxon_concept_id AND
    CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;
    END;
  $$;


--
-- Name: rebuild_explicit_cms_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_explicit_cms_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_explicit_cms_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_explicit_cms_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_explicit_cms_listing() IS '
Procedure to rebuild explicit CMS listing in taxon_concepts.
';


--
-- Name: rebuild_explicit_cms_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_explicit_cms_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    UPDATE taxon_concepts SET listing =
    CASE
    WHEN NOT (taxon_concepts.listing->'cms_status_original')::BOOLEAN
    THEN taxon_concepts.listing - ARRAY['cms_not_listed']
    ELSE taxon_concepts.listing
    END || qqq.listing
    FROM (
      SELECT taxon_concept_id, listing ||
      hstore('cms_listing_original', ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(SELECT * FROM UNNEST(
          ARRAY[
            listing -> 'cms_I', listing -> 'cms_II',
            listing -> 'cms_not_listed'
          ]
        ) s WHERE s IS NOT NULL),
          '/'
        )
      ) AS listing
      FROM (
        SELECT taxon_concept_id,
        CASE
          WHEN BOOL_OR(species_listing_name = 'I')
          THEN hstore('cms_I', 'I') ELSE hstore('cms_I', NULL)
        END ||
        CASE
          WHEN BOOL_OR(species_listing_name = 'II')
          THEN hstore('cms_II', 'II') ELSE hstore('cms_II', NULL)
        END AS listing
        FROM cms_listing_changes_mview
        WHERE change_type_name = 'ADDITION' AND is_current
        GROUP BY taxon_concept_id
      ) AS qq
    ) AS qqq
    WHERE taxon_concepts.id = qqq.taxon_concept_id AND
    CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;
    END;
  $$;


--
-- Name: rebuild_explicit_eu_listing(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_explicit_eu_listing() RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    PERFORM rebuild_explicit_eu_listing_for_node(NULL);
    END;
  $$;


--
-- Name: FUNCTION rebuild_explicit_eu_listing(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_explicit_eu_listing() IS '
Procedure to rebuild explicit EU listing in taxon_concepts.
';


--
-- Name: rebuild_explicit_eu_listing_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_explicit_eu_listing_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    BEGIN
    UPDATE taxon_concepts SET listing =
    CASE
    WHEN NOT (taxon_concepts.listing->'eu_status_original')::BOOLEAN
    THEN taxon_concepts.listing - ARRAY['eu_not_listed']
    ELSE taxon_concepts.listing
    END || qqq.listing
    FROM (
      SELECT taxon_concept_id, listing ||
      hstore('eu_listing_original', ARRAY_TO_STRING(
        -- unnest to filter out the nulls
        ARRAY(SELECT * FROM UNNEST(
          ARRAY[
            listing -> 'eu_A', listing -> 'eu_B', listing -> 'eu_C',
            listing -> 'eu_D', listing -> 'eu_not_listed'
          ]
        ) s WHERE s IS NOT NULL),
          '/'
        )
      ) AS listing
      FROM (
        SELECT taxon_concept_id,
        CASE
          WHEN BOOL_OR(species_listing_name = 'A')
          THEN hstore('eu_A', 'A') ELSE hstore('eu_A', NULL)
        END ||
        CASE
          WHEN BOOL_OR(species_listing_name = 'B')
          THEN hstore('eu_B', 'B') ELSE hstore('eu_B', NULL)
        END ||
        CASE
          WHEN BOOL_OR(species_listing_name = 'C')
          THEN hstore('eu_C', 'C') ELSE hstore('eu_C', NULL)
        END ||
        CASE
          WHEN BOOL_OR(species_listing_name = 'D')
          THEN hstore('eu_D', 'D') ELSE hstore('eu_D', NULL)
        END AS listing
        FROM eu_listing_changes_mview
        WHERE change_type_name = 'ADDITION' AND is_current
        GROUP BY taxon_concept_id
      ) AS qq
    ) AS qqq
    WHERE taxon_concepts.id = qqq.taxon_concept_id AND
    CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;
    END;
  $$;


--
-- Name: rebuild_listing_changes_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_listing_changes_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM rebuild_cites_eu_taxon_concepts_and_ancestors_mview();
    PERFORM rebuild_cms_taxon_concepts_and_ancestors_mview();
    PERFORM rebuild_cites_listing_changes_mview();
    PERFORM rebuild_eu_listing_changes_mview();
    PERFORM rebuild_cms_listing_changes_mview();
  END;
  $$;


--
-- Name: FUNCTION rebuild_listing_changes_mview(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_listing_changes_mview() IS 'Procedure to rebuild listing changes materialized view in the database.';


--
-- Name: rebuild_listing_status_for_designation_and_node(public.designations, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_listing_status_for_designation_and_node(designation public.designations, node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      deletion_id int;
      addition_id int;
      exception_id int;
      designation_name TEXT;
      status_flag varchar;
      status_original_flag varchar;
      listing_original_flag varchar;
      listing_flag varchar;
      listing_updated_at_flag varchar;
      not_listed_flag varchar;
      show_flag varchar;
      level_of_listing_flag varchar;
      flags_to_reset text[];
      sql TEXT;
      tmp_current_listing_changes_mview TEXT;
    BEGIN
    SELECT id INTO deletion_id FROM change_types
      WHERE designation_id = designation.id AND name = 'DELETION';
    SELECT id INTO addition_id FROM change_types
      WHERE designation_id = designation.id AND name = 'ADDITION';
    SELECT id INTO exception_id FROM change_types
      WHERE designation_id = designation.id AND name = 'EXCEPTION';
    designation_name = LOWER(designation.name);
    status_flag = designation_name || '_status';
    status_original_flag = designation_name || '_status_original';
    listing_original_flag := designation_name || '_listing_original';
    listing_flag := designation_name || '_listing';
    listing_updated_at_flag = designation_name || '_updated_at';
    level_of_listing_flag := designation_name || '_level_of_listing';
    not_listed_flag := designation_name || '_not_listed';
    show_flag := designation_name || '_show';


    flags_to_reset := ARRAY[
      status_flag, status_original_flag, listing_flag, listing_original_flag,
      not_listed_flag, listing_updated_at_flag, level_of_listing_flag,
      show_flag
    ];
    IF designation.name = 'CITES' THEN
      flags_to_reset := flags_to_reset ||
        ARRAY['cites_I','cites_II','cites_III'];
    ELSIF designation.name = 'EU' THEN
      flags_to_reset := flags_to_reset ||
        ARRAY['eu_A','eu_B','eu_C','eu_D'];
    ELSIF designation.name = 'CMS' THEN
      flags_to_reset := flags_to_reset ||
        ARRAY['cms_I','cms_II'];
    END IF;

    -- reset the listing status (so we start clear)
    UPDATE taxon_concepts
    SET listing = (COALESCE(listing, ''::HSTORE) - flags_to_reset)
    WHERE taxonomy_id = designation.taxonomy_id AND
      CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END;

    -- set status property to 'LISTED' for all explicitly listed taxa
    -- i.e. ones which have at least one current ADDITION
    -- that is not an inclusion
    -- also set status_original & level_of_listing flags to true
    -- also set the listing_updated_at property
    WITH listed_taxa AS (
      SELECT taxon_concepts.id, MAX(effective_at) AS listing_updated_at
      FROM taxon_concepts
      INNER JOIN listing_changes
        ON taxon_concepts.id = listing_changes.taxon_concept_id
        AND is_current = 't'
        AND change_type_id = addition_id
      WHERE taxonomy_id = designation.taxonomy_id
      AND inclusion_taxon_concept_id IS NULL
      GROUP BY taxon_concepts.id
    )
    UPDATE taxon_concepts
    SET listing = listing || hstore(status_flag, 'LISTED') ||
      hstore(status_original_flag, 't') ||
      hstore(level_of_listing_flag, 't') ||
      hstore(listing_updated_at_flag, listing_updated_at::VARCHAR)
    FROM listed_taxa
    WHERE taxon_concepts.id = listed_taxa.id AND
      CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;

    -- set status property to 'EXCLUDED' for all explicitly excluded taxa
    -- omit ones already marked as listed
    -- also set status_original flag to true
    -- note: this was moved before setting the "deleted" status,
    -- because some taxa were deleted but still need to show up
    -- in the checklist, and so they get the "excluded" status
    -- to differentiate them
    WITH excluded_taxa AS (
      WITH listing_exceptions AS (
        SELECT listing_changes.parent_id, taxon_concept_id
        FROM listing_changes
        INNER JOIN taxon_concepts
          ON listing_changes.taxon_concept_id  = taxon_concepts.id
            AND taxonomy_id = designation.taxonomy_id
            AND (
              listing -> status_flag <> 'LISTED'
              OR (listing -> status_flag)::VARCHAR IS NULL
            )
        WHERE change_type_id = exception_id
      )
      SELECT DISTINCT listing_exceptions.taxon_concept_id AS id
      FROM listing_exceptions
      INNER JOIN listing_changes
        ON listing_changes.id = listing_exceptions.parent_id
          AND listing_changes.taxon_concept_id <> listing_exceptions.taxon_concept_id
          AND listing_changes.change_type_id = addition_id
          AND listing_changes.is_current = TRUE
    )
    UPDATE taxon_concepts
    SET listing = listing || hstore(status_flag, 'EXCLUDED') ||
      hstore(status_original_flag, 't')
    FROM excluded_taxa
    WHERE taxon_concepts.id = excluded_taxa.id AND
      CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;

    -- set status property to 'DELETED' for all explicitly deleted taxa
    -- omit ones already marked as listed (applies to appendix III deletions)
    -- also set status_original flag to true
    -- also set a flag if there are listed subspecies of a deleted species
    WITH deleted_taxa AS (
      SELECT taxon_concepts.id
      FROM taxon_concepts
      INNER JOIN listing_changes
        ON taxon_concepts.id = listing_changes.taxon_concept_id
        AND is_current = 't' AND change_type_id = deletion_id
      WHERE taxonomy_id = designation.taxonomy_id AND (
        listing -> status_flag <> 'LISTED'
        AND listing -> status_flag <> 'EXCLUDED'
          OR (listing -> status_flag)::VARCHAR IS NULL
      )
    ), not_really_deleted_taxa AS (
      -- crazy stuff to do with species that were deleted but have listed subspecies
      -- so in fact this is really confusing but what can you do, flag it
        SELECT DISTINCT parent_id AS id
        FROM taxon_concepts
        JOIN deleted_taxa
        ON taxon_concepts.parent_id = deleted_taxa.id
        JOIN ranks
        ON taxon_concepts.rank_id = ranks.id AND ranks.name = 'SUBSPECIES'
        WHERE taxon_concepts.listing->status_flag = 'LISTED'
    )
    UPDATE taxon_concepts
    SET listing = listing || hstore(status_flag, 'DELETED') ||
      hstore(status_original_flag, 't') ||
      hstore(
        'not_really_deleted',
        CASE WHEN not_really_deleted_taxa.id IS NOT NULL THEN 't'
        ELSE 'f' END
      )
    FROM deleted_taxa
    LEFT JOIN not_really_deleted_taxa
    ON not_really_deleted_taxa.id = deleted_taxa.id
    WHERE taxon_concepts.id = deleted_taxa.id AND
      CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;

    -- propagate cites_status to descendants
    SELECT listing_changes_mview_name('tmp_current', designation.name, NULL)
    INTO tmp_current_listing_changes_mview;

    sql := 'WITH RECURSIVE q AS (
      SELECT
        h.id,
        h.parent_id,
        listing->''' || designation_name || '_status'' AS inherited_status,
        listing->''' || designation_name || '_updated_at'' AS inherited_listing_updated_at,
        listed_geo_entities_ids,
        excluded_geo_entities_ids,
        excluded_taxon_concept_ids,
        HSTORE(''' || designation_name || '_status_original'', ''t'') ||
        CASE
          WHEN lc.change_type_name = ''DELETION''
          THEN HSTORE(''' || designation_name || '_status'',  ''DELETED'') ||
            HSTORE(''' || designation_name || '_not_listed'', ''NC'')
          ELSE HSTORE(''' || designation_name || '_status'',  ''LISTED'') ||
            HSTORE(''' || designation_name || '_not_listed'', NULL)
        END AS status_hstore
      FROM    taxon_concepts h
      JOIN ' || tmp_current_listing_changes_mview || ' lc
      ON h.id = lc.taxon_concept_id
      AND lc.change_type_name IN (''ADDITION'', ''DELETION'')
      AND inclusion_taxon_concept_id IS NULL
      GROUP BY
        h.id,
        listed_geo_entities_ids,
        excluded_geo_entities_ids,
        excluded_taxon_concept_ids,
        lc.change_type_name

      UNION

      SELECT
        hi.id,
        hi.parent_id,
        inherited_status,
        inherited_listing_updated_at,
        listed_geo_entities_ids,
        excluded_geo_entities_ids,
        excluded_taxon_concept_ids,
        CASE
        WHEN (hi.listing->''' || designation_name || '_status_original'')::BOOLEAN
        THEN SLICE(hi.listing, ARRAY[
          ''' || designation_name || '_status_original'',
          ''' || designation_name || '_status'',
          ''' || designation_name || '_level_of_listing'',
          ''' || designation_name || '_updated_at'',
          ''' || designation_name || '_not_listed''
        ])
        ELSE
          HSTORE(''' || designation_name || '_status_original'', ''f'') ||
            HSTORE(''' || designation_name || '_level_of_listing'', ''f'') ||
            CASE
              WHEN ARRAY_UPPER(excluded_taxon_concept_ids, 1) IS NOT NULL
                AND excluded_taxon_concept_ids @> ARRAY[hi.id]
              THEN HSTORE(''' || designation_name || '_status'', ''EXCLUDED'') ||
                HSTORE(''' || designation_name || '_not_listed'', ''NC'')
              WHEN ARRAY_UPPER(excluded_geo_entities_ids, 1) IS NOT NULL
                AND EXISTS (
                SELECT 1 FROM distributions
                WHERE q.excluded_geo_entities_ids @> ARRAY[geo_entity_id]
                  AND taxon_concept_id = hi.id
              )
              THEN HSTORE(''' || designation_name || '_status'', ''EXCLUDED'') ||
                HSTORE(''' || designation_name || '_not_listed'', ''NC'')
              WHEN ARRAY_UPPER(listed_geo_entities_ids, 1) IS NOT NULL
                AND NOT EXISTS (
                SELECT 1 FROM distributions
                WHERE q.listed_geo_entities_ids @> ARRAY[geo_entity_id]
                  AND taxon_concept_id = hi.id
              )
              THEN HSTORE(''' || designation_name || '_status'', NULL) ||
                HSTORE(''' || designation_name || '_not_listed'', ''NC'')
              ELSE HSTORE(
                ''' || designation_name || '_status'',
                q.status_hstore->''' || designation_name || '_status''
              ) || HSTORE(
              ''' || designation_name || '_not_listed'',
              q.status_hstore->''' || designation_name || '_not_listed''
              )
            END
        END
      FROM q
      JOIN taxon_concepts hi
        ON hi.parent_id = q.id
    ), grouped AS (
      SELECT id,
      HSTORE(
        ''' || designation_name || '_status'',
        CASE
          WHEN BOOL_OR(status_hstore->''' || designation_name || '_status'' = ''LISTED'')
          THEN ''LISTED''
          ELSE MAX(status_hstore->''' || designation_name || '_status'')
        END
      ) ||
      HSTORE(
        ''' || designation_name || '_status_original'',
        BOOL_OR((status_hstore->''' || designation_name || '_status_original'')::BOOLEAN)::TEXT
      ) ||
      HSTORE(
        ''' || designation_name || '_not_listed'',
        CASE
          WHEN BOOL_AND(status_hstore->''' || designation_name || '_not_listed'' = ''NC'')
          THEN ''NC''
          ELSE NULL
        END
      ) ||
      HSTORE(
        ''' || designation_name || '_updated_at'',
        MAX(inherited_listing_updated_at)
      ) AS status_hstore
    FROM q
    GROUP BY q.id --this grouping is to accommodate for split listings
    )
    UPDATE taxon_concepts
    SET listing = COALESCE(listing, ''''::HSTORE) || grouped.status_hstore
    FROM grouped
    WHERE taxon_concepts.id = grouped.id';

    EXECUTE sql;

    -- set cites_status property to 'LISTED' for ancestors of listed taxa
    WITH qq AS (
      WITH RECURSIVE q AS
      (
        SELECT  h.id, h.parent_id,
        listing->status_flag AS inherited_status,
        (listing->listing_updated_at_flag)::TIMESTAMP AS inherited_listing_updated_at
        FROM    taxon_concepts h
        WHERE
          listing->status_flag = 'LISTED'
          AND (listing->status_original_flag)::BOOLEAN = 't'
          AND
          CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END

        UNION

        SELECT  hi.id, hi.parent_id,
        CASE
          WHEN (listing->status_original_flag)::BOOLEAN = 't'
          THEN listing->status_flag
          ELSE inherited_status
        END,
        CASE
          WHEN (listing->listing_updated_at_flag)::TIMESTAMP IS NOT NULL
          THEN (listing->listing_updated_at_flag)::TIMESTAMP
          ELSE inherited_listing_updated_at
        END
        FROM    q
        JOIN    taxon_concepts hi
        ON      hi.id = q.parent_id
        WHERE (listing->status_original_flag)::BOOLEAN IS NULL
      )
      SELECT DISTINCT id, inherited_status,
        inherited_listing_updated_at
      FROM q
    )
    UPDATE taxon_concepts
    SET listing = COALESCE(listing, ''::HSTORE) ||
      hstore(status_flag, inherited_status) ||
      hstore(status_original_flag, 'f') ||
      hstore(level_of_listing_flag, 'f') ||
      hstore(listing_updated_at_flag, inherited_listing_updated_at::VARCHAR)
    FROM qq
    WHERE taxon_concepts.id = qq.id
     AND (
       listing IS NULL
       OR (listing->status_original_flag)::BOOLEAN IS NULL
       OR (listing->status_original_flag)::BOOLEAN = 'f'
     );

    END;
  $$;


--
-- Name: rebuild_mviews(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_mviews() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM rebuild_taxon_concepts_mview();
    PERFORM rebuild_listing_changes_mview();
  END;
  $$;


--
-- Name: FUNCTION rebuild_mviews(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_mviews() IS 'Procedure to rebuild materialized views in the database.';


--
-- Name: rebuild_non_compliant_shipments_view(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_non_compliant_shipments_view() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP VIEW IF EXISTS non_compliant_shipments_view CASCADE;
    RAISE INFO 'Creating non compliant shipments view';
    CREATE VIEW non_compliant_shipments_view AS (
      SELECT id, year, appendix, taxon_concept_id,
             author_year,
             name_status,
             taxon_name,
             phylum_id,
             class_id,
             class_name,
             order_id,
             order_name,
             family_id,
             family_name,
             genus_id,
             genus_name,
             term_id,
             term,
             importer_reported_quantity,
             exporter_reported_quantity,
             unit_id,
             unit,
             exporter_id,
             exporter_iso,
             exporter,
             importer_id,
             importer_iso,
             importer,
             origin,
             purpose_id,
             purpose,
             source_id,
             source,
             import_permits,
             export_permits,
             origin_permits,
             ifs_permits,
             import_permit,
             export_permit,
             origin_permit,
             ifs_permit,
             rank_id,
             rank_name,
             issue_type::text
      FROM trade_shipments_appendix_i_mview

      UNION ALL

      SELECT id, year, appendix, taxon_concept_id,
             author_year,
             name_status,
             taxon_name,
             phylum_id,
             class_id,
             class_name,
             order_id,
             order_name,
             family_id,
             family_name,
             genus_id,
             genus_name,
             term_id,
             term,
             importer_reported_quantity,
             exporter_reported_quantity,
             unit_id,
             unit,
             exporter_id,
             exporter_iso,
             exporter,
             importer_id,
             importer_iso,
             importer,
             origin,
             purpose_id,
             purpose,
             source_id,
             source,
             import_permits,
             export_permits,
             origin_permits,
             ifs_permits,
             import_permit,
             export_permit,
             origin_permit,
             ifs_permit,
             rank_id,
             rank_name,
             issue_type::text
      FROM trade_shipments_mandatory_quotas_mview

      UNION ALL

      SELECT id, year, appendix, taxon_concept_id,
             author_year,
             name_status,
             taxon_name,
             phylum_id,
             class_id,
             class_name,
             order_id,
             order_name,
             family_id,
             family_name,
             genus_id,
             genus_name,
             term_id,
             term,
             importer_reported_quantity,
             exporter_reported_quantity,
             unit_id,
             unit,
             exporter_id,
             exporter_iso,
             exporter,
             importer_id,
             importer_iso,
             importer,
             origin,
             purpose_id,
             purpose,
             source_id,
             source,
             import_permits,
             export_permits,
             origin_permits,
             ifs_permits,
             import_permit,
             export_permit,
             origin_permit,
             ifs_permit,
             rank_id,
             rank_name,
             issue_type::text
      FROM trade_shipments_cites_suspensions_mview
    );
  END;
  $$;


--
-- Name: rebuild_not_listed_status_for_designation_and_node(public.designations, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_not_listed_status_for_designation_and_node(designation public.designations, node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      exception_id int;
      fully_covered_flag varchar;
      not_listed_flag varchar;
      status_original_flag varchar;
      status_flag varchar;
      listing_original_flag varchar;
      listing_flag varchar;
      listed_ancestors_flag varchar;
      ancestor_node_ids INTEGER[];
      show_flag varchar;
    BEGIN
    SELECT id INTO exception_id FROM change_types
      WHERE designation_id = designation.id AND name = 'EXCEPTION';

    fully_covered_flag := LOWER(designation.name) || '_fully_covered';
    not_listed_flag := LOWER(designation.name) || '_not_listed';
    status_original_flag := LOWER(designation.name) || '_status_original';
    status_flag = LOWER(designation.name) || '_status';
    listing_original_flag := LOWER(designation.name) || '_listing_original';
    listing_flag := LOWER(designation.name) || '_listing';
    listed_ancestors_flag := LOWER(designation.name) || '_listed_ancestors';
    show_flag := LOWER(designation.name) || '_show';

    -- reset the fully_covered flag (so we start clear)
    -- also set the listed ancestors flag to true
    UPDATE taxon_concepts SET listing = listing - ARRAY[not_listed_flag] ||
      hstore(fully_covered_flag, 't') ||
      hstore(listed_ancestors_flag, 't')
    WHERE
      taxonomy_id = designation.taxonomy_id AND
      CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END;

    -- set the fully_covered flag to false for taxa
    -- that were deleted or excluded from the listing
    WITH deleted_or_excluded AS (
      SELECT id,
        CASE
          WHEN (listing->status_flag)::VARCHAR = 'DELETED'
            OR (listing->status_flag)::VARCHAR = 'EXCLUDED'
          THEN 't'
          ELSE 'f'
        END AS not_listed
      FROM taxon_concepts
      WHERE
        taxonomy_id = designation.taxonomy_id
        AND listing->status_flag IN ('DELETED', 'EXCLUDED')
        AND CASE WHEN node_id IS NOT NULL THEN id = node_id ELSE TRUE END
    )
    UPDATE taxon_concepts
    SET listing = listing ||
      hstore(fully_covered_flag, 'f') ||
      hstore(listing_original_flag, 'NC')
    FROM deleted_or_excluded
    WHERE taxon_concepts.id = deleted_or_excluded.id;

    -- set the fully_covered flag to false for taxa
    -- that only have some populations listed

    WITH incomplete_distributions AS (
      SELECT taxon_concept_id AS id FROM listing_distributions
      INNER JOIN listing_changes
        ON listing_changes.id = listing_distributions.listing_change_id
      INNER JOIN change_types
        ON change_types.id = listing_changes.change_type_id
        AND change_types.designation_id = designation.id
        AND change_types.name = 'ADDITION'
      WHERE is_current = 't'
        AND NOT listing_distributions.is_party
        AND CASE WHEN node_id IS NOT NULL THEN listing_changes.taxon_concept_id = node_id ELSE TRUE END

      EXCEPT

      SELECT taxon_concept_id AS id FROM listing_distributions
      RIGHT JOIN listing_changes
        ON listing_changes.id = listing_distributions.listing_change_id
      INNER JOIN taxon_concepts
        ON taxon_concepts.id = listing_changes.taxon_concept_id
      WHERE is_current = 't' AND taxonomy_id = designation.taxonomy_id
        AND (listing_distributions.id IS NULL OR listing_distributions.is_party)
    )
    UPDATE taxon_concepts
    SET listing = listing || hstore(fully_covered_flag, 'f')
    FROM incomplete_distributions
    WHERE taxon_concepts.id = incomplete_distributions.id;

    -- set the fully_covered flag to false for taxa
    -- that do not have a cascaded listing
    -- also set the 'has_listed_ancestors' flag to false

    WITH RECURSIVE taxa_without_cascaded_listing AS (
      SELECT id
      FROM taxon_concepts
      WHERE taxonomy_id = designation.taxonomy_id
        AND parent_id IS NULL

      UNION

      SELECT hi.id
      FROM taxon_concepts hi
      JOIN taxa_without_cascaded_listing
      ON taxa_without_cascaded_listing.id = hi.parent_id
      AND NOT (hi.listing->status_original_flag)::BOOLEAN
    )
    UPDATE taxon_concepts
    SET listing = listing || hstore(fully_covered_flag, 'f') || hstore(listed_ancestors_flag, 'f')
    FROM taxa_without_cascaded_listing
    WHERE taxon_concepts.id = taxa_without_cascaded_listing.id
      AND NOT (listing->status_original_flag)::BOOLEAN
      AND CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;

    -- propagate the fully_covered flag to ancestors
    -- update the nc flag for all that are not fully covered
    WITH RECURSIVE not_fully_covered AS (
      SELECT id, parent_id
      FROM taxon_concepts
      WHERE taxonomy_id = designation.taxonomy_id
        AND NOT (listing->fully_covered_flag)::BOOLEAN
        AND CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END

      UNION

      SELECT h.id, h.parent_id
      FROM taxon_concepts h
      JOIN not_fully_covered
      ON h.id = not_fully_covered.parent_id
    )
    UPDATE taxon_concepts
    SET listing = listing ||
      hstore(fully_covered_flag, 'f') || hstore(not_listed_flag, 'NC')
    FROM not_fully_covered
    WHERE taxon_concepts.id = not_fully_covered.id;

    -- update the nc flags for all leftovers
    UPDATE taxon_concepts
    SET listing = listing ||
    hstore(not_listed_flag, 'NC') || hstore(listing_original_flag, 'NC') || hstore(listing_flag, 'NC')
    WHERE taxonomy_id = designation.taxonomy_id
      AND (listing->status_flag)::VARCHAR IS NULL
      AND CASE WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id ELSE TRUE END;

    IF node_id IS NOT NULL THEN
      ancestor_node_ids := ancestor_node_ids_for_node(node_id);
    END IF;

    -- set designation_show to true for all taxa except:
    -- implicitly listed subspecies
    -- hybrids
    -- excluded and not listed taxa
    -- higher taxa (incl. genus) that do not have a cascaded listing
    UPDATE taxon_concepts SET listing = listing ||
    CASE
      WHEN name_status = 'H'
      THEN hstore(show_flag, 'f')
      WHEN (
        data->'rank_name' = 'SUBSPECIES'
        OR data->'rank_name' = 'VARIETY'
      )
      AND listing->status_flag = 'LISTED'
      AND (listing->status_original_flag)::BOOLEAN = FALSE
      THEN hstore(show_flag, 'f')
      WHEN NOT (
        data->'rank_name' = 'SPECIES'
      )
      AND listing->status_flag = 'LISTED'
      AND (listing->status_original_flag)::BOOLEAN = FALSE
      AND (listing->listed_ancestors_flag)::BOOLEAN = FALSE
      THEN hstore(show_flag, 'f')
      WHEN listing->status_flag = 'EXCLUDED'
      THEN hstore(show_flag, 't')
      WHEN listing->status_flag = 'DELETED'
        AND (listing->'not_really_deleted')::BOOLEAN = TRUE
      THEN hstore(show_flag, 't')
      WHEN listing->status_flag = 'DELETED'
        OR (listing->status_flag)::VARCHAR IS NULL
      THEN hstore(show_flag, 'f')
      ELSE hstore(show_flag, 't')
    END
    WHERE taxonomy_id = designation.taxonomy_id AND
    CASE WHEN node_id IS NOT NULL THEN id IN (SELECT id FROM UNNEST(ancestor_node_ids)) ELSE TRUE END;

    END;
  $$;


--
-- Name: rebuild_taxon_concepts_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxon_concepts_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP TABLE IF EXISTS taxon_concepts_mview_tmp CASCADE;

    RAISE INFO 'Creating taxon concepts materialized view (tmp)';
    CREATE TABLE taxon_concepts_mview_tmp AS
    SELECT *,
      FALSE AS dirty,
      NULL::TIMESTAMP WITH TIME ZONE AS expiry
    FROM taxon_concepts_view;

    RAISE INFO 'Creating indexes on taxon concepts materialized view (tmp)';
    CREATE INDEX idx_mtaxon_id_tmp               ON taxon_concepts_mview_tmp (id);
    CREATE INDEX idx_mtaxon_parent_id_tmp        ON taxon_concepts_mview_tmp (parent_id);
    CREATE INDEX idx_mtaxon_kingdom_position_tmp ON taxon_concepts_mview_tmp (taxonomy_is_cites_eu, cites_listed, kingdom_position);
    CREATE INDEX idx_mtaxon_cms_csv_tmp          ON taxon_concepts_mview_tmp (cms_show, name_status, cms_listing_original, taxonomy_is_cites_eu, rank_name); -- cms csv download
    CREATE INDEX idx_mtaxon_cites_csv_tmp        ON taxon_concepts_mview_tmp (cites_show, name_status, cites_listing_original, taxonomy_is_cites_eu, rank_name); -- cites csv download
    CREATE INDEX idx_mtaxon_eu_csv_tmp           ON taxon_concepts_mview_tmp (eu_show, name_status, eu_listing_original, taxonomy_is_cites_eu, rank_name); -- eu csv download
    CREATE INDEX idx_mtaxon_id_countries_ids_tmp ON taxon_concepts_mview_tmp USING GIN (countries_ids_ary);

    RAISE INFO 'Swapping taxon concepts materialized view';

    DROP TABLE IF EXISTS taxon_concepts_mview CASCADE;
    ALTER TABLE taxon_concepts_mview_tmp RENAME TO taxon_concepts_mview;

    ALTER INDEX idx_mtaxon_id_tmp               RENAME TO idx_mtaxon_id;
    ALTER INDEX idx_mtaxon_parent_id_tmp        RENAME TO idx_mtaxon_parent_id;
    ALTER INDEX idx_mtaxon_kingdom_position_tmp RENAME TO idx_mtaxon_kingdom_position;
    ALTER INDEX idx_mtaxon_cms_csv_tmp          RENAME TO idx_mtaxon_cms_csv;
    ALTER INDEX idx_mtaxon_cites_csv_tmp        RENAME TO idx_mtaxon_cites_csv;
    ALTER INDEX idx_mtaxon_eu_csv_tmp           RENAME TO idx_mtaxon_eu_csv;
    ALTER INDEX idx_mtaxon_id_countries_ids_tmp RENAME TO idx_mtaxon_id_countries_ids;

    PERFORM rebuild_auto_complete_taxon_concepts_mview();
  END;
  $$;


--
-- Name: FUNCTION rebuild_taxon_concepts_mview(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_taxon_concepts_mview() IS 'Procedure to rebuild taxon concepts managed table in the database.';


--
-- Name: rebuild_taxonomic_positions_for_animalia_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxonomic_positions_for_animalia_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    -- update taxonomic position
    WITH RECURSIVE self_and_descendants AS (
      SELECT h.id, COALESCE(h.taxonomic_position, '') AS ancestors_taxonomic_position
      FROM taxon_concepts h
      INNER JOIN ranks ON h.rank_id = ranks.id
      WHERE h.id = node_id

      UNION

      SELECT hi.id,
      CASE
        WHEN (ranks.fixed_order) THEN hi.taxonomic_position
        -- use generous zero padding to accommodate for orchidacea (30 thousand species in about 900 genera)
        ELSE (self_and_descendants.ancestors_taxonomic_position || '.' || LPAD(
          (ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY full_name)::VARCHAR(64)),
          5,
          '0'
        ))::VARCHAR(255)
      END
      FROM self_and_descendants
      JOIN taxon_concepts hi ON hi.parent_id = self_and_descendants.id
      INNER JOIN ranks ON hi.rank_id = ranks.id
    )
    UPDATE taxon_concepts
    SET
    taxonomic_position = ancestors_taxonomic_position
    FROM self_and_descendants
    WHERE taxon_concepts.id = self_and_descendants.id;

  END;
  $$;


--
-- Name: rebuild_taxonomic_positions_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxonomic_positions_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    ancestor_kingdom_name text;
    kingdom_node_id integer;
    ancestor_node_id integer;
    ancestor_rank_name text;
  BEGIN
    IF node_id IS NOT NULL THEN
      -- find kingdom for this node
      -- find the closest ancestor with taxonomic position set
      WITH RECURSIVE self_and_ancestors AS (
          SELECT h.id, h.parent_id, h.taxonomic_position, 1 AS level,
            h.data->'kingdom_name' AS kingdom_name,
            h.data->'rank_name' AS rank_name
          FROM taxon_concepts h
          WHERE id = node_id

          UNION

          SELECT hi.id, hi.parent_id, hi.taxonomic_position, level + 1,
            hi.data->'kingdom_name', hi.data->'rank_name'
          FROM taxon_concepts hi
          JOIN self_and_ancestors ON self_and_ancestors.parent_id = hi.id
      )
      SELECT id, rank_name, kingdom_name INTO ancestor_node_id, ancestor_rank_name, ancestor_kingdom_name
      FROM self_and_ancestors
      WHERE taxonomic_position IS NOT NULL AND id != node_id
      ORDER BY level
      LIMIT 1;
      -- and rebuild animalia or plantae subtree
      IF ancestor_kingdom_name = 'Animalia' THEN
        PERFORM rebuild_taxonomic_positions_for_animalia_node(ancestor_node_id);
      ELSE
        PERFORM rebuild_taxonomic_positions_for_plantae_node(ancestor_node_id, ancestor_rank_name);
      END IF;
    ELSE
      -- rebuild animalia and plantae trees separately
      -- CITES Animalia
      SELECT taxon_concepts.id INTO kingdom_node_id
      FROM taxon_concepts
      JOIN taxonomies
      ON taxonomies.id = taxon_concepts.taxonomy_id
      AND taxonomies.name = 'CITES_EU'
      WHERE full_name = 'Animalia';
      PERFORM rebuild_taxonomic_positions_for_animalia_node(kingdom_node_id);
      -- CMS Animalia
      SELECT taxon_concepts.id INTO kingdom_node_id
      FROM taxon_concepts
      JOIN taxonomies
      ON taxonomies.id = taxon_concepts.taxonomy_id
      AND taxonomies.name = 'CMS'
      WHERE full_name = 'Animalia';
      PERFORM rebuild_taxonomic_positions_for_animalia_node(kingdom_node_id);
      -- CITES Plantae
      SELECT taxon_concepts.id INTO kingdom_node_id
      FROM taxon_concepts
      JOIN taxonomies
      ON taxonomies.id = taxon_concepts.taxonomy_id
      AND taxonomies.name = 'CITES_EU'
      WHERE full_name = 'Plantae';
      PERFORM rebuild_taxonomic_positions_for_plantae_node(kingdom_node_id, 'KINGDOM');
    END IF;

  END;
  $$;


--
-- Name: rebuild_taxonomic_positions_for_plantae_node(integer, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxonomic_positions_for_plantae_node(node_id integer, rank_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$

  BEGIN
    IF rank_name IN ('KINGDOM', 'PHYLUM', 'CLASS', 'ORDER', 'FAMILY')  THEN
      -- rebuild higher taxonomic ranks
      WITH plantae_root AS (
        SELECT taxon_concepts.id, taxonomic_position
        FROM taxon_concepts
        JOIN taxonomies
        ON taxonomies.id = taxon_concepts.taxonomy_id
        AND taxonomies.name = 'CITES_EU'
        WHERE full_name = 'Plantae'
      ), missing_higher_taxa AS (
        UPDATE taxon_concepts
        SET taxonomic_position = plantae_root.taxonomic_position
        FROM plantae_root
        WHERE plantae_root.id = (taxon_concepts.data->'kingdom_id')::INT
        AND data->'rank_name' IN ('PHYLUM', 'CLASS', 'ORDER')
      ), families AS (
        SELECT taxon_concepts.id, plantae_root.taxonomic_position || '.' || LPAD(
          (
            ROW_NUMBER()
            OVER (PARTITION BY rank_id ORDER BY full_name)::VARCHAR(64)
          )::VARCHAR(64),
          5,
          '0'
        ) AS taxonomic_position
        FROM taxon_concepts
        JOIN plantae_root ON plantae_root.id = (taxon_concepts.data->'kingdom_id')::INT
        WHERE data->'rank_name' = 'FAMILY'
      )
      UPDATE taxon_concepts
      SET taxonomic_position = families.taxonomic_position
      FROM families
      WHERE families.id = taxon_concepts.id;
    END IF;

    -- update taxonomic position
    WITH RECURSIVE self_and_descendants AS (
      SELECT h.id,
        COALESCE(h.taxonomic_position, '') AS ancestors_taxonomic_position
      FROM taxon_concepts h
      INNER JOIN ranks ON h.rank_id = ranks.id
      WHERE h.id = node_id

      UNION

      SELECT hi.id,
      CASE
        WHEN hi.data->'rank_name' IN ('PHYLUM', 'CLASS', 'ORDER', 'FAMILY')
        THEN hi.taxonomic_position
        -- use generous zero padding to accommodate for orchidacea (30 thousand species in about 900 genera)
        ELSE (self_and_descendants.ancestors_taxonomic_position || '.' || LPAD(
          (ROW_NUMBER() OVER (PARTITION BY parent_id ORDER BY full_name)::VARCHAR(64)),
          5,
          '0'
        ))::VARCHAR(255)
      END
      FROM self_and_descendants
      JOIN taxon_concepts hi ON hi.parent_id = self_and_descendants.id
      INNER JOIN ranks ON hi.rank_id = ranks.id
    )
    UPDATE taxon_concepts
    SET
    taxonomic_position = ancestors_taxonomic_position
    FROM self_and_descendants
    WHERE taxon_concepts.id = self_and_descendants.id
    AND taxon_concepts.data->'rank_name' NOT IN ('PHYLUM', 'CLASS', 'ORDER', 'FAMILY');

  END;
  $$;


--
-- Name: rebuild_taxonomy(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxonomy() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM rebuild_taxonomy_for_node(NULL);
    REFRESH MATERIALIZED VIEW taxon_concepts_and_ancestors_mview;
  END;
  $$;


--
-- Name: FUNCTION rebuild_taxonomy(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_taxonomy() IS '
Procedure to rebuild the computed full name, rank and ancestor names fields
 in taxon_concepts.';


--
-- Name: rebuild_taxonomy_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxonomy_for_node(node_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    -- update rank name
    UPDATE taxon_concepts
    SET data = COALESCE(taxon_concepts.data, ''::HSTORE) || HSTORE('rank_name', ranks.name)
    FROM taxon_concepts q
    JOIN ranks ON q.rank_id = ranks.id
    WHERE taxon_concepts.id = q.id
      AND CASE
        WHEN node_id IS NOT NULL THEN taxon_concepts.id = node_id
        ELSE TRUE
      END;

    -- update full name
    WITH RECURSIVE q AS (
      SELECT h.id, ranks.name AS rank_name, ancestors_names(h.id) AS ancestors_names
      FROM taxon_concepts h
      INNER JOIN taxon_names ON h.taxon_name_id = taxon_names.id
      INNER JOIN ranks ON h.rank_id = ranks.id
      WHERE name_status IN ('A', 'N') AND
        CASE
        WHEN node_id IS NOT NULL THEN h.id = node_id
        ELSE h.parent_id IS NULL
        END

      UNION

      SELECT hi.id, ranks.name,
      ancestors_names ||
      hstore(LOWER(ranks.name) || '_name', taxon_names.scientific_name) ||
      hstore(LOWER(ranks.name) || '_id', (hi.id)::VARCHAR)
      FROM q
      JOIN taxon_concepts hi
      ON hi.parent_id = q.id AND hi.name_status IN ('A', 'N')
      INNER JOIN taxon_names ON hi.taxon_name_id = taxon_names.id
      INNER JOIN ranks ON hi.rank_id = ranks.id
    )
    UPDATE taxon_concepts
    SET
    data = COALESCE(data, ''::HSTORE) || ancestors_names
    FROM q
    WHERE taxon_concepts.id = q.id;

    -- do not recalculate position for individual node
    -- as it takes too long to run on insert trigger
    IF node_id IS NULL THEN
      PERFORM rebuild_taxonomic_positions_for_node(node_id);
    END IF;

  END;
  $$;


--
-- Name: rebuild_taxonomy_tmp_taxon_concepts_mview(public.taxonomies); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_taxonomy_tmp_taxon_concepts_mview(taxonomy public.taxonomies) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$
  DECLARE
    tc_table_name TEXT;
    sql TEXT;
  BEGIN
    EXECUTE 'CREATE OR REPLACE VIEW ' || LOWER(taxonomy.name) || '_taxon_concepts_and_ancestors_view AS
    SELECT * FROM taxon_concepts_and_ancestors_mview
    WHERE taxonomy_id = ' || taxonomy.id;

    SELECT LOWER(taxonomy.name) || '_tmp_taxon_concepts_mview' INTO tc_table_name;

    EXECUTE 'DROP TABLE IF EXISTS ' || tc_table_name || ' CASCADE';

    sql := 'CREATE TEMP TABLE ' || tc_table_name || ' AS
    SELECT taxon_concepts.id,
    (data->''kingdom_id'')::INTEGER AS kingdom_id,
    (data->''phylum_id'')::INTEGER AS phylum_id,
    (data->''class_id'')::INTEGER AS class_id,
    (data->''order_id'')::INTEGER AS order_id,
    (data->''family_id'')::INTEGER AS family_id,
    (data->''subfamily_id'')::INTEGER AS subfamily_id,
    (data->''genus_id'')::INTEGER AS genus_id,
    (data->''species_id'')::INTEGER AS species_id,
    (data->''subspecies_id'')::INTEGER AS subspecies_id,
    countries_ids_ary
    FROM taxon_concepts
    LEFT JOIN taxonomies
    ON taxonomies.id = taxon_concepts.taxonomy_id
    LEFT JOIN (
      SELECT taxon_concepts.id AS taxon_concept_id_cnt,
      ARRAY(
        SELECT *
        FROM UNNEST(ARRAY_AGG(geo_entities.id ORDER BY geo_entities.name_en)) s
        WHERE s IS NOT NULL
      ) AS countries_ids_ary
      FROM taxon_concepts
      LEFT JOIN distributions
      ON "distributions"."taxon_concept_id" = "taxon_concepts"."id"
      LEFT JOIN geo_entities
      ON distributions.geo_entity_id = geo_entities.id
      GROUP BY taxon_concepts.id
    ) countries_ids ON taxon_concepts.id = countries_ids.taxon_concept_id_cnt
    WHERE taxonomy_id=$1';

    EXECUTE sql USING taxonomy.id;

    EXECUTE 'CREATE UNIQUE INDEX ON ' || tc_table_name || ' (id)';
  END
  $_$;


--
-- Name: FUNCTION rebuild_taxonomy_tmp_taxon_concepts_mview(taxonomy public.taxonomies); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.rebuild_taxonomy_tmp_taxon_concepts_mview(taxonomy public.taxonomies) IS 'Procedure to create a helper table with all taxon ancestors and aggregated distributions in a given taxonomy.';


--
-- Name: rebuild_touch_cites_taxon_concepts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_touch_cites_taxon_concepts() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM rebuild_touch_designation_taxon_concepts('CITES');
  END;
  $$;


--
-- Name: rebuild_touch_cms_taxon_concepts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_touch_cms_taxon_concepts() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM rebuild_touch_designation_taxon_concepts('CMS');
  END;
  $$;


--
-- Name: rebuild_touch_designation_taxon_concepts(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_touch_designation_taxon_concepts(designation_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    sql TEXT;
  BEGIN
    sql := 'WITH max_timestamp AS (
      SELECT lc.taxon_concept_id, GREATEST(tc.updated_at, MAX(lc.updated_at), tc.dependents_updated_at) AS updated_at
      FROM ' || designation_name || '_listing_changes_mview lc
      JOIN taxon_concepts_mview tc
      ON lc.taxon_concept_id = tc.id
      GROUP BY taxon_concept_id, tc.updated_at, tc.dependents_updated_at
    )
    UPDATE taxon_concepts
    SET touched_at = max_timestamp.updated_at
    FROM max_timestamp
    WHERE max_timestamp.taxon_concept_id = taxon_concepts.id
    AND (
      taxon_concepts.touched_at < max_timestamp.updated_at
      OR taxon_concepts.touched_at IS NULL
    );';
    EXECUTE sql;
  END;
  $$;


--
-- Name: rebuild_touch_eu_taxon_concepts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_touch_eu_taxon_concepts() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM rebuild_touch_designation_taxon_concepts('EU');
  END;
  $$;


--
-- Name: rebuild_touch_taxon_concepts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_touch_taxon_concepts() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    WITH max_timestamp AS (
      SELECT lc.taxon_concept_id, GREATEST(tc.updated_at, MAX(lc.updated_at)) AS updated_at
      FROM listing_changes_mview lc
      JOIN taxon_concepts_mview tc
      ON lc.taxon_concept_id = tc.id
      GROUP BY taxon_concept_id, tc.updated_at
    )
    UPDATE taxon_concepts
    SET touched_at = max_timestamp.updated_at
    FROM max_timestamp
    WHERE max_timestamp.taxon_concept_id = taxon_concepts.id
    AND (
      taxon_concepts.touched_at < max_timestamp.updated_at
      OR taxon_concepts.touched_at IS NULL
    );
  END;
  $$;


--
-- Name: rebuild_trade_plus_complete_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_trade_plus_complete_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP MATERIALIZED VIEW IF EXISTS trade_plus_complete_mview CASCADE;
    -- Below is used for child taxa queries
    RAISE INFO 'Refreshing all taxon concepts and ancestors materialized view';
    REFRESH MATERIALIZED VIEW all_taxon_concepts_and_ancestors_mview;

    RAISE INFO 'Creating Trade Plus complete materialized view';
    CREATE MATERIALIZED VIEW trade_plus_complete_mview AS
    SELECT *
    FROM trade_plus_complete_view;

    PERFORM create_trade_plus_complete_mview_indexes();
  END
  $$;


--
-- Name: rebuild_trade_shipments_appendix_i_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_trade_shipments_appendix_i_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP MATERIALIZED VIEW IF EXISTS trade_shipments_appendix_i_mview CASCADE;

    RAISE INFO 'Creating appendix I materialized view';
    CREATE MATERIALIZED VIEW trade_shipments_appendix_i_mview AS
    SELECT *
    FROM trade_shipments_appendix_i_view;
  END;
  $$;


--
-- Name: rebuild_trade_shipments_cites_suspensions_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_trade_shipments_cites_suspensions_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP MATERIALIZED VIEW IF EXISTS trade_shipments_cites_suspensions_mview CASCADE;
    RAISE INFO 'Creating CITES suspensions materialized view';
    CREATE MATERIALIZED VIEW trade_shipments_cites_suspensions_mview AS
    SELECT *
    FROM trade_shipments_cites_suspensions_view;

  END;
  $$;


--
-- Name: rebuild_trade_shipments_mandatory_quotas_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_trade_shipments_mandatory_quotas_mview() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    DROP MATERIALIZED VIEW IF EXISTS trade_shipments_mandatory_quotas_mview CASCADE;
    RAISE INFO 'Creating mandatory quotas materialized view';
    CREATE MATERIALIZED VIEW trade_shipments_mandatory_quotas_mview AS
    SELECT *
    FROM trade_shipments_mandatory_quotas_view;
  END;
  $$;


--
-- Name: rebuild_valid_hybrid_appdx_year_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_valid_hybrid_appdx_year_mview() RETURNS void
    LANGUAGE sql
    AS $$
  WITH hybrids AS (
    SELECT other_taxon_concept_id AS hybrid_id,
    taxon_concept_id
    FROM taxon_relationships rel
    JOIN taxon_relationship_types rel_type
    ON rel.taxon_relationship_type_id = rel_type.id AND rel_type.name = 'HAS_HYBRID'
  )
  INSERT INTO valid_taxon_concept_appendix_year_mview (
    taxon_concept_id, appendix, effective_from, effective_to
  )
  SELECT hybrids.hybrid_id, appendix, effective_from, effective_to
  FROM valid_taxon_concept_appendix_year_mview intervals
  JOIN hybrids
  ON hybrids.taxon_concept_id = intervals.taxon_concept_id;
$$;


--
-- Name: rebuild_valid_taxon_concept_annex_year_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_valid_taxon_concept_annex_year_mview() RETURNS void
    LANGUAGE sql
    AS $$
    SELECT * FROM rebuild_valid_taxon_concept_appendix_year_designation_mview('EU');
    SELECT * FROM rebuild_ancestor_valid_tc_appdx_year_designation_mview('EU');
$$;


--
-- Name: rebuild_valid_taxon_concept_appendix_year_designation_mview(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_valid_taxon_concept_appendix_year_designation_mview(designation_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
  DECLARE
    mview_name TEXT;
    appendix TEXT;
  BEGIN
    IF designation_name = 'EU' THEN
      appendix := 'annex';
    ELSE
      appendix := 'appendix';
    END IF;
    mview_name := 'valid_taxon_concept_' || appendix || '_year_mview';

    EXECUTE 'DROP TABLE IF EXISTS ' || designation_name || '_listing_changes_intervals_mview;';

    EXECUTE 'CREATE TEMP TABLE ' || designation_name || '_listing_changes_intervals_mview AS
    WITH additions_and_deletions AS (
      SELECT change_type_name, effective_at, taxon_concept_id,
      species_listing_name, species_listing_id, party_id
      FROM ' || designation_name || '_listing_changes_mview
      WHERE change_type_name = ''ADDITION'' OR change_type_name = ''DELETION''
    ), additions AS (
      SELECT change_type_name, effective_at, taxon_concept_id,
      species_listing_name, species_listing_id, party_id
      FROM additions_and_deletions
      WHERE change_type_name = ''ADDITION''
    )
    SELECT a.taxon_concept_id, a.species_listing_name,
    a.effective_at AS effective_from,
    MIN(ad.effective_at) AS effective_to
    FROM additions a
    LEFT JOIN additions_and_deletions ad
    ON a.taxon_concept_id = ad.taxon_concept_id
    AND a.species_listing_id = ad.species_listing_id
    AND (a.party_id = ad.party_id OR ad.party_id IS NULL)
    AND a.effective_at < ad.effective_at
    GROUP BY a.taxon_concept_id, a.species_listing_name, a.effective_at';

    -- drop indexes on the mview
    IF designation_name = 'CITES' THEN
      EXECUTE 'DROP INDEX IF EXISTS ' || mview_name || '_year_idx';
    END IF;
    EXECUTE 'DROP INDEX IF EXISTS ' || mview_name || '_idx';
    -- truncate the mview
    EXECUTE 'TRUNCATE ' || mview_name;

    -- the following interval-merging query adapted from Solution 2
    -- http://blog.developpez.com/sqlpro/p9821/langage-sql-norme/agregation_d_intervalles_en_sql_1

    EXECUTE '
    WITH unmerged_intervals AS (
      SELECT F.effective_from, L.effective_to, F.taxon_concept_id, F.species_listing_name
      FROM ' || designation_name || '_listing_changes_intervals_mview AS F
      JOIN ' || designation_name || '_listing_changes_intervals_mview AS L
      ON (F.effective_to <= L.effective_to OR L.effective_to IS NULL)
        AND F.taxon_concept_id = L.taxon_concept_id
        AND F.species_listing_name = L.species_listing_name
      JOIN ' || designation_name || '_listing_changes_intervals_mview AS E
      ON F.taxon_concept_id = E.taxon_concept_id
        AND F.species_listing_name = E.species_listing_name
      GROUP  BY F.effective_from, L.effective_to,  F.taxon_concept_id, F.species_listing_name
      HAVING COUNT(
        CASE
          WHEN (E.effective_from < F.effective_from AND (F.effective_from <= E.effective_to OR E.effective_to IS NULL))
            OR (E.effective_from <= L.effective_to AND (L.effective_to < E.effective_to OR E.effective_to IS NULL))
          THEN 1
        END
      ) = 0
    )
    INSERT INTO ' || mview_name || '
    (taxon_concept_id, ' || appendix || ', effective_from, effective_to)
    SELECT taxon_concept_id, species_listing_name,
    effective_from, MIN(effective_to) AS effective_to
    FROM   unmerged_intervals
    GROUP  BY taxon_concept_id, species_listing_name, effective_from';

    IF designation_name = 'CITES' THEN
      EXECUTE 'CREATE INDEX ' || mview_name || '_year_idx ON ' || mview_name || '(
        taxon_concept_id,
        DATE_PART(''year'', effective_from), DATE_PART(''year'', effective_to), ' ||
        appendix || '
      );';
    END IF;
    EXECUTE 'CREATE INDEX ' || mview_name || '_idx ON ' || mview_name || '
    (taxon_concept_id, effective_from, effective_to, ' || appendix || ');';
  END;
$$;


--
-- Name: rebuild_valid_taxon_concept_appendix_year_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_valid_taxon_concept_appendix_year_mview() RETURNS void
    LANGUAGE sql
    AS $$
    SELECT * FROM rebuild_valid_taxon_concept_appendix_year_designation_mview('CITES');
    SELECT * FROM rebuild_ancestor_valid_tc_appdx_year_designation_mview('CITES');
    SELECT * FROM rebuild_valid_tc_appdx_N_year_mview();
    SELECT * FROM rebuild_valid_hybrid_appdx_year_mview();
$$;


--
-- Name: rebuild_valid_tc_appdx_n_year_mview(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rebuild_valid_tc_appdx_n_year_mview() RETURNS void
    LANGUAGE sql
    AS $$

  WITH unmerged_eu_intervals AS (
    SELECT F.effective_from, L.effective_to, F.taxon_concept_id
    FROM valid_taxon_concept_annex_year_mview AS F
    JOIN valid_taxon_concept_annex_year_mview AS L
    ON (F.effective_to <= L.effective_to OR L.effective_to IS NULL)
      AND F.taxon_concept_id = L.taxon_concept_id
    JOIN valid_taxon_concept_annex_year_mview AS E
    ON F.taxon_concept_id = E.taxon_concept_id
    GROUP  BY F.effective_from, L.effective_to,  F.taxon_concept_id
    HAVING COUNT(
      CASE
        WHEN (E.effective_from < F.effective_from AND (F.effective_from <= E.effective_to OR E.effective_to IS NULL))
          OR (E.effective_from <= L.effective_to AND (L.effective_to < E.effective_to OR E.effective_to IS NULL))
        THEN 1
      END
    ) = 0
  ), eu_intervals AS (
    SELECT taxon_concept_id, effective_from, MIN(effective_to) AS effective_to
    FROM   unmerged_eu_intervals
    GROUP  BY taxon_concept_id, effective_from
  ), unmerged_cites_intervals AS (
    SELECT F.effective_from, L.effective_to, F.taxon_concept_id
    FROM valid_taxon_concept_appendix_year_mview AS F
    JOIN valid_taxon_concept_appendix_year_mview AS L
    ON (F.effective_to <= L.effective_to OR L.effective_to IS NULL)
      AND F.taxon_concept_id = L.taxon_concept_id
    JOIN valid_taxon_concept_appendix_year_mview AS E
    ON F.taxon_concept_id = E.taxon_concept_id
    GROUP  BY F.effective_from, L.effective_to,  F.taxon_concept_id
    HAVING COUNT(
      CASE
        WHEN (E.effective_from < F.effective_from AND (F.effective_from <= E.effective_to OR E.effective_to IS NULL))
          OR (E.effective_from <= L.effective_to AND (L.effective_to < E.effective_to OR E.effective_to IS NULL))
        THEN 1
      END
    ) = 0
  ), cites_intervals AS (
    SELECT taxon_concept_id, effective_from, MIN(effective_to) AS effective_to,
    daterange(effective_from::date, MIN(effective_to)::date, '[]'::text) AS listing_interval
    FROM   unmerged_cites_intervals
    GROUP  BY taxon_concept_id, effective_from
  ), cites_intervals_with_lag AS (
    SELECT taxon_concept_id, listing_interval AS current,
    LAG(listing_interval) OVER (PARTITION BY taxon_concept_id ORDER BY LOWER(listing_interval)) AS previous
    FROM cites_intervals
  ), cites_intervals_with_lead AS (
    SELECT taxon_concept_id, listing_interval AS current,
    LEAD(listing_interval) OVER (PARTITION BY taxon_concept_id ORDER BY LOWER(listing_interval)) AS next
    FROM cites_intervals
  ), cites_gaps (taxon_concept_id, gap_effective_from, gap_effective_to) AS (
    SELECT taxon_concept_id, UPPER(previous), LOWER(current) FROM cites_intervals_with_lag
    UNION
    SELECT taxon_concept_id, UPPER(current), LOWER(next) FROM cites_intervals_with_lead
    WHERE UPPER(current) IS NOT NULL
  )
  INSERT INTO valid_taxon_concept_appendix_year_mview (taxon_concept_id, appendix, effective_from, effective_to)
  SELECT
    cites_gaps.taxon_concept_id, 'N',
    GREATEST(COALESCE(gap_effective_from, effective_from), effective_from) effective_from,
    LEAST(COALESCE(gap_effective_to, effective_to), effective_to) AS effective_to
  FROM cites_gaps
  JOIN eu_intervals
  ON eu_intervals.taxon_concept_id = cites_gaps.taxon_concept_id
  AND (
    -- gap is right closed
    gap_effective_to IS NOT NULL
    AND effective_from < gap_effective_to
    OR
    -- gap is right open
    gap_effective_to IS NULL
    AND (effective_to IS NULL OR effective_to > gap_effective_from)
  )
  UNION

  SELECT eu_intervals.taxon_concept_id, 'N', eu_intervals.effective_from, eu_intervals.effective_to
  FROM eu_intervals
  LEFT JOIN cites_gaps
  ON eu_intervals.taxon_concept_id = cites_gaps.taxon_concept_id
  WHERE cites_gaps.taxon_concept_id IS NULL;

$$;


--
-- Name: refresh_trade_sandbox_views(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.refresh_trade_sandbox_views() RETURNS void
    LANGUAGE plpgsql
    AS $$
  BEGIN
    PERFORM drop_trade_sandbox_views();
    PERFORM create_trade_sandbox_views();
    RETURN;
  END;
  $$;


--
-- Name: FUNCTION refresh_trade_sandbox_views(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.refresh_trade_sandbox_views() IS '
Drops all trade_sandbox_n_view views and creates them again. Useful when the
view definition has changed and has to be applied to existing views.';


--
-- Name: resolve_taxa_in_sandbox(character varying, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.resolve_taxa_in_sandbox(table_name character varying, shipment_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
  cites_taxonomy_id INTEGER;
  sql TEXT;
  updated_rows INTEGER;
BEGIN
  SELECT id INTO cites_taxonomy_id FROM taxonomies WHERE name = 'CITES_EU';
  IF NOT FOUND THEN
    RAISE NOTICE '[%] Taxonomy not found.', table_name;
    RETURN -1;
  END IF;

  sql :=  'WITH resolved_reported_taxa AS (
      SELECT DISTINCT ON (1)
        sandbox_table.id AS sandbox_shipment_id,
        taxon_concepts.id AS taxon_concept_id,
        taxon_concepts.full_name AS full_name
      FROM ' || table_name || ' sandbox_table
      JOIN taxon_concepts
        ON UPPER(taxon_concepts.full_name) =
          regexp_replace(
            UPPER(squish(sandbox_table.taxon_name)),
            E'' SPP(\.)?$'',
            ''''
          )
        AND taxonomy_id = ' || cites_taxonomy_id ||
      CASE WHEN shipment_id IS NOT NULL
        THEN ' WHERE sandbox_table.id = ' || shipment_id
        ELSE ''
      END ||
      '
      ORDER BY 1, CASE
        WHEN taxon_concepts.name_status = ''A'' THEN 1
        WHEN taxon_concepts.name_status = ''H'' THEN 2
        ELSE 3
      END
    ), resolved_taxa AS (
      SELECT DISTINCT ON (1)
        sandbox_shipment_id,
        resolved_reported_taxa.taxon_concept_id,
        resolved_reported_taxa.full_name AS reported_full_name,
        matched_taxon_concepts.id AS matched_taxon_concept_id
      FROM resolved_reported_taxa
      LEFT JOIN taxon_relationship_types
        ON taxon_relationship_types.name IN (''HAS_SYNONYM'', ''HAS_TRADE_NAME'')
      LEFT JOIN taxon_relationships
        ON taxon_relationships.other_taxon_concept_id = resolved_reported_taxa.taxon_concept_id
        AND taxon_relationships.taxon_relationship_type_id = taxon_relationship_types.id
      LEFT JOIN taxon_concepts matched_taxon_concepts
        ON matched_taxon_concepts.id = taxon_relationships.taxon_concept_id
        AND taxonomy_id = ' || cites_taxonomy_id ||
      '
      ORDER BY 1, CASE
        WHEN matched_taxon_concepts.name_status = ''A'' THEN 1
        WHEN matched_taxon_concepts.name_status = ''H'' THEN 2
        ELSE 3
      END
    )
    UPDATE ' || table_name ||
    '
    SET reported_taxon_concept_id = resolved_taxa.taxon_concept_id,
    taxon_name = resolved_taxa.reported_full_name,
    taxon_concept_id = CASE
      WHEN resolved_taxa.matched_taxon_concept_id IS NULL
      THEN resolved_taxa.taxon_concept_id
      ELSE resolved_taxa.matched_taxon_concept_id
    END
    FROM resolved_taxa
    WHERE ' || table_name || '.id = resolved_taxa.sandbox_shipment_id';

  EXECUTE sql;

  GET DIAGNOSTICS updated_rows = ROW_COUNT;
  -- RAISE INFO '[%] Updated % sandbox shipments', table_name, updated_rows;

  RETURN updated_rows;
END;
$_$;


--
-- Name: sanitize_taxon_name(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sanitize_taxon_name(text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT regexp_replace(
      upper(substring(SQUISH_NULL($1) from 1 for 1)) ||
      lower(substring(SQUISH_NULL($1) from 2 for length(SQUISH_NULL($1)))),
      E' spp(\.)?$', '');
  $_$;


--
-- Name: FUNCTION sanitize_taxon_name(text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.sanitize_taxon_name(text) IS 'Converts the case, removes spp. and squish_nulls the species name';


--
-- Name: sapi_rebuild(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sapi_rebuild() RETURNS void
    LANGUAGE plpgsql
    AS $$
        BEGIN
          RAISE NOTICE 'Rebuilding SAPI database';
          PERFORM rebuild_taxonomy();
          PERFORM rebuild_cites_listing();
          PERFORM rebuild_eu_listing();
          PERFORM rebuild_cms_listing();
          PERFORM rebuild_cites_accepted_flags();
        END;
      $$;


--
-- Name: FUNCTION sapi_rebuild(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.sapi_rebuild() IS 'Procedure to rebuild computed fields in the database.';


--
-- Name: set_cites_eu_historically_listed_flag_for_node(text, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_cites_eu_historically_listed_flag_for_node(designation text, node_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
    WITH historically_listed_taxa AS (
      SELECT taxon_concept_id AS id
      FROM listing_changes
      JOIN change_types
      ON change_types.id = change_type_id
      JOIN designations
      ON designations.id = designation_id AND designations.name = UPPER($1)
      WHERE CASE WHEN $2 IS NULL THEN TRUE ELSE taxon_concept_id = $2 END
      GROUP BY taxon_concept_id
    ), taxa_with_historically_listed_flag AS (
      SELECT taxon_concepts.id,
      CASE WHEN t.id IS NULL THEN FALSE ELSE TRUE END AS historically_listed
      FROM taxon_concepts
      JOIN taxonomies
      ON taxonomies.id = taxon_concepts.taxonomy_id AND taxonomies.name = 'CITES_EU'
      LEFT JOIN historically_listed_taxa t
      ON t.id = taxon_concepts.id
      WHERE CASE WHEN $2 IS NULL THEN TRUE ELSE taxon_concepts.id = $2 END
    )
    UPDATE taxon_concepts
    SET listing = COALESCE(listing, ''::HSTORE) ||
    HSTORE(LOWER($1) || '_historically_listed', t.historically_listed::VARCHAR)
    FROM taxa_with_historically_listed_flag t
    WHERE t.id = taxon_concepts.id;
  $_$;


--
-- Name: set_cites_historically_listed_flag_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_cites_historically_listed_flag_for_node(node_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
    SELECT * FROM set_cites_eu_historically_listed_flag_for_node('CITES', $1);
  $_$;


--
-- Name: set_cms_historically_listed_flag_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_cms_historically_listed_flag_for_node(node_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
    WITH historical_listings_or_agreements AS (
      SELECT taxon_concept_id
      FROM listing_changes
      JOIN change_types
      ON change_types.id = change_type_id
      JOIN designations
      ON designations.id = designation_id AND designations.name = 'CMS'
      WHERE CASE WHEN $1 IS NULL THEN TRUE ELSE taxon_concept_id = $1 END

      UNION

      SELECT taxon_concept_id
      FROM taxon_instruments
      WHERE CASE WHEN $1 IS NULL THEN TRUE ELSE taxon_concept_id = $1 END
    ), historically_listed_taxa AS (
      SELECT taxon_concept_id AS id
      FROM historical_listings_or_agreements
      GROUP BY taxon_concept_id
    ), taxa_with_historically_listed_flag AS (
      SELECT taxon_concepts.id,
      CASE WHEN t.id IS NULL THEN FALSE ELSE TRUE END AS historically_listed
      FROM taxon_concepts
      JOIN taxonomies
      ON taxonomies.id = taxon_concepts.taxonomy_id AND taxonomies.name = 'CMS'
      LEFT JOIN historically_listed_taxa t
      ON t.id = taxon_concepts.id
      WHERE CASE WHEN $1 IS NULL THEN TRUE ELSE taxon_concepts.id = $1 END
    )
    UPDATE taxon_concepts
    SET listing = COALESCE(listing, ''::HSTORE) || HSTORE('cms_historically_listed', t.historically_listed::VARCHAR)
    FROM taxa_with_historically_listed_flag t
    WHERE t.id = taxon_concepts.id;
  $_$;


--
-- Name: set_eu_historically_listed_flag_for_node(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_eu_historically_listed_flag_for_node(node_id integer) RETURNS void
    LANGUAGE sql
    AS $_$
    SELECT * FROM set_cites_eu_historically_listed_flag_for_node('EU', $1);
  $_$;


--
-- Name: squish(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.squish(text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT BTRIM(
      regexp_replace(
        regexp_replace($1, U&'\00A0', ' ', 'g'),
        E'\\s+', ' ', 'g'
      )
    );
  $_$;


--
-- Name: FUNCTION squish(text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.squish(text) IS 'Squishes whitespace characters in a string';


--
-- Name: squish_null(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.squish_null(text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT CASE WHEN SQUISH($1) = '' THEN NULL ELSE SQUISH($1) END;
  $_$;


--
-- Name: FUNCTION squish_null(text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.squish_null(text) IS 'Squishes whitespace characters in a string and returns null for empty string';


--
-- Name: strip_tags(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.strip_tags(text) RETURNS text
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT regexp_replace(regexp_replace($1, E'(?x)<[^>]*?(\s alt \s* = \s* ([\'"]) ([^>]*?) \2) [^>]*? >', E'\3'), E'(?x)(< [^>]*? >)', '', 'g')
  $_$;


--
-- Name: FUNCTION strip_tags(text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.strip_tags(text) IS 'Strips html tags from string using a regexp.';


--
-- Name: trim_decimal_zero(numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.trim_decimal_zero(numeric) RETURNS numeric
    LANGUAGE sql IMMUTABLE
    AS $_$
    SELECT REGEXP_REPLACE($1::TEXT,
      '\.0+$',
      ''
    )::NUMERIC
  $_$;


--
-- Name: FUNCTION trim_decimal_zero(numeric); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.trim_decimal_zero(numeric) IS 'For display purposes make 1.0 -> 1, while 1.5 remains 1.5.';


--
-- Name: array_agg_notnull(anyelement); Type: AGGREGATE; Schema: public; Owner: -
--

CREATE AGGREGATE public.array_agg_notnull(anyelement) (
    SFUNC = public.fn_array_agg_notnull,
    STYPE = anyarray,
    INITCOND = '{}'
);


--
-- Name: active_storage_attachments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.active_storage_attachments (
    id bigint NOT NULL,
    name character varying NOT NULL,
    record_type character varying NOT NULL,
    record_id bigint NOT NULL,
    blob_id bigint NOT NULL,
    created_at timestamp(6) without time zone NOT NULL
);


--
-- Name: active_storage_attachments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.active_storage_attachments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: active_storage_attachments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.active_storage_attachments_id_seq OWNED BY public.active_storage_attachments.id;


--
-- Name: active_storage_blobs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.active_storage_blobs (
    id bigint NOT NULL,
    key character varying NOT NULL,
    filename character varying NOT NULL,
    content_type character varying,
    metadata text,
    service_name character varying NOT NULL,
    byte_size bigint NOT NULL,
    checksum character varying,
    created_at timestamp(6) without time zone NOT NULL
);


--
-- Name: active_storage_blobs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.active_storage_blobs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: active_storage_blobs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.active_storage_blobs_id_seq OWNED BY public.active_storage_blobs.id;


--
-- Name: active_storage_variant_records; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.active_storage_variant_records (
    id bigint NOT NULL,
    blob_id bigint NOT NULL,
    variation_digest character varying NOT NULL
);


--
-- Name: active_storage_variant_records_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.active_storage_variant_records_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: active_storage_variant_records_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.active_storage_variant_records_id_seq OWNED BY public.active_storage_variant_records.id;


--
-- Name: ahoy_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ahoy_events (
    id uuid NOT NULL,
    visit_id uuid,
    user_id integer,
    name character varying(255),
    "time" timestamp without time zone,
    properties jsonb
);


--
-- Name: ahoy_visits; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ahoy_visits (
    id uuid NOT NULL,
    visitor_id uuid,
    ip character varying(255),
    user_agent text,
    referrer text,
    landing_page text,
    user_id integer,
    referring_domain character varying(255),
    search_keyword character varying(255),
    browser character varying(255),
    os character varying(255),
    device_type character varying(255),
    country character varying(255),
    city character varying(255),
    utm_source character varying(255),
    utm_medium character varying(255),
    utm_term character varying(255),
    utm_content character varying(255),
    utm_campaign character varying(255),
    started_at timestamp without time zone,
    organization text
);


--
-- Name: all_taxon_concepts_and_ancestors_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.all_taxon_concepts_and_ancestors_mview AS
 SELECT taxon_concepts.id AS taxon_concept_id,
    taxon_concepts.taxonomy_id,
    ((taxon_concepts.data OPERATOR(public.->) (lower(unnest(public.higher_or_equal_ranks_names(((taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::character varying))) || '_id'::text)))::integer AS ancestor_taxon_concept_id,
    (generate_subscripts(public.higher_or_equal_ranks_names(((taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::character varying), 1) - 1) AS tree_distance
   FROM public.taxon_concepts
  WITH NO DATA;


--
-- Name: analytics_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.analytics_events (
    id integer NOT NULL,
    event_type character varying(255),
    event_name character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


--
-- Name: analytics_events_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.analytics_events_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: analytics_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.analytics_events_id_seq OWNED BY public.analytics_events.id;


--
-- Name: annotations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.annotations (
    id integer NOT NULL,
    symbol character varying(255),
    parent_symbol character varying(255),
    display_in_index boolean DEFAULT false NOT NULL,
    display_in_footnote boolean DEFAULT false NOT NULL,
    short_note_en text,
    full_note_en text,
    short_note_fr text,
    full_note_fr text,
    short_note_es text,
    full_note_es text,
    original_id integer,
    event_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    import_row_id integer,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: annotations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.annotations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: annotations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.annotations_id_seq OWNED BY public.annotations.id;


--
-- Name: cites_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cites_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone,
    event_id integer,
    geo_entity_type character varying(255)
);


--
-- Name: api_cites_listing_changes_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_cites_listing_changes_view AS
 SELECT listing_changes_mview.id,
    listing_changes_mview.event_id,
    listing_changes_mview.taxon_concept_id,
    listing_changes_mview.original_taxon_concept_id,
        CASE
            WHEN (((listing_changes_mview.change_type_name)::text = 'DELETION'::text) OR ((listing_changes_mview.change_type_name)::text = 'RESERVATION_WITHDRAWAL'::text)) THEN false
            ELSE listing_changes_mview.is_current
        END AS is_current,
    (listing_changes_mview.effective_at)::date AS effective_at,
    listing_changes_mview.species_listing_name,
    listing_changes_mview.change_type_name,
        CASE
            WHEN ((listing_changes_mview.change_type_name)::text = 'ADDITION'::text) THEN '+'::text
            WHEN ((listing_changes_mview.change_type_name)::text = 'DELETION'::text) THEN '-'::text
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION'::text) THEN 'R+'::text
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION_WITHDRAWAL'::text) THEN 'R-'::text
            ELSE ''::text
        END AS change_type,
    listing_changes_mview.inclusion_taxon_concept_id,
    listing_changes_mview.listed_geo_entities_ids,
    listing_changes_mview.excluded_geo_entities_ids,
    listing_changes_mview.party_id,
        CASE
            WHEN (listing_changes_mview.party_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.party_iso_code)::text, (listing_changes_mview.party_full_name_en)::text, (listing_changes_mview.geo_entity_type)::text)::public.api_geo_entity)
        END AS party_en,
        CASE
            WHEN (listing_changes_mview.party_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.party_iso_code)::text, (listing_changes_mview.party_full_name_es)::text, (listing_changes_mview.geo_entity_type)::text)::public.api_geo_entity)
        END AS party_es,
        CASE
            WHEN (listing_changes_mview.party_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.party_iso_code)::text, (listing_changes_mview.party_full_name_fr)::text, (listing_changes_mview.geo_entity_type)::text)::public.api_geo_entity)
        END AS party_fr,
        CASE
            WHEN ((listing_changes_mview.auto_note_en IS NULL) AND (listing_changes_mview.inherited_full_note_en IS NULL) AND (listing_changes_mview.inherited_short_note_en IS NULL) AND (listing_changes_mview.full_note_en IS NULL) AND (listing_changes_mview.short_note_en IS NULL) AND (listing_changes_mview.nomenclature_note_en IS NULL)) THEN NULL::text
            ELSE ((
            CASE
                WHEN (length(listing_changes_mview.auto_note_en) > 0) THEN (('['::text || listing_changes_mview.auto_note_en) || '] '::text)
                ELSE ''::text
            END ||
            CASE
                WHEN (length(listing_changes_mview.inherited_full_note_en) > 0) THEN public.strip_tags(listing_changes_mview.inherited_full_note_en)
                WHEN (length(listing_changes_mview.inherited_short_note_en) > 0) THEN public.strip_tags(listing_changes_mview.inherited_short_note_en)
                WHEN (length(listing_changes_mview.full_note_en) > 0) THEN public.strip_tags(listing_changes_mview.full_note_en)
                WHEN (length(listing_changes_mview.short_note_en) > 0) THEN public.strip_tags(listing_changes_mview.short_note_en)
                ELSE ''::text
            END) ||
            CASE
                WHEN (length(listing_changes_mview.nomenclature_note_en) > 0) THEN public.strip_tags(listing_changes_mview.nomenclature_note_en)
                ELSE ''::text
            END)
        END AS annotation_en,
        CASE
            WHEN ((listing_changes_mview.auto_note_es IS NULL) AND (listing_changes_mview.inherited_full_note_es IS NULL) AND (listing_changes_mview.inherited_short_note_es IS NULL) AND (listing_changes_mview.full_note_es IS NULL) AND (listing_changes_mview.short_note_es IS NULL) AND (listing_changes_mview.nomenclature_note_es IS NULL)) THEN NULL::text
            ELSE ((
            CASE
                WHEN (length(listing_changes_mview.auto_note_es) > 0) THEN (('['::text || listing_changes_mview.auto_note_es) || '] '::text)
                ELSE ''::text
            END ||
            CASE
                WHEN (length(listing_changes_mview.inherited_full_note_es) > 0) THEN public.strip_tags(listing_changes_mview.inherited_full_note_es)
                WHEN (length(listing_changes_mview.inherited_short_note_es) > 0) THEN public.strip_tags(listing_changes_mview.inherited_short_note_es)
                WHEN (length(listing_changes_mview.full_note_es) > 0) THEN public.strip_tags(listing_changes_mview.full_note_es)
                WHEN (length(listing_changes_mview.short_note_es) > 0) THEN public.strip_tags(listing_changes_mview.short_note_es)
                ELSE ''::text
            END) ||
            CASE
                WHEN (length(listing_changes_mview.nomenclature_note_en) > 0) THEN public.strip_tags(listing_changes_mview.nomenclature_note_en)
                ELSE ''::text
            END)
        END AS annotation_es,
        CASE
            WHEN ((listing_changes_mview.auto_note_fr IS NULL) AND (listing_changes_mview.inherited_full_note_fr IS NULL) AND (listing_changes_mview.inherited_short_note_fr IS NULL) AND (listing_changes_mview.full_note_fr IS NULL) AND (listing_changes_mview.short_note_fr IS NULL) AND (listing_changes_mview.nomenclature_note_fr IS NULL)) THEN NULL::text
            ELSE ((
            CASE
                WHEN (length(listing_changes_mview.auto_note_fr) > 0) THEN (('['::text || listing_changes_mview.auto_note_fr) || '] '::text)
                ELSE ''::text
            END ||
            CASE
                WHEN (length(listing_changes_mview.inherited_full_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.inherited_full_note_fr)
                WHEN (length(listing_changes_mview.inherited_short_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.inherited_short_note_fr)
                WHEN (length(listing_changes_mview.full_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.full_note_fr)
                WHEN (length(listing_changes_mview.short_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.short_note_fr)
                ELSE ''::text
            END) ||
            CASE
                WHEN (length(listing_changes_mview.nomenclature_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.nomenclature_note_fr)
                ELSE ''::text
            END)
        END AS annotation_fr,
        CASE
            WHEN ((listing_changes_mview.hash_ann_symbol IS NULL) AND (listing_changes_mview.hash_full_note_en IS NULL)) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.hash_ann_symbol)::text, public.strip_tags(listing_changes_mview.hash_full_note_en))::public.api_annotation)
        END AS hash_annotation_en,
        CASE
            WHEN ((listing_changes_mview.hash_ann_symbol IS NULL) AND (listing_changes_mview.hash_full_note_es IS NULL)) THEN NULL::json
            ELSE row_to_json(ROW((((listing_changes_mview.hash_ann_parent_symbol)::text || ' '::text) || (listing_changes_mview.hash_ann_symbol)::text), public.strip_tags(listing_changes_mview.hash_full_note_es))::public.api_annotation)
        END AS hash_annotation_es,
        CASE
            WHEN ((listing_changes_mview.hash_ann_symbol IS NULL) AND (listing_changes_mview.hash_full_note_fr IS NULL)) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.hash_ann_symbol)::text, public.strip_tags(listing_changes_mview.hash_full_note_fr))::public.api_annotation)
        END AS hash_annotation_fr,
    listing_changes_mview.show_in_history,
    listing_changes_mview.full_note_en,
    listing_changes_mview.short_note_en,
    listing_changes_mview.auto_note_en,
    listing_changes_mview.hash_full_note_en,
    listing_changes_mview.hash_ann_parent_symbol,
    listing_changes_mview.hash_ann_symbol,
    listing_changes_mview.inherited_full_note_en,
    listing_changes_mview.inherited_short_note_en,
    listing_changes_mview.nomenclature_note_en,
    listing_changes_mview.nomenclature_note_fr,
    listing_changes_mview.nomenclature_note_es,
        CASE
            WHEN ((listing_changes_mview.change_type_name)::text = 'ADDITION'::text) THEN 0
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION'::text) THEN 1
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION_WITHDRAWAL'::text) THEN 2
            WHEN ((listing_changes_mview.change_type_name)::text = 'DELETION'::text) THEN 3
            ELSE NULL::integer
        END AS change_type_order
   FROM public.cites_listing_changes_mview listing_changes_mview
  WHERE listing_changes_mview.show_in_history;


--
-- Name: geo_entities; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.geo_entities (
    id integer NOT NULL,
    geo_entity_type_id integer NOT NULL,
    name_en character varying(255) NOT NULL,
    name_fr character varying(255),
    name_es character varying(255),
    long_name character varying(255),
    iso_code2 character varying(255),
    iso_code3 character varying(255),
    legacy_id integer,
    legacy_type character varying(255),
    is_current boolean DEFAULT true,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    CONSTRAINT check_iso_code2_length CHECK ((char_length((iso_code2)::text) = 2)),
    CONSTRAINT check_iso_code3_length CHECK ((char_length((iso_code3)::text) = 3))
);


--
-- Name: geo_entity_types; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.geo_entity_types (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: trade_codes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_codes (
    id integer NOT NULL,
    code character varying(255) NOT NULL,
    type character varying(255) NOT NULL,
    name_en character varying(255) NOT NULL,
    name_es character varying(255),
    name_fr character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: trade_restriction_sources; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_restriction_sources (
    id integer NOT NULL,
    trade_restriction_id integer,
    source_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: trade_restrictions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_restrictions (
    id integer NOT NULL,
    is_current boolean DEFAULT true,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    geo_entity_id integer,
    quota double precision,
    publication_date timestamp without time zone,
    notes text,
    type character varying(255),
    unit_id integer,
    taxon_concept_id integer,
    public_display boolean DEFAULT true,
    url text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    start_notification_id integer,
    end_notification_id integer,
    excluded_taxon_concepts_ids integer[],
    original_id integer,
    updated_by_id integer,
    created_by_id integer,
    internal_notes text,
    nomenclature_note_en text,
    nomenclature_note_es text,
    nomenclature_note_fr text,
    applies_to_import boolean DEFAULT false NOT NULL
);


--
-- Name: api_cites_quotas_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_cites_quotas_view AS
 SELECT tr.id,
    tr.type,
    tr.taxon_concept_id,
    tr.notes,
    tr.url,
    tr.start_date,
    tr.publication_date,
    tr.is_current,
    tr.geo_entity_id,
    tr.unit_id,
    tr.quota,
    tr.public_display,
    tr.nomenclature_note_en,
    tr.nomenclature_note_fr,
    tr.nomenclature_note_es,
    tr.taxon_concept,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_en)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_en,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_es)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_es,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_fr)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_fr,
    COALESCE(trade_restriction_sources.source_ids, '[]'::json) AS source_ids,
        CASE
            WHEN (tr.unit_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((units.code)::text, (units.name_en)::text)::public.api_trade_code)
        END AS unit_en,
        CASE
            WHEN (tr.unit_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((units.code)::text, (units.name_es)::text)::public.api_trade_code)
        END AS unit_es,
        CASE
            WHEN (tr.unit_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((units.code)::text, (units.name_fr)::text)::public.api_trade_code)
        END AS unit_fr
   FROM ((((( SELECT cites_quotas_with_taxon_concept.id,
            cites_quotas_with_taxon_concept.type,
            cites_quotas_with_taxon_concept.taxon_concept_id,
            cites_quotas_with_taxon_concept.notes,
            cites_quotas_with_taxon_concept.url,
            cites_quotas_with_taxon_concept.start_date,
            cites_quotas_with_taxon_concept.publication_date,
            cites_quotas_with_taxon_concept.is_current,
            cites_quotas_with_taxon_concept.geo_entity_id,
            cites_quotas_with_taxon_concept.unit_id,
            cites_quotas_with_taxon_concept.quota,
            cites_quotas_with_taxon_concept.public_display,
            cites_quotas_with_taxon_concept.nomenclature_note_en,
            cites_quotas_with_taxon_concept.nomenclature_note_fr,
            cites_quotas_with_taxon_concept.nomenclature_note_es,
            cites_quotas_with_taxon_concept.taxon_concept
           FROM ( SELECT tr_1.id,
                    tr_1.type,
                    tr_1.taxon_concept_id,
                    tr_1.notes,
                    tr_1.url,
                    tr_1.start_date,
                    tr_1.publication_date,
                    tr_1.is_current,
                    tr_1.geo_entity_id,
                    tr_1.unit_id,
                    tr_1.quota,
                    tr_1.public_display,
                    tr_1.nomenclature_note_en,
                    tr_1.nomenclature_note_fr,
                    tr_1.nomenclature_note_es,
                        CASE
                            WHEN (tr_1.taxon_concept_id IS NULL) THEN NULL::json
                            ELSE row_to_json(ROW(tr_1.taxon_concept_id, (taxon_concepts.full_name)::text, (taxon_concepts.author_year)::text, (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::public.api_taxon_concept)
                        END AS taxon_concept
                   FROM (( SELECT tr_2.id,
                            tr_2.type,
                            tr_2.taxon_concept_id,
                            tr_2.notes,
                            tr_2.url,
                            tr_2.start_date,
                            (tr_2.publication_date)::date AS publication_date,
                            tr_2.is_current,
                            tr_2.geo_entity_id,
                            tr_2.unit_id,
                                CASE
                                    WHEN (tr_2.quota = ('-1'::integer)::double precision) THEN NULL::double precision
                                    ELSE tr_2.quota
                                END AS quota,
                            tr_2.public_display,
                            tr_2.nomenclature_note_en,
                            tr_2.nomenclature_note_fr,
                            tr_2.nomenclature_note_es
                           FROM public.trade_restrictions tr_2
                          WHERE ((tr_2.type)::text = 'Quota'::text)) tr_1
                     LEFT JOIN public.taxon_concepts ON ((taxon_concepts.id = tr_1.taxon_concept_id)))) cites_quotas_with_taxon_concept) tr
     JOIN public.geo_entities ON ((geo_entities.id = tr.geo_entity_id)))
     JOIN public.geo_entity_types ON ((geo_entities.geo_entity_type_id = geo_entity_types.id)))
     LEFT JOIN public.trade_codes units ON (((units.id = tr.unit_id) AND ((units.type)::text = 'Unit'::text))))
     LEFT JOIN LATERAL ( SELECT json_agg(trade_restriction_sources_1.source_id) AS source_ids
           FROM public.trade_restriction_sources trade_restriction_sources_1
          WHERE (tr.id = trade_restriction_sources_1.trade_restriction_id)) trade_restriction_sources ON (true));


--
-- Name: events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.events (
    id integer NOT NULL,
    name character varying(255),
    designation_id integer,
    description text,
    url text,
    is_current boolean DEFAULT false NOT NULL,
    type character varying(255) DEFAULT 'Event'::character varying NOT NULL,
    effective_at timestamp without time zone,
    published_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    legacy_id integer,
    end_date timestamp without time zone,
    subtype character varying(255),
    updated_by_id integer,
    created_by_id integer,
    extended_description text,
    multilingual_url text,
    elib_legacy_id integer,
    private_url text
);


--
-- Name: api_cites_suspensions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_cites_suspensions_view AS
 SELECT tr.id,
    tr.type,
    tr.taxon_concept_id,
    tr.notes,
    tr.start_date,
    tr.end_date,
    tr.is_current,
    tr.geo_entity_id,
    tr.applies_to_import,
    tr.start_notification_id,
    tr.end_notification_id,
    tr.nomenclature_note_en,
    tr.nomenclature_note_fr,
    tr.nomenclature_note_es,
    tr.taxon_concept,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_en)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_en,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_es)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_es,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_fr)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_fr,
    COALESCE(trade_restriction_sources.source_ids, '[]'::json) AS source_ids,
    row_to_json(ROW((start_event.name)::text, (start_event.effective_at)::date, start_event.url)::public.api_event) AS start_notification,
    row_to_json(ROW((end_event.name)::text, (end_event.effective_at)::date, end_event.url)::public.api_event) AS end_notification
   FROM (((((( SELECT cites_suspensions_without_taxon_concept.id,
            cites_suspensions_without_taxon_concept.type,
            cites_suspensions_without_taxon_concept.taxon_concept_id,
            cites_suspensions_without_taxon_concept.notes,
            cites_suspensions_without_taxon_concept.start_date,
            cites_suspensions_without_taxon_concept.end_date,
            cites_suspensions_without_taxon_concept.is_current,
            cites_suspensions_without_taxon_concept.geo_entity_id,
            cites_suspensions_without_taxon_concept.applies_to_import,
            cites_suspensions_without_taxon_concept.start_notification_id,
            cites_suspensions_without_taxon_concept.end_notification_id,
            cites_suspensions_without_taxon_concept.nomenclature_note_en,
            cites_suspensions_without_taxon_concept.nomenclature_note_fr,
            cites_suspensions_without_taxon_concept.nomenclature_note_es,
            cites_suspensions_without_taxon_concept.taxon_concept
           FROM ( SELECT tr_1.id,
                    tr_1.type,
                    tr_1.taxon_concept_id,
                    tr_1.notes,
                    tr_1.start_date,
                    tr_1.end_date,
                    tr_1.is_current,
                    tr_1.geo_entity_id,
                    tr_1.applies_to_import,
                    tr_1.start_notification_id,
                    tr_1.end_notification_id,
                    tr_1.nomenclature_note_en,
                    tr_1.nomenclature_note_fr,
                    tr_1.nomenclature_note_es,
                        CASE
                            WHEN (tr_1.taxon_concept_id IS NOT NULL) THEN row_to_json(ROW(tr_1.taxon_concept_id, (taxon_concepts.full_name)::text, (taxon_concepts.author_year)::text, (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::public.api_taxon_concept)
                            ELSE NULL::json
                        END AS taxon_concept
                   FROM (( SELECT tr_2.id,
                            tr_2.type,
                            tr_2.taxon_concept_id,
                            tr_2.notes,
                            (tr_2.start_date)::date AS start_date,
                            (tr_2.end_date)::date AS end_date,
                            tr_2.is_current,
                            tr_2.geo_entity_id,
                            tr_2.applies_to_import,
                            tr_2.start_notification_id,
                            tr_2.end_notification_id,
                            tr_2.nomenclature_note_en,
                            tr_2.nomenclature_note_fr,
                            tr_2.nomenclature_note_es
                           FROM public.trade_restrictions tr_2
                          WHERE ((tr_2.type)::text = 'CitesSuspension'::text)) tr_1
                     LEFT JOIN public.taxon_concepts ON ((taxon_concepts.id = tr_1.taxon_concept_id)))) cites_suspensions_without_taxon_concept) tr
     LEFT JOIN public.geo_entities ON ((geo_entities.id = tr.geo_entity_id)))
     LEFT JOIN public.geo_entity_types ON ((geo_entities.geo_entity_type_id = geo_entity_types.id)))
     JOIN public.events start_event ON (((start_event.id = tr.start_notification_id) AND ((start_event.type)::text = 'CitesSuspensionNotification'::text))))
     LEFT JOIN public.events end_event ON (((end_event.id = tr.end_notification_id) AND ((end_event.type)::text = 'CitesSuspensionNotification'::text))))
     LEFT JOIN LATERAL ( SELECT json_agg(trade_restriction_sources_1.source_id) AS source_ids
           FROM public.trade_restriction_sources trade_restriction_sources_1
          WHERE (tr.id = trade_restriction_sources_1.trade_restriction_id)) trade_restriction_sources ON (true));


--
-- Name: common_names; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.common_names (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    language_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: languages; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.languages (
    id integer NOT NULL,
    name_en character varying(255) NOT NULL,
    name_fr character varying(255),
    name_es character varying(255),
    iso_code1 character varying(255),
    iso_code3 character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: taxon_commons; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_commons (
    id integer NOT NULL,
    taxon_concept_id integer NOT NULL,
    common_name_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: api_common_names_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_common_names_view AS
 SELECT taxon_commons.id,
    taxon_commons.taxon_concept_id,
    languages.iso_code1,
    languages.name_en AS language_name_en,
    languages.name_es AS language_name_es,
    languages.name_fr AS language_name_fr,
    common_names.name
   FROM ((public.taxon_commons
     JOIN public.common_names ON ((common_names.id = taxon_commons.common_name_id)))
     JOIN public.languages ON ((languages.id = common_names.language_id)));


--
-- Name: distribution_references; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.distribution_references (
    id integer NOT NULL,
    distribution_id integer NOT NULL,
    reference_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    updated_by_id integer,
    created_by_id integer
);


--
-- Name: distributions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.distributions (
    id integer NOT NULL,
    taxon_concept_id integer NOT NULL,
    geo_entity_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer,
    internal_notes text
);


--
-- Name: references; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."references" (
    id integer NOT NULL,
    title text,
    year character varying(255),
    author character varying(255),
    citation text NOT NULL,
    publisher text,
    legacy_id integer,
    legacy_type character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    updated_by_id integer,
    created_by_id integer
);


--
-- Name: taggings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taggings (
    id integer NOT NULL,
    tag_id integer,
    taggable_id integer,
    taggable_type character varying(255),
    tagger_id integer,
    tagger_type character varying(255),
    context character varying(128),
    created_at timestamp without time zone
);


--
-- Name: tags; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.tags (
    id integer NOT NULL,
    name character varying(255),
    taggings_count integer DEFAULT 0
);


--
-- Name: api_distributions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_distributions_view AS
 SELECT d.id,
    d.taxon_concept_id,
    d.geo_entity_id,
    d.tags,
    g.name_en,
    g.name_es,
    g.name_fr,
    g.iso_code2,
    gt.name AS geo_entity_type,
    public.array_agg_notnull(r.citation ORDER BY r.citation) AS citations
   FROM ((((( SELECT d_1.id,
            d_1.taxon_concept_id,
            d_1.geo_entity_id,
            public.array_agg_notnull(tags.name) AS tags
           FROM ((public.distributions d_1
             LEFT JOIN public.taggings ON ((((taggings.taggable_type)::text = 'Distribution'::text) AND (taggings.taggable_id = d_1.id))))
             LEFT JOIN public.tags ON ((tags.id = taggings.tag_id)))
          GROUP BY d_1.id, d_1.taxon_concept_id, d_1.geo_entity_id) d
     JOIN public.geo_entities g ON ((g.id = d.geo_entity_id)))
     JOIN public.geo_entity_types gt ON ((gt.id = g.geo_entity_type_id)))
     LEFT JOIN public.distribution_references dr ON ((dr.distribution_id = d.id)))
     LEFT JOIN public."references" r ON ((r.id = dr.reference_id)))
  GROUP BY d.id, d.taxon_concept_id, d.geo_entity_id, d.tags, g.name_en, g.name_es, g.name_fr, g.iso_code2, gt.name;


--
-- Name: api_documents_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_documents_view AS
SELECT
    NULL::integer AS id,
    NULL::integer AS designation_id,
    NULL::character varying(255) AS designation_name,
    NULL::integer AS event_id,
    NULL::character varying(255) AS event_name,
    NULL::text AS date,
    NULL::timestamp with time zone AS date_raw,
    NULL::character varying(255) AS event_type,
    NULL::text AS title,
    NULL::text AS extension,
    NULL::boolean AS is_public,
    NULL::character varying(255) AS document_type,
    NULL::integer AS sort_index,
    NULL::character varying(255) AS language,
    NULL::integer AS primary_document_id,
    NULL::text AS proposal_number,
    NULL::text AS proposal_outcome,
    NULL::text AS review_phase,
    NULL::integer[] AS document_tags_ids,
    NULL::character varying[] AS taxon_names,
    NULL::integer[] AS taxon_concept_ids,
    NULL::character varying[] AS geo_entity_names,
    NULL::timestamp without time zone AS created_at,
    NULL::timestamp without time zone AS updated_at,
    NULL::integer AS created_by_id,
    NULL::character varying(255) AS created_by,
    NULL::integer AS updated_by_id,
    NULL::character varying(255) AS updated_by,
    NULL::boolean AS general_subtype,
    NULL::integer AS volume,
    NULL::text AS manual_id;


--
-- Name: api_documents_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.api_documents_mview AS
 SELECT api_documents_view.id,
    api_documents_view.designation_id,
    api_documents_view.designation_name,
    api_documents_view.event_id,
    api_documents_view.event_name,
    api_documents_view.date,
    api_documents_view.date_raw,
    api_documents_view.event_type,
    api_documents_view.title,
    api_documents_view.extension,
    api_documents_view.is_public,
    api_documents_view.document_type,
    api_documents_view.sort_index,
    api_documents_view.language,
    api_documents_view.primary_document_id,
    api_documents_view.proposal_number,
    api_documents_view.proposal_outcome,
    api_documents_view.review_phase,
    api_documents_view.document_tags_ids,
    api_documents_view.taxon_names,
    api_documents_view.taxon_concept_ids,
    api_documents_view.geo_entity_names,
    api_documents_view.created_at,
    api_documents_view.updated_at,
    api_documents_view.created_by_id,
    api_documents_view.created_by,
    api_documents_view.updated_by_id,
    api_documents_view.updated_by,
    api_documents_view.general_subtype,
    api_documents_view.volume,
    api_documents_view.manual_id
   FROM public.api_documents_view
  WITH NO DATA;


--
-- Name: documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.documents (
    id integer NOT NULL,
    title text NOT NULL,
    filename text,
    date date NOT NULL,
    type character varying(255) NOT NULL,
    is_public boolean DEFAULT false NOT NULL,
    event_id integer,
    language_id integer,
    elib_legacy_id integer,
    created_by_id integer,
    updated_by_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    sort_index integer,
    primary_language_document_id integer,
    elib_legacy_file_name text,
    original_id integer,
    discussion_id integer,
    discussion_sort_index integer,
    designation_id integer,
    manual_id text,
    volume integer,
    general_subtype boolean
);


--
-- Name: eu_decision_types; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_decision_types (
    id integer NOT NULL,
    name character varying(255),
    tooltip character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    decision_type character varying(255)
);


--
-- Name: eu_decisions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_decisions (
    id integer NOT NULL,
    is_current boolean DEFAULT true,
    notes text,
    internal_notes text,
    taxon_concept_id integer,
    geo_entity_id integer NOT NULL,
    start_date timestamp without time zone,
    start_event_id integer,
    end_date timestamp without time zone,
    end_event_id integer,
    type character varying(255),
    conditions_apply boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    eu_decision_type_id integer,
    term_id integer,
    source_id integer,
    created_by_id integer,
    updated_by_id integer,
    nomenclature_note_en text,
    nomenclature_note_es text,
    nomenclature_note_fr text,
    srg_history_id integer,
    document_id integer
);


--
-- Name: srg_histories; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.srg_histories (
    id integer NOT NULL,
    name character varying(255),
    tooltip character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: api_eu_decisions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_eu_decisions_view AS
 SELECT eu_decisions.id,
    eu_decisions.type,
    eu_decisions.taxon_concept_id,
    row_to_json(ROW(eu_decisions.taxon_concept_id, (taxon_concepts.full_name)::text, (taxon_concepts.author_year)::text, (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::public.api_taxon_concept) AS taxon_concept,
    eu_decisions.notes,
        CASE
            WHEN ((eu_decisions.type)::text = 'EuOpinion'::text) THEN (eu_decisions.start_date)::date
            WHEN ((eu_decisions.type)::text = 'EuSuspension'::text) THEN (start_event.effective_at)::date
            ELSE NULL::date
        END AS start_date,
        CASE
            WHEN ((eu_decisions.type)::text = 'EuOpinion'::text) THEN eu_decisions.is_current
            WHEN ((eu_decisions.type)::text = 'EuSuspension'::text) THEN
            CASE
                WHEN ((start_event.effective_at <= CURRENT_DATE) AND (start_event.is_current = true) AND ((eu_decisions.end_event_id IS NULL) OR (end_event.effective_at > CURRENT_DATE))) THEN true
                ELSE false
            END
            ELSE NULL::boolean
        END AS is_current,
    eu_decisions.geo_entity_id,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_en)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_en,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_es)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_es,
    row_to_json(ROW((geo_entities.iso_code2)::text, (geo_entities.name_fr)::text, (geo_entity_types.name)::text)::public.api_geo_entity) AS geo_entity_fr,
    eu_decisions.start_event_id,
    row_to_json(ROW(((start_event.name)::text ||
        CASE
            WHEN ((start_event.type)::text = 'EcSrg'::text) THEN ' Soc'::text
            ELSE ''::text
        END), (start_event.effective_at)::date, start_event.url)::public.api_event) AS start_event,
    start_event.private_url,
    eu_decisions.end_event_id,
    row_to_json(ROW((end_event.name)::text, (end_event.effective_at)::date, end_event.url)::public.api_event) AS end_event,
    documents.id AS intersessional_decision_id,
    eu_decisions.term_id,
    row_to_json(ROW((terms.code)::text, (terms.name_en)::text)::public.api_trade_code) AS term_en,
    row_to_json(ROW((terms.code)::text, (terms.name_es)::text)::public.api_trade_code) AS term_es,
    row_to_json(ROW((terms.code)::text, (terms.name_fr)::text)::public.api_trade_code) AS term_fr,
    row_to_json(ROW((sources.code)::text, (sources.name_en)::text)::public.api_trade_code) AS source_en,
    row_to_json(ROW((sources.code)::text, (sources.name_es)::text)::public.api_trade_code) AS source_es,
    row_to_json(ROW((sources.code)::text, (sources.name_fr)::text)::public.api_trade_code) AS source_fr,
    eu_decisions.source_id,
    eu_decisions.eu_decision_type_id,
    row_to_json(ROW((eu_decision_types.name)::text, (eu_decision_types.tooltip)::text, (eu_decision_types.decision_type)::text)::public.api_eu_decision_type) AS eu_decision_type,
    eu_decisions.srg_history_id,
    row_to_json(ROW((srg_histories.name)::text, (srg_histories.tooltip)::text)::public.api_srg_history) AS srg_history,
    eu_decisions.nomenclature_note_en,
    eu_decisions.nomenclature_note_fr,
    eu_decisions.nomenclature_note_es
   FROM ((((((((((public.eu_decisions
     JOIN public.geo_entities ON ((geo_entities.id = eu_decisions.geo_entity_id)))
     JOIN public.geo_entity_types ON ((geo_entities.geo_entity_type_id = geo_entity_types.id)))
     JOIN public.taxon_concepts ON ((taxon_concepts.id = eu_decisions.taxon_concept_id)))
     LEFT JOIN public.events start_event ON ((start_event.id = eu_decisions.start_event_id)))
     LEFT JOIN public.events end_event ON ((end_event.id = eu_decisions.end_event_id)))
     LEFT JOIN public.trade_codes terms ON (((terms.id = eu_decisions.term_id) AND ((terms.type)::text = 'Term'::text))))
     LEFT JOIN public.trade_codes sources ON (((sources.id = eu_decisions.source_id) AND ((sources.type)::text = 'Source'::text))))
     LEFT JOIN public.eu_decision_types ON ((eu_decision_types.id = eu_decisions.eu_decision_type_id)))
     LEFT JOIN public.srg_histories ON ((srg_histories.id = eu_decisions.srg_history_id)))
     LEFT JOIN public.documents ON ((documents.id = eu_decisions.document_id)));


--
-- Name: eu_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone,
    event_id integer,
    geo_entity_type character varying(255)
);


--
-- Name: api_eu_listing_changes_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_eu_listing_changes_view AS
 SELECT listing_changes_mview.id,
    listing_changes_mview.event_id,
    row_to_json(ROW(events.description, (events.effective_at)::date, events.url)::public.api_event) AS eu_regulation,
    listing_changes_mview.taxon_concept_id,
    listing_changes_mview.original_taxon_concept_id,
    listing_changes_mview.is_current,
    (listing_changes_mview.effective_at)::date AS effective_at,
    listing_changes_mview.species_listing_name,
    listing_changes_mview.change_type_name,
        CASE
            WHEN ((listing_changes_mview.change_type_name)::text = 'ADDITION'::text) THEN '+'::text
            WHEN ((listing_changes_mview.change_type_name)::text = 'DELETION'::text) THEN '-'::text
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION'::text) THEN 'R+'::text
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION_WITHDRAWAL'::text) THEN 'R-'::text
            ELSE ''::text
        END AS change_type,
    listing_changes_mview.inclusion_taxon_concept_id,
    listing_changes_mview.party_id,
        CASE
            WHEN (listing_changes_mview.party_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.party_iso_code)::text, (listing_changes_mview.party_full_name_en)::text, (listing_changes_mview.geo_entity_type)::text)::public.api_geo_entity)
        END AS party_en,
        CASE
            WHEN (listing_changes_mview.party_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.party_iso_code)::text, (listing_changes_mview.party_full_name_es)::text, (listing_changes_mview.geo_entity_type)::text)::public.api_geo_entity)
        END AS party_es,
        CASE
            WHEN (listing_changes_mview.party_id IS NULL) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.party_iso_code)::text, (listing_changes_mview.party_full_name_fr)::text, (listing_changes_mview.geo_entity_type)::text)::public.api_geo_entity)
        END AS party_fr,
        CASE
            WHEN ((listing_changes_mview.auto_note_en IS NULL) AND (listing_changes_mview.inherited_full_note_en IS NULL) AND (listing_changes_mview.inherited_short_note_en IS NULL) AND (listing_changes_mview.full_note_en IS NULL) AND (listing_changes_mview.short_note_en IS NULL) AND (listing_changes_mview.nomenclature_note_en IS NULL)) THEN NULL::text
            ELSE ((
            CASE
                WHEN (length(listing_changes_mview.auto_note_en) > 0) THEN (('['::text || listing_changes_mview.auto_note_en) || '] '::text)
                ELSE ''::text
            END ||
            CASE
                WHEN (length(listing_changes_mview.inherited_full_note_en) > 0) THEN public.strip_tags(listing_changes_mview.inherited_full_note_en)
                WHEN (length(listing_changes_mview.inherited_short_note_en) > 0) THEN public.strip_tags(listing_changes_mview.inherited_short_note_en)
                WHEN (length(listing_changes_mview.full_note_en) > 0) THEN public.strip_tags(listing_changes_mview.full_note_en)
                WHEN (length(listing_changes_mview.short_note_en) > 0) THEN public.strip_tags(listing_changes_mview.short_note_en)
                ELSE ''::text
            END) ||
            CASE
                WHEN (length(listing_changes_mview.nomenclature_note_en) > 0) THEN public.strip_tags(listing_changes_mview.nomenclature_note_en)
                ELSE ''::text
            END)
        END AS annotation_en,
        CASE
            WHEN ((listing_changes_mview.auto_note_es IS NULL) AND (listing_changes_mview.inherited_full_note_es IS NULL) AND (listing_changes_mview.inherited_short_note_es IS NULL) AND (listing_changes_mview.full_note_es IS NULL) AND (listing_changes_mview.short_note_es IS NULL) AND (listing_changes_mview.nomenclature_note_es IS NULL)) THEN NULL::text
            ELSE ((
            CASE
                WHEN (length(listing_changes_mview.auto_note_es) > 0) THEN (('['::text || listing_changes_mview.auto_note_es) || '] '::text)
                ELSE ''::text
            END ||
            CASE
                WHEN (length(listing_changes_mview.inherited_full_note_es) > 0) THEN public.strip_tags(listing_changes_mview.inherited_full_note_es)
                WHEN (length(listing_changes_mview.inherited_short_note_es) > 0) THEN public.strip_tags(listing_changes_mview.inherited_short_note_es)
                WHEN (length(listing_changes_mview.full_note_es) > 0) THEN public.strip_tags(listing_changes_mview.full_note_es)
                WHEN (length(listing_changes_mview.short_note_es) > 0) THEN public.strip_tags(listing_changes_mview.short_note_es)
                ELSE ''::text
            END) ||
            CASE
                WHEN (length(listing_changes_mview.nomenclature_note_en) > 0) THEN public.strip_tags(listing_changes_mview.nomenclature_note_en)
                ELSE ''::text
            END)
        END AS annotation_es,
        CASE
            WHEN ((listing_changes_mview.auto_note_fr IS NULL) AND (listing_changes_mview.inherited_full_note_fr IS NULL) AND (listing_changes_mview.inherited_short_note_fr IS NULL) AND (listing_changes_mview.full_note_fr IS NULL) AND (listing_changes_mview.short_note_fr IS NULL) AND (listing_changes_mview.nomenclature_note_fr IS NULL)) THEN NULL::text
            ELSE ((
            CASE
                WHEN (length(listing_changes_mview.auto_note_fr) > 0) THEN (('['::text || listing_changes_mview.auto_note_fr) || '] '::text)
                ELSE ''::text
            END ||
            CASE
                WHEN (length(listing_changes_mview.inherited_full_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.inherited_full_note_fr)
                WHEN (length(listing_changes_mview.inherited_short_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.inherited_short_note_fr)
                WHEN (length(listing_changes_mview.full_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.full_note_fr)
                WHEN (length(listing_changes_mview.short_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.short_note_fr)
                ELSE ''::text
            END) ||
            CASE
                WHEN (length(listing_changes_mview.nomenclature_note_fr) > 0) THEN public.strip_tags(listing_changes_mview.nomenclature_note_fr)
                ELSE ''::text
            END)
        END AS annotation_fr,
        CASE
            WHEN ((listing_changes_mview.hash_ann_symbol IS NULL) AND (listing_changes_mview.hash_full_note_en IS NULL)) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.hash_ann_symbol)::text, public.strip_tags(listing_changes_mview.hash_full_note_en))::public.api_annotation)
        END AS hash_annotation_en,
        CASE
            WHEN ((listing_changes_mview.hash_ann_symbol IS NULL) AND (listing_changes_mview.hash_full_note_es IS NULL)) THEN NULL::json
            ELSE row_to_json(ROW((((listing_changes_mview.hash_ann_parent_symbol)::text || ' '::text) || (listing_changes_mview.hash_ann_symbol)::text), public.strip_tags(listing_changes_mview.hash_full_note_es))::public.api_annotation)
        END AS hash_annotation_es,
        CASE
            WHEN ((listing_changes_mview.hash_ann_symbol IS NULL) AND (listing_changes_mview.hash_full_note_fr IS NULL)) THEN NULL::json
            ELSE row_to_json(ROW((listing_changes_mview.hash_ann_symbol)::text, public.strip_tags(listing_changes_mview.hash_full_note_fr))::public.api_annotation)
        END AS hash_annotation_fr,
    listing_changes_mview.show_in_history,
    listing_changes_mview.full_note_en,
    listing_changes_mview.short_note_en,
    listing_changes_mview.auto_note_en,
    listing_changes_mview.hash_full_note_en,
    listing_changes_mview.hash_ann_parent_symbol,
    listing_changes_mview.hash_ann_symbol,
    listing_changes_mview.inherited_full_note_en,
    listing_changes_mview.inherited_short_note_en,
    listing_changes_mview.nomenclature_note_en,
    listing_changes_mview.nomenclature_note_fr,
    listing_changes_mview.nomenclature_note_es,
        CASE
            WHEN ((listing_changes_mview.change_type_name)::text = 'ADDITION'::text) THEN 0
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION'::text) THEN 1
            WHEN ((listing_changes_mview.change_type_name)::text = 'RESERVATION_WITHDRAWAL'::text) THEN 2
            WHEN ((listing_changes_mview.change_type_name)::text = 'DELETION'::text) THEN 3
            ELSE NULL::integer
        END AS change_type_order
   FROM (public.eu_listing_changes_mview listing_changes_mview
     JOIN public.events ON ((events.id = listing_changes_mview.event_id)))
  WHERE listing_changes_mview.show_in_history;


--
-- Name: api_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.api_requests (
    id integer NOT NULL,
    user_id integer,
    controller character varying(255),
    action character varying(255),
    format character varying(255),
    params text,
    ip character varying(255),
    response_status integer,
    error_message text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: api_requests_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.api_requests_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: api_requests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.api_requests_id_seq OWNED BY public.api_requests.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.users (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    email character varying(255) DEFAULT ''::character varying NOT NULL,
    encrypted_password character varying(255) DEFAULT ''::character varying NOT NULL,
    reset_password_token character varying(255),
    reset_password_sent_at timestamp without time zone,
    remember_created_at timestamp without time zone,
    sign_in_count integer DEFAULT 0 NOT NULL,
    current_sign_in_at timestamp without time zone,
    last_sign_in_at timestamp without time zone,
    current_sign_in_ip character varying(255),
    last_sign_in_ip character varying(255),
    role text DEFAULT 'api'::text NOT NULL,
    authentication_token character varying(255),
    organisation text DEFAULT 'UNKNOWN'::text NOT NULL,
    geo_entity_id integer,
    is_cites_authority boolean DEFAULT false NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


--
-- Name: api_requests_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_requests_view AS
 SELECT api_requests.id,
    api_requests.controller,
    api_requests.action,
    api_requests.format,
    api_requests.params,
    api_requests.ip,
    api_requests.response_status,
    api_requests.error_message,
    api_requests.created_at,
    users.id AS user_id,
    users.name,
    users.email,
    users.organisation,
    geo_entities.name_en,
    users.is_cites_authority
   FROM ((public.api_requests
     LEFT JOIN public.users ON ((users.id = api_requests.user_id)))
     LEFT JOIN public.geo_entities ON ((geo_entities.id = users.geo_entity_id)))
  ORDER BY api_requests.created_at DESC;


--
-- Name: api_taxon_concepts_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_taxon_concepts_view AS
SELECT
    NULL::integer AS id,
    NULL::integer AS parent_id,
    NULL::character varying AS name,
    NULL::boolean AS taxonomy_is_cites_eu,
    NULL::character varying AS full_name,
    NULL::character varying AS author_year,
    NULL::text AS name_status,
    NULL::character varying AS rank,
    NULL::character varying AS taxonomic_position,
    NULL::text AS cites_listing,
    NULL::text AS eu_listing,
    NULL::text AS kingdom_name,
    NULL::text AS phylum_name,
    NULL::text AS class_name,
    NULL::text AS order_name,
    NULL::text AS family_name,
    NULL::text AS genus_name,
    NULL::text AS kingdom_id,
    NULL::text AS phylum_id,
    NULL::text AS class_id,
    NULL::text AS order_id,
    NULL::text AS family_id,
    NULL::text AS subfamily_id,
    NULL::text AS genus_id,
    NULL::json AS higher_taxa,
    NULL::json AS synonyms,
    NULL::json AS accepted_names,
    NULL::timestamp without time zone AS created_at,
    NULL::timestamp without time zone AS updated_at,
    NULL::boolean AS active;


--
-- Name: taxon_concept_references; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_concept_references (
    id integer NOT NULL,
    taxon_concept_id integer NOT NULL,
    reference_id integer NOT NULL,
    is_standard boolean DEFAULT false NOT NULL,
    is_cascaded boolean DEFAULT false NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    excluded_taxon_concepts_ids integer[],
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: taxon_concepts_and_ancestors_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.taxon_concepts_and_ancestors_mview AS
 SELECT taxon_concepts.id AS taxon_concept_id,
    taxon_concepts.taxonomy_id,
    ((taxon_concepts.data OPERATOR(public.->) (lower(unnest(public.higher_or_equal_ranks_names(((taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::character varying))) || '_id'::text)))::integer AS ancestor_taxon_concept_id,
    (generate_subscripts(public.higher_or_equal_ranks_names(((taxon_concepts.data OPERATOR(public.->) 'rank_name'::text))::character varying), 1) - 1) AS tree_distance
   FROM public.taxon_concepts
  WHERE ((taxon_concepts.name_status)::text = ANY (ARRAY[('A'::character varying)::text, ('N'::character varying)::text, ('H'::character varying)::text]))
  WITH NO DATA;


--
-- Name: api_taxon_references_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.api_taxon_references_view AS
 SELECT tc_refs.id,
    tc_refs.taxon_concept_id,
    tc_refs.original_taxon_concept_id,
    tc_refs.excluded_taxon_concepts_ids,
    tc_refs.reference_id,
    tc_refs.is_standard,
    "references".citation
   FROM (( SELECT cascaded_tc_refs_without_exclusions.id,
            cascaded_tc_refs_without_exclusions.taxon_concept_id,
            cascaded_tc_refs_without_exclusions.original_taxon_concept_id,
            cascaded_tc_refs_without_exclusions.excluded_taxon_concepts_ids,
            cascaded_tc_refs_without_exclusions.reference_id,
            cascaded_tc_refs_without_exclusions.is_standard
           FROM ( SELECT cascaded_tc_refs.id,
                    cascaded_tc_refs.taxon_concept_id,
                    cascaded_tc_refs.original_taxon_concept_id,
                    cascaded_tc_refs.excluded_taxon_concepts_ids,
                    cascaded_tc_refs.reference_id,
                    cascaded_tc_refs.is_standard,
                    cascaded_tc_refs.is_cascaded
                   FROM (( SELECT tc_refs_1.id,
                            tc_1.taxon_concept_id,
                            tc_1.ancestor_taxon_concept_id AS original_taxon_concept_id,
                            tc_refs_1.excluded_taxon_concepts_ids,
                            tc_refs_1.reference_id,
                            tc_refs_1.is_standard,
                            tc_refs_1.is_cascaded
                           FROM (public.taxon_concept_references tc_refs_1
                             JOIN public.taxon_concepts_and_ancestors_mview tc_1 ON ((tc_refs_1.is_standard AND tc_refs_1.is_cascaded AND (tc_1.ancestor_taxon_concept_id = tc_refs_1.taxon_concept_id))))) cascaded_tc_refs
                     JOIN public.taxon_concepts tc ON ((cascaded_tc_refs.taxon_concept_id = tc.id)))
                  WHERE ((cascaded_tc_refs.excluded_taxon_concepts_ids IS NULL) OR (NOT (ARRAY[((tc.data OPERATOR(public.->) 'kingdom_id'::text))::integer, ((tc.data OPERATOR(public.->) 'phylum_id'::text))::integer, ((tc.data OPERATOR(public.->) 'class_id'::text))::integer, ((tc.data OPERATOR(public.->) 'order_id'::text))::integer, ((tc.data OPERATOR(public.->) 'family_id'::text))::integer, ((tc.data OPERATOR(public.->) 'subfamily_id'::text))::integer, ((tc.data OPERATOR(public.->) 'genus_id'::text))::integer, ((tc.data OPERATOR(public.->) 'species_id'::text))::integer] && cascaded_tc_refs.excluded_taxon_concepts_ids)))) cascaded_tc_refs_without_exclusions
        UNION ALL
         SELECT taxon_concept_references.id,
            taxon_concept_references.taxon_concept_id,
            taxon_concept_references.taxon_concept_id,
            taxon_concept_references.excluded_taxon_concepts_ids,
            taxon_concept_references.reference_id,
            taxon_concept_references.is_standard
           FROM public.taxon_concept_references
          WHERE (NOT (taxon_concept_references.is_standard AND taxon_concept_references.is_cascaded))) tc_refs
     JOIN public."references" ON (("references".id = tc_refs.reference_id)));


--
-- Name: ar_internal_metadata; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ar_internal_metadata (
    key character varying NOT NULL,
    value character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


--
-- Name: auto_complete_taxon_concepts_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auto_complete_taxon_concepts_mview (
    id integer,
    taxonomy_is_cites_eu boolean,
    name_status character varying(255),
    rank_name character varying(255),
    rank_display_name_en text,
    rank_display_name_es text,
    rank_display_name_fr text,
    rank_order character varying(255),
    taxonomic_position character varying(255),
    show_in_species_plus_ac boolean,
    show_in_checklist_ac boolean,
    show_in_trade_ac boolean,
    show_in_trade_internal_ac boolean,
    name_for_matching text,
    matched_id integer,
    matched_name character varying(255),
    full_name character varying(255),
    author_year character varying(255),
    type_of_match text
);


--
-- Name: ranks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ranks (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    taxonomic_position character varying(255) DEFAULT '0'::character varying NOT NULL,
    fixed_order boolean DEFAULT false NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    display_name_en text NOT NULL,
    display_name_es text,
    display_name_fr text
);


--
-- Name: taxon_relationship_types; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_relationship_types (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    is_intertaxonomic boolean DEFAULT false NOT NULL,
    is_bidirectional boolean DEFAULT false NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: taxon_relationships; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_relationships (
    id integer NOT NULL,
    taxon_concept_id integer NOT NULL,
    other_taxon_concept_id integer NOT NULL,
    taxon_relationship_type_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: auto_complete_taxon_concepts_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.auto_complete_taxon_concepts_view AS
 WITH synonyms_segmented(taxon_concept_id, full_name, author_year, matched_taxon_concept_id, matched_name, matched_name_segment) AS (
         SELECT atc.id,
            atc.full_name,
            atc.author_year,
            tc.id,
            tc.full_name,
            upper(regexp_split_to_table((tc.full_name)::text, '(?:(?!-)[[:space:][:punct:]])+'::text)) AS upper
           FROM (((public.taxon_concepts tc
             JOIN public.taxon_relationships tr ON ((tr.other_taxon_concept_id = tc.id)))
             JOIN public.taxon_relationship_types trt ON (((trt.id = tr.taxon_relationship_type_id) AND ((trt.name)::text = 'HAS_SYNONYM'::text))))
             JOIN public.taxon_concepts atc ON ((atc.id = tr.taxon_concept_id)))
          WHERE (((tc.name_status)::text = 'S'::text) AND ((atc.name_status)::text = 'A'::text))
        ), scientific_names_segmented(taxon_concept_id, full_name, author_year, matched_taxon_concept_id, matched_name, matched_name_segment) AS (
         SELECT taxon_concepts.id,
            taxon_concepts.full_name,
            taxon_concepts.author_year,
            taxon_concepts.id,
            taxon_concepts.full_name,
            upper(regexp_split_to_table((taxon_concepts.full_name)::text, '(?:(?!-)[[:space:][:punct:]])+'::text)) AS upper
           FROM public.taxon_concepts
        ), unlisted_subspecies_segmented(taxon_concept_id, full_name, author_year, matched_taxon_concept_id, matched_name, matched_name_segment) AS (
         SELECT parents.id,
            parents.full_name,
            parents.author_year,
            taxon_concepts.id,
            taxon_concepts.full_name,
            upper(regexp_split_to_table((taxon_concepts.full_name)::text, '(?:(?!-)[[:space:][:punct:]])+'::text)) AS upper
           FROM ((public.taxon_concepts
             JOIN public.ranks ON (((ranks.id = taxon_concepts.rank_id) AND ((ranks.name)::text = ANY ((ARRAY['SUBSPECIES'::character varying, 'VARIETY'::character varying])::text[])))))
             JOIN public.taxon_concepts parents ON ((parents.id = taxon_concepts.parent_id)))
          WHERE (((taxon_concepts.name_status)::text <> ALL ((ARRAY['S'::character varying, 'T'::character varying, 'N'::character varying])::text[])) AND ((parents.name_status)::text = 'A'::text))
        EXCEPT
         SELECT parents.id,
            parents.full_name,
            parents.author_year,
            taxon_concepts.id,
            taxon_concepts.full_name,
            upper(regexp_split_to_table((taxon_concepts.full_name)::text, ' '::text)) AS upper
           FROM (((public.taxon_concepts
             JOIN public.ranks ON (((ranks.id = taxon_concepts.rank_id) AND ((ranks.name)::text = 'SUBSPECIES'::text))))
             JOIN public.taxon_concepts parents ON ((parents.id = taxon_concepts.parent_id)))
             JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
          WHERE (((taxon_concepts.name_status)::text <> ALL ((ARRAY['S'::character varying, 'T'::character varying, 'N'::character varying])::text[])) AND ((parents.name_status)::text = 'A'::text) AND
                CASE
                    WHEN ((taxonomies.name)::text = 'CMS'::text) THEN ((taxon_concepts.listing OPERATOR(public.->) 'cms_historically_listed'::text))::boolean
                    ELSE (((taxon_concepts.listing OPERATOR(public.->) 'cites_historically_listed'::text))::boolean OR ((taxon_concepts.listing OPERATOR(public.->) 'eu_historically_listed'::text))::boolean)
                END)
        ), taxon_common_names AS (
         SELECT taxon_commons.id,
            taxon_commons.taxon_concept_id,
            taxon_commons.common_name_id,
            taxon_commons.created_at,
            taxon_commons.updated_at,
            taxon_commons.created_by_id,
            taxon_commons.updated_by_id,
            common_names.name
           FROM (public.taxon_commons
             JOIN public.common_names ON ((common_names.id = taxon_commons.common_name_id)))
        ), common_names_segmented(taxon_concept_id, full_name, author_year, matched_taxon_concept_id, matched_name, matched_name_segment) AS (
         SELECT taxon_common_names.taxon_concept_id,
            taxon_concepts.full_name,
            taxon_concepts.author_year,
            NULL::integer AS int4,
            taxon_common_names.name,
            upper(regexp_split_to_table((taxon_common_names.name)::text, '(?:(?!-)[[:space:][:punct:]])+'::text)) AS upper
           FROM (taxon_common_names
             JOIN public.taxon_concepts ON ((taxon_common_names.taxon_concept_id = taxon_concepts.id)))
        ), taxon_common_names_dehyphenated AS (
         SELECT taxon_common_names.taxon_concept_id,
            taxon_concepts.full_name,
            taxon_concepts.author_year,
            NULL::integer AS int4,
            taxon_common_names.name,
            upper(replace((taxon_common_names.name)::text, '-'::text, ' '::text)) AS upper
           FROM (taxon_common_names
             JOIN public.taxon_concepts ON ((taxon_common_names.taxon_concept_id = taxon_concepts.id)))
          WHERE (strpos((taxon_common_names.name)::text, '-'::text) > 0)
        ), common_names_segmented_dehyphenated AS (
         SELECT common_names_segmented.taxon_concept_id,
            common_names_segmented.full_name,
            common_names_segmented.author_year,
            common_names_segmented.matched_taxon_concept_id,
            common_names_segmented.matched_name,
            common_names_segmented.matched_name_segment
           FROM common_names_segmented
        UNION
         SELECT common_names_segmented.taxon_concept_id,
            common_names_segmented.full_name,
            common_names_segmented.author_year,
            common_names_segmented.matched_taxon_concept_id,
            common_names_segmented.matched_name,
            regexp_split_to_table(common_names_segmented.matched_name_segment, '-'::text) AS regexp_split_to_table
           FROM common_names_segmented
          WHERE (strpos(common_names_segmented.matched_name_segment, '-'::text) > 0)
        UNION
         SELECT taxon_common_names_dehyphenated.taxon_concept_id,
            taxon_common_names_dehyphenated.full_name,
            taxon_common_names_dehyphenated.author_year,
            taxon_common_names_dehyphenated.int4,
            taxon_common_names_dehyphenated.name,
            taxon_common_names_dehyphenated.upper
           FROM taxon_common_names_dehyphenated
        ), all_names_segmented_cleaned AS (
         SELECT all_names_segmented_no_prefixes.taxon_concept_id,
            all_names_segmented_no_prefixes.full_name,
            all_names_segmented_no_prefixes.author_year,
            all_names_segmented_no_prefixes.matched_taxon_concept_id,
            all_names_segmented_no_prefixes.matched_name,
            all_names_segmented_no_prefixes.matched_name_segment,
            all_names_segmented_no_prefixes.type_of_match
           FROM ( SELECT all_names_segmented.taxon_concept_id,
                    all_names_segmented.full_name,
                    all_names_segmented.author_year,
                    all_names_segmented.matched_taxon_concept_id,
                    all_names_segmented.matched_name,
                        CASE
                            WHEN ("position"(upper(public.unaccent('public.unaccent'::regdictionary, (all_names_segmented.matched_name)::text)), upper(public.unaccent('public.unaccent'::regdictionary, all_names_segmented.matched_name_segment))) = 1) THEN upper(public.unaccent('public.unaccent'::regdictionary, (all_names_segmented.matched_name)::text))
                            ELSE all_names_segmented.matched_name_segment
                        END AS matched_name_segment,
                    all_names_segmented.type_of_match
                   FROM ( SELECT scientific_names_segmented.taxon_concept_id,
                            scientific_names_segmented.full_name,
                            scientific_names_segmented.author_year,
                            scientific_names_segmented.matched_taxon_concept_id,
                            scientific_names_segmented.matched_name,
                            scientific_names_segmented.matched_name_segment,
                            'SELF'::text AS type_of_match
                           FROM scientific_names_segmented
                        UNION
                         SELECT synonyms_segmented.taxon_concept_id,
                            synonyms_segmented.full_name,
                            synonyms_segmented.author_year,
                            synonyms_segmented.matched_taxon_concept_id,
                            synonyms_segmented.matched_name,
                            synonyms_segmented.matched_name_segment,
                            'SYNONYM'::text
                           FROM synonyms_segmented
                        UNION
                         SELECT unlisted_subspecies_segmented.taxon_concept_id,
                            unlisted_subspecies_segmented.full_name,
                            unlisted_subspecies_segmented.author_year,
                            unlisted_subspecies_segmented.matched_taxon_concept_id,
                            unlisted_subspecies_segmented.matched_name,
                            unlisted_subspecies_segmented.matched_name_segment,
                            'SUBSPECIES'::text
                           FROM unlisted_subspecies_segmented
                        UNION
                         SELECT common_names_segmented_dehyphenated.taxon_concept_id,
                            common_names_segmented_dehyphenated.full_name,
                            common_names_segmented_dehyphenated.author_year,
                            common_names_segmented_dehyphenated.matched_taxon_concept_id,
                            common_names_segmented_dehyphenated.matched_name,
                            common_names_segmented_dehyphenated.matched_name_segment,
                            'COMMON_NAME'::text
                           FROM common_names_segmented_dehyphenated) all_names_segmented) all_names_segmented_no_prefixes
          WHERE ((length(all_names_segmented_no_prefixes.matched_name_segment) >= 3) OR ((all_names_segmented_no_prefixes.type_of_match = 'COMMON_NAME'::text) AND (all_names_segmented_no_prefixes.matched_name_segment ~ '[^\x00-\u0530]'::text)))
        ), taxa_with_visibility_flags AS (
         SELECT taxon_concepts.id,
                CASE
                    WHEN ((taxonomies.name)::text = 'CITES_EU'::text) THEN true
                    ELSE false
                END AS taxonomy_is_cites_eu,
            taxon_concepts.name_status,
            ranks.name AS rank_name,
            ranks.display_name_en AS rank_display_name_en,
            ranks.display_name_es AS rank_display_name_es,
            ranks.display_name_fr AS rank_display_name_fr,
            ranks.taxonomic_position AS rank_order,
            taxon_concepts.taxonomic_position,
                CASE
                    WHEN (((taxon_concepts.name_status)::text = 'A'::text) AND ((((ranks.name)::text <> 'SUBSPECIES'::text) AND ((ranks.name)::text <> 'VARIETY'::text)) OR (((taxonomies.name)::text = 'CITES_EU'::text) AND (((taxon_concepts.listing OPERATOR(public.->) 'cites_historically_listed'::text))::boolean OR ((taxon_concepts.listing OPERATOR(public.->) 'eu_historically_listed'::text))::boolean)) OR (((taxonomies.name)::text = 'CMS'::text) AND ((taxon_concepts.listing OPERATOR(public.->) 'cms_historically_listed'::text))::boolean))) THEN true
                    ELSE false
                END AS show_in_species_plus_ac,
                CASE
                    WHEN (((taxon_concepts.name_status)::text = 'A'::text) AND (((taxon_concepts.listing OPERATOR(public.->) 'cites_show'::text))::boolean OR ((taxon_concepts.listing OPERATOR(public.->) 'cites_listed_descendants'::text))::boolean)) THEN true
                    ELSE false
                END AS show_in_checklist_ac,
                CASE
                    WHEN (((taxonomies.name)::text = 'CITES_EU'::text) AND (ARRAY['A'::character varying, 'H'::character varying, 'N'::character varying] && ARRAY[taxon_concepts.name_status])) THEN true
                    ELSE false
                END AS show_in_trade_ac,
                CASE
                    WHEN (((taxonomies.name)::text = 'CITES_EU'::text) AND (ARRAY['A'::character varying, 'H'::character varying, 'N'::character varying, 'T'::character varying] && ARRAY[taxon_concepts.name_status])) THEN true
                    ELSE false
                END AS show_in_trade_internal_ac
           FROM ((public.taxon_concepts
             JOIN public.ranks ON ((ranks.id = taxon_concepts.rank_id)))
             JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
        )
 SELECT t1.id,
    t1.taxonomy_is_cites_eu,
    t1.name_status,
    t1.rank_name,
    t1.rank_display_name_en,
    t1.rank_display_name_es,
    t1.rank_display_name_fr,
    t1.rank_order,
    t1.taxonomic_position,
    t1.show_in_species_plus_ac,
    t1.show_in_checklist_ac,
    t1.show_in_trade_ac,
    t1.show_in_trade_internal_ac,
    upper(public.unaccent('public.unaccent'::regdictionary, t2.matched_name_segment)) AS name_for_matching,
    t2.matched_taxon_concept_id AS matched_id,
    t2.matched_name,
    t2.full_name,
    t2.author_year,
    t2.type_of_match
   FROM (taxa_with_visibility_flags t1
     JOIN all_names_segmented_cleaned t2 ON ((t1.id = t2.taxon_concept_id)));


--
-- Name: bulk_downloads; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.bulk_downloads (
    id bigint NOT NULL,
    download_type character varying NOT NULL,
    format character varying NOT NULL,
    filters jsonb DEFAULT '{}'::jsonb NOT NULL,
    is_public boolean DEFAULT false NOT NULL,
    error_message jsonb,
    success_message jsonb,
    requestor_id bigint,
    started_at timestamp without time zone,
    completed_at timestamp without time zone,
    expires_at timestamp without time zone,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


--
-- Name: bulk_downloads_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.bulk_downloads_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: bulk_downloads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.bulk_downloads_id_seq OWNED BY public.bulk_downloads.id;


--
-- Name: change_types; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.change_types (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    designation_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    display_name_en text NOT NULL,
    display_name_es text,
    display_name_fr text
);


--
-- Name: change_types_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.change_types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: change_types_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.change_types_id_seq OWNED BY public.change_types.id;


--
-- Name: child_cites_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_cites_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
)
INHERITS (public.cites_listing_changes_mview);


--
-- Name: cms_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cms_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone,
    event_id integer,
    geo_entity_type character varying(255)
);


--
-- Name: child_cms_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_cms_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
)
INHERITS (public.cms_listing_changes_mview);


--
-- Name: child_eu_263_267_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_263_267_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_263_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_263_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_267_263_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_267_263_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_268_322_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_268_322_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_268_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_268_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_322_339_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_322_339_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_322_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_322_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_339_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_339_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_361_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_361_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_41_55_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_41_55_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_42_44_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_42_44_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_42_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_42_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_47_42_44_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_47_42_44_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_49_66_41_48_55_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_49_66_41_48_55_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_54_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_54_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_55_41_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_55_41_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_55_49_66_41_48_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_55_49_66_41_48_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_55_66_41_48_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_55_66_41_48_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_55_66_41_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_55_66_41_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_62_54_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_62_54_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_65_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_65_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_66_41_48_55_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_66_41_48_55_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_66_41_55_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_66_41_55_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_67_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_67_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_71_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_71_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_72_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_72_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_73_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_73_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_74_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_74_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_76_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_76_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_98_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_98_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: child_eu_listing_changes_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.child_eu_listing_changes_mview (
    taxon_concept_id integer,
    id integer,
    original_taxon_concept_id integer,
    event_id integer,
    effective_at timestamp without time zone,
    species_listing_id integer,
    species_listing_name character varying(255),
    change_type_id integer,
    change_type_name character varying(255),
    designation_id integer,
    designation_name character varying(255),
    parent_id integer,
    nomenclature_note_en text,
    nomenclature_note_fr text,
    nomenclature_note_es text,
    party_id integer,
    party_iso_code character varying(255),
    party_full_name_en character varying(255),
    party_full_name_es character varying(255),
    party_full_name_fr character varying(255),
    geo_entity_type character varying(255),
    ann_symbol character varying(255),
    full_note_en text,
    full_note_es text,
    full_note_fr text,
    short_note_en text,
    short_note_es text,
    short_note_fr text,
    display_in_index boolean,
    display_in_footnote boolean,
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    hash_full_note_en text,
    hash_full_note_es text,
    hash_full_note_fr text,
    inclusion_taxon_concept_id integer,
    inherited_short_note_en text,
    inherited_full_note_en text,
    inherited_short_note_es text,
    inherited_full_note_es text,
    inherited_short_note_fr text,
    inherited_full_note_fr text,
    auto_note_en text,
    auto_note_es text,
    auto_note_fr text,
    is_current boolean,
    explicit_change boolean,
    updated_at timestamp without time zone,
    show_in_history boolean,
    show_in_downloads boolean,
    show_in_timeline boolean,
    listed_geo_entities_ids integer[],
    excluded_geo_entities_ids integer[],
    excluded_taxon_concept_ids integer[],
    dirty boolean,
    expiry timestamp with time zone
)
INHERITS (public.eu_listing_changes_mview);


--
-- Name: cites_eu_taxon_concepts_and_ancestors_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.cites_eu_taxon_concepts_and_ancestors_view AS
 SELECT taxon_concepts_and_ancestors_mview.taxon_concept_id,
    taxon_concepts_and_ancestors_mview.taxonomy_id,
    taxon_concepts_and_ancestors_mview.ancestor_taxon_concept_id,
    taxon_concepts_and_ancestors_mview.tree_distance
   FROM public.taxon_concepts_and_ancestors_mview
  WHERE (taxon_concepts_and_ancestors_mview.taxonomy_id = 1);


--
-- Name: cites_processes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cites_processes (
    id integer NOT NULL,
    resolution character varying(255),
    taxon_concept_id integer,
    geo_entity_id integer,
    start_event_id integer,
    start_date timestamp without time zone,
    status character varying(255),
    document text,
    type character varying(255),
    created_by_id integer,
    updated_by_id integer,
    notes text,
    case_id integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    document_title text
);


--
-- Name: cites_processes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.cites_processes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: cites_processes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.cites_processes_id_seq OWNED BY public.cites_processes.id;


--
-- Name: cites_species_listing_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cites_species_listing_mview (
    id integer,
    taxonomic_position character varying(255),
    kingdom_id integer,
    phylum_id integer,
    class_id integer,
    order_id integer,
    family_id integer,
    genus_id integer,
    kingdom_name character varying(255),
    phylum_name character varying(255),
    class_name character varying(255),
    order_name character varying(255),
    family_name character varying(255),
    genus_name character varying(255),
    species_name character varying(255),
    subspecies_name character varying(255),
    full_name character varying(255),
    author_year character varying(255),
    rank_name character varying(255),
    cites_listed boolean,
    cites_nc boolean,
    cites_listing_original character varying,
    original_taxon_concept_party_iso_code text,
    original_taxon_concept_full_name_with_spp text,
    original_taxon_concept_full_note_en text,
    original_taxon_concept_hash_full_note_en text,
    countries_ids_ary integer[],
    all_distribution text,
    all_distribution_iso_codes text,
    native_distribution text,
    introduced_distribution text,
    introduced_uncertain_distribution text,
    reintroduced_distribution text,
    extinct_distribution text,
    extinct_uncertain_distribution text,
    uncertain_distribution text
);


--
-- Name: cites_suspension_confirmations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cites_suspension_confirmations (
    id integer NOT NULL,
    cites_suspension_id integer NOT NULL,
    cites_suspension_notification_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: cites_suspension_confirmations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.cites_suspension_confirmations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: cites_suspension_confirmations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.cites_suspension_confirmations_id_seq OWNED BY public.cites_suspension_confirmations.id;


--
-- Name: cms_mappings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cms_mappings (
    id integer NOT NULL,
    taxon_concept_id integer,
    cms_uuid character varying(255),
    cms_taxon_name character varying(255),
    cms_author character varying(255),
    details public.hstore,
    accepted_name_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: cms_mappings_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.cms_mappings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: cms_mappings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.cms_mappings_id_seq OWNED BY public.cms_mappings.id;


--
-- Name: cms_species_listing_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cms_species_listing_mview (
    id integer,
    taxonomic_position character varying(255),
    kingdom_id integer,
    phylum_id integer,
    class_id integer,
    order_id integer,
    family_id integer,
    genus_id integer,
    phylum_name character varying(255),
    class_name character varying(255),
    order_name character varying(255),
    family_name character varying(255),
    genus_name character varying(255),
    full_name character varying(255),
    author_year character varying(255),
    rank_name character varying(255),
    agreement character varying,
    cms_listed boolean,
    cms_listing_original character varying,
    original_taxon_concept_full_name_with_spp text,
    original_taxon_concept_effective_at text,
    original_taxon_concept_full_note_en text,
    countries_ids_ary integer[],
    all_distribution text,
    all_distribution_iso_codes text,
    native_distribution text,
    introduced_distribution text,
    introduced_uncertain_distribution text,
    reintroduced_distribution text,
    extinct_distribution text,
    extinct_uncertain_distribution text,
    uncertain_distribution text
);


--
-- Name: cms_taxon_concepts_and_ancestors_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.cms_taxon_concepts_and_ancestors_view AS
 SELECT taxon_concepts_and_ancestors_mview.taxon_concept_id,
    taxon_concepts_and_ancestors_mview.taxonomy_id,
    taxon_concepts_and_ancestors_mview.ancestor_taxon_concept_id,
    taxon_concepts_and_ancestors_mview.tree_distance
   FROM public.taxon_concepts_and_ancestors_mview
  WHERE (taxon_concepts_and_ancestors_mview.taxonomy_id = 2);


--
-- Name: comments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.comments (
    id integer NOT NULL,
    commentable_id integer,
    commentable_type character varying(255),
    comment_type character varying(255),
    note text,
    created_by_id integer,
    updated_by_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.comments_id_seq OWNED BY public.comments.id;


--
-- Name: common_names_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.common_names_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: common_names_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.common_names_id_seq OWNED BY public.common_names.id;


--
-- Name: common_names_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.common_names_view AS
 SELECT st.name_status,
    st.id,
    (st.data OPERATOR(public.->) 'phylum_name'::text) AS accepted_phylum_name,
    (st.data OPERATOR(public.->) 'class_name'::text) AS accepted_class_name,
    (st.data OPERATOR(public.->) 'order_name'::text) AS accepted_order_name,
    (st.data OPERATOR(public.->) 'family_name'::text) AS accepted_family_name,
    st.full_name,
    st.author_year,
    (st.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    st.taxonomic_position,
    n.name AS common_name,
    l.name_en AS common_name_language,
    taxonomies.name AS taxonomy_name,
    to_char(c.created_at, 'DD/MM/YYYY'::text) AS created_at,
    uc.name AS created_by,
    to_char(c.updated_at, 'DD/MM/YYYY'::text) AS updated_at,
    uu.name AS updated_by,
    taxonomies.id AS taxonomy_id
   FROM ((((((public.taxon_concepts st
     JOIN public.taxonomies ON ((taxonomies.id = st.taxonomy_id)))
     LEFT JOIN public.taxon_commons c ON ((c.taxon_concept_id = st.id)))
     LEFT JOIN public.common_names n ON ((c.common_name_id = n.id)))
     LEFT JOIN public.languages l ON ((n.language_id = l.id)))
     LEFT JOIN public.users uc ON ((c.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((c.updated_by_id = uu.id)))
  WHERE ((st.name_status)::text = 'A'::text);


--
-- Name: designation_geo_entities; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.designation_geo_entities (
    id integer NOT NULL,
    designation_id integer NOT NULL,
    geo_entity_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: designation_geo_entities_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.designation_geo_entities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: designation_geo_entities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.designation_geo_entities_id_seq OWNED BY public.designation_geo_entities.id;


--
-- Name: designations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.designations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: designations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.designations_id_seq OWNED BY public.designations.id;


--
-- Name: distribution_references_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.distribution_references_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: distribution_references_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.distribution_references_id_seq OWNED BY public.distribution_references.id;


--
-- Name: distributions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.distributions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: distributions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.distributions_id_seq OWNED BY public.distributions.id;


--
-- Name: document_citation_geo_entities; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_citation_geo_entities (
    id integer NOT NULL,
    document_citation_id integer,
    geo_entity_id integer,
    created_by_id integer,
    updated_by_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: document_citation_geo_entities_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.document_citation_geo_entities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: document_citation_geo_entities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.document_citation_geo_entities_id_seq OWNED BY public.document_citation_geo_entities.id;


--
-- Name: document_citation_taxon_concepts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_citation_taxon_concepts (
    id integer NOT NULL,
    document_citation_id integer,
    taxon_concept_id integer,
    created_by_id integer,
    updated_by_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: document_citation_taxon_concepts_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.document_citation_taxon_concepts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: document_citation_taxon_concepts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.document_citation_taxon_concepts_id_seq OWNED BY public.document_citation_taxon_concepts.id;


--
-- Name: document_citations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_citations (
    id integer NOT NULL,
    document_id integer,
    created_by_id integer,
    updated_by_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    elib_legacy_id integer
);


--
-- Name: document_citations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.document_citations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: document_citations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.document_citations_id_seq OWNED BY public.document_citations.id;


--
-- Name: document_citations_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.document_citations_view AS
 SELECT dc.id,
    dc.document_id,
    dctc.taxon_concept_id,
    tc.full_name,
    dcge.geo_entity_id,
    ge.name_en
   FROM ((((public.document_citations dc
     LEFT JOIN public.document_citation_taxon_concepts dctc ON ((dctc.document_citation_id = dc.id)))
     LEFT JOIN public.taxon_concepts tc ON (((tc.id = dctc.taxon_concept_id) AND ((tc.name_status)::text = ANY (ARRAY[('A'::character varying)::text, ('N'::character varying)::text])))))
     LEFT JOIN public.document_citation_geo_entities dcge ON ((dcge.document_citation_id = dc.id)))
     LEFT JOIN public.geo_entities ge ON ((ge.id = dcge.geo_entity_id)))
  GROUP BY dc.id, dc.document_id, dctc.taxon_concept_id, tc.full_name, dcge.geo_entity_id, ge.name_en;


--
-- Name: document_citations_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.document_citations_mview AS
 SELECT document_citations_view.id,
    document_citations_view.document_id,
    document_citations_view.taxon_concept_id,
    document_citations_view.full_name,
    document_citations_view.geo_entity_id,
    document_citations_view.name_en
   FROM public.document_citations_view
  WITH NO DATA;


--
-- Name: document_tags; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_tags (
    id integer NOT NULL,
    name text NOT NULL,
    type character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: document_tags_documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_tags_documents (
    document_id integer,
    document_tag_id integer
);


--
-- Name: document_tags_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.document_tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: document_tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.document_tags_id_seq OWNED BY public.document_tags.id;


--
-- Name: documents_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.documents_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: documents_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.documents_id_seq OWNED BY public.documents.id;


--
-- Name: downloads; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.downloads (
    id integer NOT NULL,
    doc_type character varying(255),
    format character varying(255),
    status character varying(255) DEFAULT 'working'::character varying,
    path character varying(255),
    filename character varying(255),
    display_name character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: downloads_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.downloads_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: downloads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.downloads_id_seq OWNED BY public.downloads.id;


--
-- Name: duplicated_full_name; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.duplicated_full_name AS
 WITH duplicated_ids_aggregated AS (
         SELECT array_agg(taxon_concepts.id) AS duplicated_ids
           FROM public.taxon_concepts
          GROUP BY taxon_concepts.full_name, taxon_concepts.taxonomy_id
         HAVING (count(*) > 1)
        ), duplicated_ids AS (
         SELECT unnest(duplicated_ids_aggregated.duplicated_ids) AS id
           FROM duplicated_ids_aggregated
        )
 SELECT tc.id,
    tc.parent_id,
    tc.taxonomy_id,
    tc.full_name,
    tc.author_year,
    tc.name_status,
    tc.created_at,
    tc.updated_at
   FROM (duplicated_ids
     JOIN public.taxon_concepts tc ON ((tc.id = duplicated_ids.id)))
  ORDER BY tc.full_name, COALESCE(tc.author_year, ''::character varying);


--
-- Name: duplicated_full_name_and_author_year; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.duplicated_full_name_and_author_year AS
 WITH duplicated_ids_aggregated AS (
         SELECT array_agg(taxon_concepts.id) AS duplicated_ids
           FROM public.taxon_concepts
          GROUP BY taxon_concepts.full_name, COALESCE(taxon_concepts.author_year, ''::character varying), taxon_concepts.taxonomy_id
         HAVING (count(*) > 1)
        ), duplicated_ids AS (
         SELECT unnest(duplicated_ids_aggregated.duplicated_ids) AS id
           FROM duplicated_ids_aggregated
        )
 SELECT tc.id,
    tc.parent_id,
    tc.taxonomy_id,
    tc.full_name,
    tc.author_year,
    tc.name_status,
    tc.created_at,
    tc.updated_at
   FROM (duplicated_ids
     JOIN public.taxon_concepts tc ON ((tc.id = duplicated_ids.id)))
  ORDER BY tc.full_name, COALESCE(tc.author_year, ''::character varying);


--
-- Name: eu_country_dates; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_country_dates (
    id integer NOT NULL,
    geo_entity_id integer,
    eu_accession_year integer,
    eu_exit_year integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


--
-- Name: eu_country_dates_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.eu_country_dates_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_country_dates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.eu_country_dates_id_seq OWNED BY public.eu_country_dates.id;


--
-- Name: eu_decision_confirmations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_decision_confirmations (
    id integer NOT NULL,
    eu_decision_id integer,
    event_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: eu_decision_confirmations_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.eu_decision_confirmations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_decision_confirmations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.eu_decision_confirmations_id_seq OWNED BY public.eu_decision_confirmations.id;


--
-- Name: eu_decision_types_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.eu_decision_types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_decision_types_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.eu_decision_types_id_seq OWNED BY public.eu_decision_types.id;


--
-- Name: eu_decisions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.eu_decisions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: eu_decisions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.eu_decisions_id_seq OWNED BY public.eu_decisions.id;


--
-- Name: eu_suspensions_applicability_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.eu_suspensions_applicability_view AS
 WITH RECURSIVE eu_decisions_with_end_dates AS (
         SELECT eu_decisions.id,
            eu_decisions.taxon_concept_id,
            eu_decisions.geo_entity_id,
            eu_decisions.term_id,
            eu_decisions.source_id,
            start_event.effective_at AS start_event_date,
            end_event.effective_at AS end_event_date
           FROM ((public.eu_decisions
             JOIN public.events start_event ON ((start_event.id = eu_decisions.start_event_id)))
             LEFT JOIN public.events end_event ON ((end_event.id = eu_decisions.end_event_id)))
          WHERE ((eu_decisions.type)::text = 'EuSuspension'::text)
        ), eu_decisions_chain AS (
         SELECT eu_decisions_with_end_dates.id,
            eu_decisions_with_end_dates.taxon_concept_id,
            eu_decisions_with_end_dates.geo_entity_id,
            eu_decisions_with_end_dates.term_id,
            eu_decisions_with_end_dates.source_id,
            eu_decisions_with_end_dates.start_event_date,
            eu_decisions_with_end_dates.end_event_date,
            eu_decisions_with_end_dates.start_event_date AS new_start_event_date
           FROM eu_decisions_with_end_dates
          WHERE (eu_decisions_with_end_dates.end_event_date IS NULL)
        UNION
         SELECT eu_decisions_chain_1.id,
            eu_decisions_chain_1.taxon_concept_id,
            eu_decisions_chain_1.geo_entity_id,
            eu_decisions_chain_1.term_id,
            eu_decisions_chain_1.source_id,
            eu_decisions_chain_1.start_event_date,
            eu_decisions_chain_1.end_event_date,
            eu_decisions_with_end_dates.start_event_date
           FROM (eu_decisions_chain eu_decisions_chain_1
             JOIN eu_decisions_with_end_dates ON (((eu_decisions_chain_1.taxon_concept_id = eu_decisions_with_end_dates.taxon_concept_id) AND (eu_decisions_chain_1.geo_entity_id = eu_decisions_with_end_dates.geo_entity_id) AND ((eu_decisions_chain_1.term_id = eu_decisions_with_end_dates.term_id) OR ((eu_decisions_chain_1.term_id IS NULL) AND (eu_decisions_with_end_dates.term_id IS NULL))) AND ((eu_decisions_chain_1.source_id = eu_decisions_with_end_dates.source_id) OR ((eu_decisions_chain_1.source_id IS NULL) AND (eu_decisions_with_end_dates.source_id IS NULL))) AND (eu_decisions_chain_1.new_start_event_date = eu_decisions_with_end_dates.end_event_date))))
        )
 SELECT eu_decisions_chain.id,
    min(eu_decisions_chain.new_start_event_date) AS original_start_date,
    to_char(min(eu_decisions_chain.new_start_event_date), 'DD/MM/YYYY'::text) AS original_start_date_formatted
   FROM eu_decisions_chain
  GROUP BY eu_decisions_chain.id;


--
-- Name: eu_decisions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.eu_decisions_view AS
 SELECT eu_decisions.taxon_concept_id,
    taxon_concepts.taxonomic_position,
    ((taxon_concepts.data OPERATOR(public.->) 'kingdom_id'::text))::integer AS kingdom_id,
    ((taxon_concepts.data OPERATOR(public.->) 'phylum_id'::text))::integer AS phylum_id,
    ((taxon_concepts.data OPERATOR(public.->) 'class_id'::text))::integer AS class_id,
    ((taxon_concepts.data OPERATOR(public.->) 'order_id'::text))::integer AS order_id,
    ((taxon_concepts.data OPERATOR(public.->) 'family_id'::text))::integer AS family_id,
    (taxon_concepts.data OPERATOR(public.->) 'kingdom_name'::text) AS kingdom_name,
    (taxon_concepts.data OPERATOR(public.->) 'phylum_name'::text) AS phylum_name,
    (taxon_concepts.data OPERATOR(public.->) 'class_name'::text) AS class_name,
    (taxon_concepts.data OPERATOR(public.->) 'order_name'::text) AS order_name,
    (taxon_concepts.data OPERATOR(public.->) 'family_name'::text) AS family_name,
    (taxon_concepts.data OPERATOR(public.->) 'genus_name'::text) AS genus_name,
    lower((taxon_concepts.data OPERATOR(public.->) 'species_name'::text)) AS species_name,
    lower((taxon_concepts.data OPERATOR(public.->) 'subspecies_name'::text)) AS subspecies_name,
    taxon_concepts.full_name,
    (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    eu_decisions.start_date,
    to_char(eu_decisions.start_date, 'DD/MM/YYYY'::text) AS start_date_formatted,
    t.original_start_date,
    to_char(t.original_start_date, 'DD/MM/YYYY'::text) AS original_start_date_formatted,
    eu_decisions.geo_entity_id,
    geo_entities.name_en AS party,
        CASE
            WHEN ((eu_decision_types.name)::text ~* '^i+\)'::text) THEN (('(No opinion) '::text || (eu_decision_types.name)::text))::character varying
            ELSE eu_decision_types.name
        END AS decision_type_for_display,
    eu_decision_types.decision_type,
    srg_histories.name AS srg_history,
    sources.name_en AS source_name,
    (((sources.code)::text || ' - '::text) || (sources.name_en)::text) AS source_code_and_name,
    terms.name_en AS term_name,
    eu_decisions.notes,
        CASE
            WHEN (start_event.name IS NULL) THEN 'Intersessional decision'::character varying
            ELSE start_event.name
        END AS start_event_name,
        CASE
            WHEN ((((eu_decisions.type)::text = 'EuOpinion'::text) AND eu_decisions.is_current) OR (((eu_decisions.type)::text = 'EuSuspension'::text) AND (start_event.effective_at < CURRENT_DATE) AND (start_event.is_current = true) AND ((eu_decisions.end_event_id IS NULL) OR (end_event.effective_at > CURRENT_DATE)))) THEN true
            ELSE false
        END AS is_valid,
        CASE
            WHEN ((((eu_decisions.type)::text = 'EuOpinion'::text) AND eu_decisions.is_current) OR (((eu_decisions.type)::text = 'EuSuspension'::text) AND (start_event.effective_at < CURRENT_DATE) AND (start_event.is_current = true) AND ((eu_decisions.end_event_id IS NULL) OR (end_event.effective_at > CURRENT_DATE)))) THEN 'Valid'::text
            ELSE 'Not Valid'::text
        END AS is_valid_for_display,
        CASE
            WHEN ((eu_decisions.type)::text = 'EuOpinion'::text) THEN eu_decisions.start_date
            WHEN ((eu_decisions.type)::text = 'EuSuspension'::text) THEN start_event.effective_at
            ELSE NULL::timestamp without time zone
        END AS ordering_date,
    (
        CASE
            WHEN (length(eu_decisions.notes) > 0) THEN public.strip_tags(eu_decisions.notes)
            ELSE ''::text
        END ||
        CASE
            WHEN (length(eu_decisions.nomenclature_note_en) > 0) THEN ('
'::text || public.strip_tags(eu_decisions.nomenclature_note_en))
            ELSE ''::text
        END) AS full_note_en
   FROM (((((((((public.eu_decisions
     LEFT JOIN public.eu_decision_types ON ((eu_decision_types.id = eu_decisions.eu_decision_type_id)))
     JOIN public.taxon_concepts ON ((taxon_concepts.id = eu_decisions.taxon_concept_id)))
     LEFT JOIN public.srg_histories ON ((srg_histories.id = eu_decisions.srg_history_id)))
     LEFT JOIN public.events start_event ON ((start_event.id = eu_decisions.start_event_id)))
     LEFT JOIN public.events end_event ON ((end_event.id = eu_decisions.end_event_id)))
     LEFT JOIN public.geo_entities ON ((geo_entities.id = eu_decisions.geo_entity_id)))
     LEFT JOIN public.trade_codes sources ON ((((sources.type)::text = 'Source'::text) AND (sources.id = eu_decisions.source_id))))
     LEFT JOIN public.trade_codes terms ON ((((terms.type)::text = 'Term'::text) AND (terms.id = eu_decisions.term_id))))
     LEFT JOIN public.eu_suspensions_applicability_view t ON ((t.id = eu_decisions.id)));


--
-- Name: eu_decisions_with_missing_source; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_decisions_with_missing_source (
    full_name text,
    rank_name text,
    start_date text,
    party_name text,
    decision_type text,
    source_code text,
    term_code text,
    notes text
);


--
-- Name: eu_opinions_to_not_current; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_opinions_to_not_current (
    taxon_concept_id integer,
    start_regulation_name text,
    country_name text,
    start_date text,
    opinion_name text,
    term_code text,
    source_code text,
    is_current text
);


--
-- Name: eu_regulations_applicability_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.eu_regulations_applicability_view AS
 WITH regulation_applicability_periods AS (
         SELECT DISTINCT events_1.effective_at,
            events_1.end_date
           FROM public.events events_1
          WHERE (((events_1.type)::text = 'EuRegulation'::text) AND (events_1.effective_at >= '1997-06-01 00:00:00'::timestamp without time zone))
          ORDER BY events_1.effective_at, events_1.end_date
        ), overlapping(start_date, end_date) AS (
         SELECT outer_i.effective_at,
                CASE
                    WHEN (inner_i.effective_at = outer_i.effective_at) THEN inner_i.end_date
                    ELSE inner_i.effective_at
                END AS effective_at
           FROM (regulation_applicability_periods outer_i
             JOIN regulation_applicability_periods inner_i ON (((outer_i.effective_at < inner_i.effective_at) AND (outer_i.end_date = inner_i.end_date))))
          ORDER BY inner_i.effective_at
        ), non_overlapping(start_date, end_date) AS (
         SELECT outer_i.effective_at,
            outer_i.end_date
           FROM (regulation_applicability_periods outer_i
             LEFT JOIN regulation_applicability_periods inner_i ON (((outer_i.effective_at < inner_i.effective_at) AND (outer_i.end_date = inner_i.end_date))))
          WHERE (inner_i.effective_at IS NULL)
        ), intervals(start_date, end_date) AS (
         SELECT i.start_date,
            min(i.end_date) AS min
           FROM ( SELECT overlapping.start_date,
                    overlapping.end_date
                   FROM overlapping
                UNION
                 SELECT non_overlapping.start_date,
                    non_overlapping.end_date
                   FROM non_overlapping) i
          GROUP BY i.start_date
        )
 SELECT (intervals.start_date)::date AS start_date,
    (intervals.end_date)::date AS end_date,
    array_agg(events.id) AS events_ids
   FROM (intervals
     JOIN public.events ON ((((events.type)::text = 'EuRegulation'::text) AND (events.effective_at <= intervals.start_date) AND ((events.end_date >= intervals.end_date) OR (events.end_date IS NULL)))))
  GROUP BY intervals.start_date, intervals.end_date
  ORDER BY intervals.start_date;


--
-- Name: eu_species_listing_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.eu_species_listing_mview (
    id integer,
    taxonomic_position character varying(255),
    kingdom_id integer,
    phylum_id integer,
    class_id integer,
    order_id integer,
    family_id integer,
    genus_id integer,
    kingdom_name character varying(255),
    phylum_name character varying(255),
    class_name character varying(255),
    order_name character varying(255),
    family_name character varying(255),
    genus_name character varying(255),
    species_name character varying(255),
    subspecies_name character varying(255),
    full_name character varying(255),
    author_year character varying(255),
    rank_name character varying(255),
    eu_listed boolean,
    eu_listing_original character varying,
    cites_listing_original character varying,
    original_taxon_concept_party_iso_code text,
    original_taxon_concept_full_name_with_spp text,
    original_taxon_concept_full_note_en text,
    original_taxon_concept_hash_full_note_en text,
    countries_ids_ary integer[],
    all_distribution text,
    all_distribution_iso_codes text,
    native_distribution text,
    introduced_distribution text,
    introduced_uncertain_distribution text,
    reintroduced_distribution text,
    extinct_distribution text,
    extinct_uncertain_distribution text,
    uncertain_distribution text
);


--
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.events_id_seq OWNED BY public.events.id;


--
-- Name: ft_trade_shipments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.ft_trade_shipments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geo_entities_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.geo_entities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geo_entities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.geo_entities_id_seq OWNED BY public.geo_entities.id;


--
-- Name: geo_entity_types_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.geo_entity_types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geo_entity_types_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.geo_entity_types_id_seq OWNED BY public.geo_entity_types.id;


--
-- Name: geo_relationship_types; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.geo_relationship_types (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: geo_relationship_types_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.geo_relationship_types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geo_relationship_types_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.geo_relationship_types_id_seq OWNED BY public.geo_relationship_types.id;


--
-- Name: geo_relationships; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.geo_relationships (
    id integer NOT NULL,
    geo_entity_id integer NOT NULL,
    other_geo_entity_id integer NOT NULL,
    geo_relationship_type_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: geo_relationships_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.geo_relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: geo_relationships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.geo_relationships_id_seq OWNED BY public.geo_relationships.id;


--
-- Name: instruments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.instruments (
    id integer NOT NULL,
    designation_id integer,
    name character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: instruments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.instruments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: instruments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.instruments_id_seq OWNED BY public.instruments.id;


--
-- Name: iucn_mappings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.iucn_mappings (
    id integer NOT NULL,
    taxon_concept_id integer,
    iucn_taxon_id integer,
    iucn_taxon_name character varying(255),
    iucn_author character varying(255),
    iucn_category character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    details public.hstore,
    accepted_name_id integer
);


--
-- Name: iucn_mappings_export; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.iucn_mappings_export AS
 WITH accepted_and_synonym_matches("TaxonConcept id", "TaxonConcept class", "TaxonConcept name", "TaxonConcept name status", "TaxonConcept author", "TaxonConcept taxonomic position", "IUCN taxon id", "IUCN taxon name", "IUCN taxon author", "IUCN category", "Type of match", "Type of name matched", "Synonym name (if matched)", "Synonym id (if matched)") AS (
         SELECT taxon_concepts.id,
            (taxon_concepts.data OPERATOR(public.->) 'class_name'::text),
            taxon_concepts.full_name,
            taxon_concepts.name_status,
            taxon_concepts.author_year,
            taxon_concepts.taxonomic_position,
            iucn_mappings.iucn_taxon_id,
            iucn_mappings.iucn_taxon_name,
            iucn_mappings.iucn_author,
            iucn_mappings.iucn_category,
            (iucn_mappings.details OPERATOR(public.->) 'match'::text),
            'A MATCH'::text AS text,
            NULL::character varying AS "varchar",
            NULL::integer AS int4
           FROM (public.iucn_mappings
             JOIN public.taxon_concepts ON ((taxon_concepts.id = iucn_mappings.taxon_concept_id)))
          WHERE (iucn_mappings.accepted_name_id IS NULL)
        UNION
         SELECT taxon_concepts.id,
            (taxon_concepts.data OPERATOR(public.->) 'class_name'::text),
            taxon_concepts.full_name,
            taxon_concepts.name_status,
            taxon_concepts.author_year,
            taxon_concepts.taxonomic_position,
            iucn_mappings.iucn_taxon_id,
            iucn_mappings.iucn_taxon_name,
            iucn_mappings.iucn_author,
            iucn_mappings.iucn_category,
            (iucn_mappings.details OPERATOR(public.->) 'match'::text),
            'S MATCH'::text AS text,
            matched_names.full_name,
            matched_names.id
           FROM ((public.iucn_mappings
             JOIN public.taxon_concepts ON ((taxon_concepts.id = iucn_mappings.accepted_name_id)))
             JOIN public.taxon_concepts matched_names ON ((matched_names.id = iucn_mappings.taxon_concept_id)))
        )
 SELECT accepted_and_synonym_matches."TaxonConcept id",
    accepted_and_synonym_matches."TaxonConcept class",
    accepted_and_synonym_matches."TaxonConcept name",
    accepted_and_synonym_matches."TaxonConcept name status",
    accepted_and_synonym_matches."TaxonConcept author",
    accepted_and_synonym_matches."TaxonConcept taxonomic position",
    accepted_and_synonym_matches."IUCN taxon id",
    accepted_and_synonym_matches."IUCN taxon name",
    accepted_and_synonym_matches."IUCN taxon author",
    accepted_and_synonym_matches."IUCN category",
    accepted_and_synonym_matches."Type of match",
    accepted_and_synonym_matches."Type of name matched",
    accepted_and_synonym_matches."Synonym name (if matched)",
    accepted_and_synonym_matches."Synonym id (if matched)"
   FROM accepted_and_synonym_matches
  ORDER BY accepted_and_synonym_matches."TaxonConcept name status", accepted_and_synonym_matches."TaxonConcept taxonomic position", accepted_and_synonym_matches."TaxonConcept name";


--
-- Name: iucn_mappings_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.iucn_mappings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: iucn_mappings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.iucn_mappings_id_seq OWNED BY public.iucn_mappings.id;


--
-- Name: languages_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.languages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: languages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.languages_id_seq OWNED BY public.languages.id;


--
-- Name: listing_changes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.listing_changes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: listing_changes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.listing_changes_id_seq OWNED BY public.listing_changes.id;


--
-- Name: listing_distributions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.listing_distributions (
    id integer NOT NULL,
    listing_change_id integer NOT NULL,
    geo_entity_id integer NOT NULL,
    is_party boolean DEFAULT true NOT NULL,
    original_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: species_listings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.species_listings (
    id integer NOT NULL,
    designation_id integer NOT NULL,
    name character varying(255) NOT NULL,
    abbreviation character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: listing_changes_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.listing_changes_view AS
 SELECT listing_changes.id,
    listing_changes.taxon_concept_id,
    listing_changes.effective_at,
    listing_changes.species_listing_id,
    species_listings.abbreviation AS species_listing_name,
    listing_changes.change_type_id,
    change_types.name AS change_type_name,
    change_types.designation_id,
    designations.name AS designation_name,
    listing_distributions.geo_entity_id AS party_id,
    geo_entities.iso_code2 AS party_iso_code,
    annotations.symbol AS ann_symbol,
    annotations.full_note_en,
    annotations.full_note_es,
    annotations.full_note_fr,
    annotations.short_note_en,
    annotations.short_note_es,
    annotations.short_note_fr,
    annotations.display_in_index,
    annotations.display_in_footnote,
    hash_annotations.symbol AS hash_ann_symbol,
    hash_annotations.parent_symbol AS hash_ann_parent_symbol,
    hash_annotations.full_note_en AS hash_full_note_en,
    hash_annotations.full_note_es AS hash_full_note_es,
    hash_annotations.full_note_fr AS hash_full_note_fr,
    listing_changes.is_current,
    listing_changes.explicit_change,
    populations.countries_ids_ary
   FROM ((((((((public.listing_changes
     JOIN public.change_types ON ((listing_changes.change_type_id = change_types.id)))
     JOIN public.designations ON ((change_types.designation_id = designations.id)))
     LEFT JOIN public.species_listings ON ((listing_changes.species_listing_id = species_listings.id)))
     LEFT JOIN public.listing_distributions ON (((listing_changes.id = listing_distributions.listing_change_id) AND (listing_distributions.is_party = true))))
     LEFT JOIN public.geo_entities ON ((geo_entities.id = listing_distributions.geo_entity_id)))
     LEFT JOIN public.annotations ON ((annotations.id = listing_changes.annotation_id)))
     LEFT JOIN public.annotations hash_annotations ON ((hash_annotations.id = listing_changes.hash_annotation_id)))
     LEFT JOIN ( SELECT listing_distributions_1.listing_change_id,
            array_agg(geo_entities_1.id) AS countries_ids_ary
           FROM (public.listing_distributions listing_distributions_1
             JOIN public.geo_entities geo_entities_1 ON ((geo_entities_1.id = listing_distributions_1.geo_entity_id)))
          WHERE (NOT listing_distributions_1.is_party)
          GROUP BY listing_distributions_1.listing_change_id) populations ON ((populations.listing_change_id = listing_changes.id)))
  ORDER BY listing_changes.taxon_concept_id, listing_changes.effective_at,
        CASE
            WHEN ((change_types.name)::text = 'ADDITION'::text) THEN 0
            WHEN ((change_types.name)::text = 'RESERVATION'::text) THEN 1
            WHEN ((change_types.name)::text = 'RESERVATION_WITHDRAWAL'::text) THEN 2
            WHEN ((change_types.name)::text = 'DELETION'::text) THEN 3
            ELSE NULL::integer
        END;


--
-- Name: listing_distributions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.listing_distributions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: listing_distributions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.listing_distributions_id_seq OWNED BY public.listing_distributions.id;


--
-- Name: nomenclature_change_inputs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nomenclature_change_inputs (
    id integer NOT NULL,
    nomenclature_change_id integer NOT NULL,
    taxon_concept_id integer NOT NULL,
    note_en text DEFAULT ''::text,
    created_by_id integer NOT NULL,
    updated_by_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    internal_note text DEFAULT ''::text,
    note_es text DEFAULT ''::text,
    note_fr text DEFAULT ''::text
);


--
-- Name: nomenclature_change_inputs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nomenclature_change_inputs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nomenclature_change_inputs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nomenclature_change_inputs_id_seq OWNED BY public.nomenclature_change_inputs.id;


--
-- Name: nomenclature_change_output_reassignments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nomenclature_change_output_reassignments (
    id integer NOT NULL,
    nomenclature_change_output_id integer NOT NULL,
    type character varying(255) NOT NULL,
    reassignable_type character varying(255),
    reassignable_id integer,
    note_en text,
    created_by_id integer NOT NULL,
    updated_by_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    note_es text,
    note_fr text,
    internal_note text
);


--
-- Name: nomenclature_change_output_reassignments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nomenclature_change_output_reassignments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nomenclature_change_output_reassignments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nomenclature_change_output_reassignments_id_seq OWNED BY public.nomenclature_change_output_reassignments.id;


--
-- Name: nomenclature_change_outputs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nomenclature_change_outputs (
    id integer NOT NULL,
    nomenclature_change_id integer NOT NULL,
    taxon_concept_id integer,
    new_taxon_concept_id integer,
    new_parent_id integer,
    new_rank_id integer,
    new_scientific_name character varying(255),
    new_author_year character varying(255),
    new_name_status character varying(255),
    note_en text DEFAULT ''::text,
    created_by_id integer NOT NULL,
    updated_by_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    internal_note text DEFAULT ''::text,
    is_primary_output boolean DEFAULT true,
    parent_id integer,
    rank_id integer,
    scientific_name character varying(255),
    author_year character varying(255),
    name_status character varying(255),
    note_es text DEFAULT ''::text,
    note_fr text DEFAULT ''::text,
    taxonomy_id integer,
    tag_list text DEFAULT '--- []
'::text
);


--
-- Name: nomenclature_change_outputs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nomenclature_change_outputs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nomenclature_change_outputs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nomenclature_change_outputs_id_seq OWNED BY public.nomenclature_change_outputs.id;


--
-- Name: nomenclature_change_reassignment_targets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nomenclature_change_reassignment_targets (
    id integer NOT NULL,
    nomenclature_change_reassignment_id integer NOT NULL,
    nomenclature_change_output_id integer NOT NULL,
    created_by_id integer NOT NULL,
    updated_by_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: nomenclature_change_reassignment_targets_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nomenclature_change_reassignment_targets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nomenclature_change_reassignment_targets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nomenclature_change_reassignment_targets_id_seq OWNED BY public.nomenclature_change_reassignment_targets.id;


--
-- Name: nomenclature_change_reassignments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nomenclature_change_reassignments (
    id integer NOT NULL,
    nomenclature_change_input_id integer NOT NULL,
    type character varying(255) NOT NULL,
    reassignable_type character varying(255),
    reassignable_id integer,
    note_en text,
    created_by_id integer NOT NULL,
    updated_by_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    note_es text,
    note_fr text,
    internal_note text
);


--
-- Name: nomenclature_change_reassignments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nomenclature_change_reassignments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nomenclature_change_reassignments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nomenclature_change_reassignments_id_seq OWNED BY public.nomenclature_change_reassignments.id;


--
-- Name: nomenclature_changes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nomenclature_changes (
    id integer NOT NULL,
    event_id integer,
    type character varying(255) NOT NULL,
    status character varying(255) NOT NULL,
    created_by_id integer NOT NULL,
    updated_by_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: nomenclature_changes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nomenclature_changes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nomenclature_changes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nomenclature_changes_id_seq OWNED BY public.nomenclature_changes.id;


--
-- Name: trade_restriction_purposes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_restriction_purposes (
    id integer NOT NULL,
    trade_restriction_id integer,
    purpose_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: trade_shipments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_shipments (
    id integer NOT NULL,
    source_id integer,
    unit_id integer,
    purpose_id integer,
    term_id integer NOT NULL,
    quantity numeric NOT NULL,
    appendix character varying(255) NOT NULL,
    trade_annual_report_upload_id integer,
    exporter_id integer NOT NULL,
    importer_id integer NOT NULL,
    country_of_origin_id integer,
    reported_by_exporter boolean DEFAULT true NOT NULL,
    taxon_concept_id integer NOT NULL,
    year integer NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    sandbox_id integer,
    reported_taxon_concept_id integer,
    import_permit_number text,
    export_permit_number text,
    origin_permit_number text,
    legacy_shipment_number integer,
    import_permits_ids integer[],
    export_permits_ids integer[],
    origin_permits_ids integer[],
    updated_by_id integer,
    created_by_id integer,
    epix_created_at timestamp without time zone,
    epix_updated_at timestamp without time zone,
    epix_created_by_id integer,
    epix_updated_by_id integer,
    ifs_permits_ids integer[],
    ifs_permit_number text
);


--
-- Name: trade_shipments_with_taxa_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_shipments_with_taxa_view AS
 SELECT shipments.id,
    shipments.source_id,
    shipments.unit_id,
    shipments.purpose_id,
    shipments.term_id,
    shipments.quantity,
    shipments.appendix,
    shipments.trade_annual_report_upload_id,
    shipments.exporter_id,
    shipments.importer_id,
    shipments.country_of_origin_id,
    shipments.reported_by_exporter,
    shipments.taxon_concept_id,
    shipments.year,
    shipments.created_at,
    shipments.updated_at,
    shipments.sandbox_id,
    shipments.reported_taxon_concept_id,
    shipments.import_permit_number,
    shipments.export_permit_number,
    shipments.origin_permit_number,
    shipments.legacy_shipment_number,
    shipments.import_permits_ids,
    shipments.export_permits_ids,
    shipments.origin_permits_ids,
    shipments.updated_by_id,
    shipments.created_by_id,
    shipments.epix_created_at,
    shipments.epix_updated_at,
    shipments.epix_created_by_id,
    shipments.epix_updated_by_id,
    shipments.ifs_permits_ids,
    shipments.ifs_permit_number,
    taxon_concepts.full_name AS taxon_concept_full_name,
    taxon_concepts.author_year AS taxon_concept_author_year,
    taxon_concepts.name_status AS taxon_concept_name_status,
    taxon_concepts.rank_id AS taxon_concept_rank_id,
    ((taxon_concepts.data OPERATOR(public.->) 'kingdom_id'::text))::integer AS taxon_concept_kingdom_id,
    ((taxon_concepts.data OPERATOR(public.->) 'phylum_id'::text))::integer AS taxon_concept_phylum_id,
    ((taxon_concepts.data OPERATOR(public.->) 'class_id'::text))::integer AS taxon_concept_class_id,
    ((taxon_concepts.data OPERATOR(public.->) 'order_id'::text))::integer AS taxon_concept_order_id,
    ((taxon_concepts.data OPERATOR(public.->) 'family_id'::text))::integer AS taxon_concept_family_id,
    ((taxon_concepts.data OPERATOR(public.->) 'subfamily_id'::text))::integer AS taxon_concept_subfamily_id,
    ((taxon_concepts.data OPERATOR(public.->) 'genus_id'::text))::integer AS taxon_concept_genus_id,
    ((taxon_concepts.data OPERATOR(public.->) 'species_id'::text))::integer AS taxon_concept_species_id,
    (taxon_concepts.data OPERATOR(public.->) 'class_name'::text) AS taxon_concept_class_name,
    (taxon_concepts.data OPERATOR(public.->) 'order_name'::text) AS taxon_concept_order_name,
    (taxon_concepts.data OPERATOR(public.->) 'family_name'::text) AS taxon_concept_family_name,
    (taxon_concepts.data OPERATOR(public.->) 'genus_name'::text) AS taxon_concept_genus_name,
    reported_taxon_concepts.full_name AS reported_taxon_concept_full_name,
    reported_taxon_concepts.author_year AS reported_taxon_concept_author_year,
    reported_taxon_concepts.name_status AS reported_taxon_concept_name_status,
    reported_taxon_concepts.rank_id AS reported_taxon_concept_rank_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'kingdom_id'::text))::integer AS reported_taxon_concept_kingdom_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'phylum_id'::text))::integer AS reported_taxon_concept_phylum_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'class_id'::text))::integer AS reported_taxon_concept_class_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'order_id'::text))::integer AS reported_taxon_concept_order_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'family_id'::text))::integer AS reported_taxon_concept_family_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'subfamily_id'::text))::integer AS reported_taxon_concept_subfamily_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'genus_id'::text))::integer AS reported_taxon_concept_genus_id,
    ((reported_taxon_concepts.data OPERATOR(public.->) 'species_id'::text))::integer AS reported_taxon_concept_species_id
   FROM ((public.trade_shipments shipments
     JOIN public.taxon_concepts ON ((shipments.taxon_concept_id = taxon_concepts.id)))
     LEFT JOIN public.taxon_concepts reported_taxon_concepts ON ((shipments.reported_taxon_concept_id = reported_taxon_concepts.id)));


--
-- Name: trade_shipments_appendix_i_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_shipments_appendix_i_view AS
 SELECT DISTINCT s.id,
    s.year,
    s.appendix,
    s.taxon_concept_id,
    s.author_year,
    s.name_status,
    s.taxon_name,
    s.phylum_id,
    s.class_id,
    s.class_name,
    s.order_id,
    s.order_name,
    s.family_id,
    s.family_name,
    s.genus_id,
    s.genus_name,
    s.term_id,
    s.term,
    s.importer_reported_quantity,
    s.exporter_reported_quantity,
    s.unit_id,
    s.unit,
    s.exporter_id,
    s.exporter_iso,
    s.exporter,
    s.importer_id,
    s.importer_iso,
    s.importer,
    s.origin,
    s.purpose_id,
    s.purpose,
    s.source_id,
    s.source,
    s.import_permits,
    s.export_permits,
    s.origin_permits,
    s.ifs_permits,
    s.import_permit,
    s.export_permit,
    s.origin_permit,
    s.ifs_permit,
    s.rank_id,
    s.rank_name,
    s.issue_type
   FROM ( SELECT ts.id,
            ts.year,
            ts.appendix,
            ts.taxon_concept_id,
            ts.taxon_concept_author_year AS author_year,
            ts.taxon_concept_name_status AS name_status,
            ts.taxon_concept_full_name AS taxon_name,
            ts.taxon_concept_phylum_id AS phylum_id,
            ts.taxon_concept_class_id AS class_id,
            ts.taxon_concept_class_name AS class_name,
            ts.taxon_concept_order_id AS order_id,
            ts.taxon_concept_order_name AS order_name,
            ts.taxon_concept_family_id AS family_id,
            ts.taxon_concept_family_name AS family_name,
            ts.taxon_concept_genus_id AS genus_id,
            ts.taxon_concept_genus_name AS genus_name,
            terms.id AS term_id,
            terms.name_en AS term,
                CASE
                    WHEN (ts.reported_by_exporter IS FALSE) THEN ts.quantity
                    ELSE NULL::numeric
                END AS importer_reported_quantity,
                CASE
                    WHEN (ts.reported_by_exporter IS TRUE) THEN ts.quantity
                    ELSE NULL::numeric
                END AS exporter_reported_quantity,
            units.id AS unit_id,
            units.name_en AS unit,
            exporters.id AS exporter_id,
            exporters.iso_code2 AS exporter_iso,
            exporters.name_en AS exporter,
            importers.id AS importer_id,
            importers.iso_code2 AS importer_iso,
            importers.name_en AS importer,
            origins.iso_code2 AS origin,
            purposes.id AS purpose_id,
            purposes.name_en AS purpose,
            sources.id AS source_id,
            sources.name_en AS source,
            ts.import_permits_ids AS import_permits,
            ts.export_permits_ids AS export_permits,
            ts.origin_permits_ids AS origin_permits,
            ts.ifs_permits_ids AS ifs_permits,
            ts.import_permit_number AS import_permit,
            ts.export_permit_number AS export_permit,
            ts.origin_permit_number AS origin_permit,
            ts.ifs_permit_number AS ifs_permit,
            ranks.id AS rank_id,
            ranks.name AS rank_name,
            'AppendixI'::text AS issue_type
           FROM ((((((((public.trade_shipments_with_taxa_view ts
             JOIN public.trade_codes sources ON ((ts.source_id = sources.id)))
             JOIN public.trade_codes purposes ON ((ts.purpose_id = purposes.id)))
             JOIN public.ranks ON ((ranks.id = ts.taxon_concept_rank_id)))
             LEFT JOIN public.trade_codes terms ON ((ts.term_id = terms.id)))
             LEFT JOIN public.trade_codes units ON ((ts.unit_id = units.id)))
             LEFT JOIN public.geo_entities exporters ON ((ts.exporter_id = exporters.id)))
             LEFT JOIN public.geo_entities importers ON ((ts.importer_id = importers.id)))
             LEFT JOIN public.geo_entities origins ON ((ts.country_of_origin_id = origins.id)))
          WHERE (((ts.appendix)::text = 'I'::text) AND ((purposes.type)::text = 'Purpose'::text) AND ((purposes.code)::text = 'T'::text) AND ((sources.type)::text = 'Source'::text) AND ((sources.code)::text = ANY ((ARRAY['W'::character varying, 'X'::character varying, 'F'::character varying, 'R'::character varying])::text[])))) s
  WHERE (NOT (s.id IN ( SELECT ts.id
           FROM ((public.trade_shipments_with_taxa_view ts
             JOIN public.geo_entities importers ON ((ts.importer_id = importers.id)))
             JOIN public.geo_entities exporters ON ((ts.exporter_id = exporters.id)))
          WHERE (((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 531) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1975) AND (ts.year < 1978) AND (ts.taxon_concept_id = 923) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1979) AND (ts.year < 1982) AND (ts.taxon_concept_id = 1286) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1979) AND (ts.year < 1981) AND (ts.taxon_concept_id = 1286) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZA'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 1718) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 1836) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1991) AND (ts.year < 2025) AND (ts.taxon_concept_id = 1929) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 2425) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 2499) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 2499) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 2683) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 2683) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1979) AND (ts.year < 1982) AND (ts.taxon_concept_id = 2686) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1979) AND (ts.year < 1981) AND (ts.taxon_concept_id = 2686) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZA'::text)))) OR ((ts.year > 1975) AND (ts.year < 1978) AND (ts.taxon_concept_id = 3052) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3052) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1989) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3052) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'VC'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'VC'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3198) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 3239) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 3255) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3370) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 3404) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 3436) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 3464) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3515) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 3587) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 3592) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3627) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 2003) AND (ts.year < 2014) AND (ts.taxon_concept_id = 3721) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2003) AND (ts.year < 2014) AND (ts.taxon_concept_id = 3721) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 2003) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3721) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PH'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3792) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 3838) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 3851) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3922) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 3929) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 3957) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 3957) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1977) AND (ts.year < 1981) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AU'::text)))) OR ((ts.year > 1977) AND (ts.year < 1982) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NO'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NO'::text)))) OR ((ts.year > 1977) AND (ts.year < 1995) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1977) AND (ts.year < 1981) AND (ts.taxon_concept_id = 3975) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZA'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4062) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SR'::text)))) OR ((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 4306) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1983) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4329) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 4442) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4442) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'MK'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'MK'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 4464) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4494) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1990) AND (ts.year < 1997) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'BW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'BW'::text)))) OR ((ts.year > 1990) AND (ts.year < 1991) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CN'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CN'::text)))) OR ((ts.year > 1990) AND (ts.year < 1990) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1990) AND (ts.year < 2021) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'MW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'MW'::text)))) OR ((ts.year > 1991) AND (ts.year < 1997) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NA'::text)))) OR ((ts.year > 1990) AND (ts.year < 2000) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZA'::text)))) OR ((ts.year > 1990) AND (ts.year < 1997) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZM'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZM'::text)))) OR ((ts.year > 1990) AND (ts.year < 1997) AND (ts.taxon_concept_id = 4521) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZW'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 4626) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1980) AND (ts.year < 1992) AND (ts.taxon_concept_id = 4626) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1983) AND (ts.year < 1987) AND (ts.taxon_concept_id = 4626) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'TH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'TH'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 4634) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1980) AND (ts.year < 1992) AND (ts.taxon_concept_id = 4634) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 4645) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 4650) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1985) AND (ts.year < 2014) AND (ts.taxon_concept_id = 4650) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1985) AND (ts.year < 2014) AND (ts.taxon_concept_id = 4650) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1985) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4650) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SR'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 4979) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4979) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 4979) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 4996) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2010) AND (ts.year < 2013) AND (ts.taxon_concept_id = 5003) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 5004) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 5093) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1975) AND (ts.year < 1982) AND (ts.taxon_concept_id = 5102) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1975) AND (ts.year < 1982) AND (ts.taxon_concept_id = 5138) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 5252) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1982) AND (ts.year < 1989) AND (ts.taxon_concept_id = 5306) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 5306) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 5306) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1979) AND (ts.year < 1984) AND (ts.taxon_concept_id = 5306) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1987) AND (ts.taxon_concept_id = 5306) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZM'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZM'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 5390) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1979) AND (ts.year < 1984) AND (ts.taxon_concept_id = 5390) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IT'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 5628) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 5690) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1975) AND (ts.year < 1977) AND (ts.taxon_concept_id = 5777) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 5781) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 2003) AND (ts.year < 2025) AND (ts.taxon_concept_id = 5863) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PH'::text)))) OR ((ts.year > 1976) AND (ts.year < 1977) AND (ts.taxon_concept_id = 5959) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1975) AND (ts.year < 1979) AND (ts.taxon_concept_id = 6004) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 6057) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 6060) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 6115) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6244) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6244) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 6280) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 6337) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 6341) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 6352) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1991) AND (ts.taxon_concept_id = 6352) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'BR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'BR'::text)))) OR ((ts.year > 1983) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6352) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1983) AND (ts.year < 2001) AND (ts.taxon_concept_id = 6352) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PE'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PE'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 6352) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1979) AND (ts.year < 1981) AND (ts.taxon_concept_id = 6436) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 6436) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6477) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6477) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1986) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6477) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NO'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NO'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 6693) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 6708) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 6741) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 6768) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 6810) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 6826) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1987) AND (ts.year < 2014) AND (ts.taxon_concept_id = 6833) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1987) AND (ts.year < 2014) AND (ts.taxon_concept_id = 6833) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1987) AND (ts.year < 2001) AND (ts.taxon_concept_id = 6926) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1987) AND (ts.year < 2001) AND (ts.taxon_concept_id = 6926) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1980) AND (ts.year < 1992) AND (ts.taxon_concept_id = 6938) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 6950) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 7061) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 7074) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 7119) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 7181) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1990) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7257) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CU'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 7257) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1980) AND (ts.year < 1994) AND (ts.taxon_concept_id = 7257) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7257) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1989) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7257) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'VC'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'VC'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 7286) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7286) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 7296) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 7296) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 7401) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7466) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 7674) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 2010) AND (ts.year < 2013) AND (ts.taxon_concept_id = 7747) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 7747) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 7821) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7821) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 7840) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 7840) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1975) AND (ts.year < 1978) AND (ts.taxon_concept_id = 7903) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 7938) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 8019) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 8223) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1986) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1986) AND (ts.year < 1991) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'BR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'BR'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1986) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1986) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NO'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NO'::text)))) OR ((ts.year > 1986) AND (ts.year < 2001) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PE'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PE'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1986) AND (ts.year < 1995) AND (ts.taxon_concept_id = 8288) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8325) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8352) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 8391) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 8396) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1982) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1979) AND (ts.year < 1983) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1979) AND (ts.year < 1982) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'DE'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'DE'::text)))) OR ((ts.year > 1979) AND (ts.year < 1984) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1979) AND (ts.year < 1984) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IT'::text)))) OR ((ts.year > 1980) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1987) AND (ts.year < 1990) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SG'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SG'::text)))) OR ((ts.year > 1983) AND (ts.year < 1987) AND (ts.taxon_concept_id = 8560) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'TH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'TH'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8607) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8607) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1986) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8608) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1986) AND (ts.year < 1991) AND (ts.taxon_concept_id = 8608) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'BR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'BR'::text)))) OR ((ts.year > 1986) AND (ts.year < 2001) AND (ts.taxon_concept_id = 8608) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PE'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PE'::text)))) OR ((ts.year > 1987) AND (ts.year < 2014) AND (ts.taxon_concept_id = 8725) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1987) AND (ts.year < 2014) AND (ts.taxon_concept_id = 8725) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8790) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 8898) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 8915) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 8918) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1991) AND (ts.year < 2025) AND (ts.taxon_concept_id = 8935) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NA'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 9020) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 9048) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9048) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1983) AND (ts.year < 1995) AND (ts.taxon_concept_id = 9048) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 9073) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1987) AND (ts.taxon_concept_id = 9073) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'TH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'TH'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 9151) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2005) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9382) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 9436) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1980) AND (ts.year < 1987) AND (ts.taxon_concept_id = 9436) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9441) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1977) AND (ts.year < 1981) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AU'::text)))) OR ((ts.year > 1977) AND (ts.year < 1982) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1980) AND (ts.year < 1981) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NO'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NO'::text)))) OR ((ts.year > 1977) AND (ts.year < 1995) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1977) AND (ts.year < 1981) AND (ts.taxon_concept_id = 9445) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2022) AND (ts.taxon_concept_id = 9554) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'TH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'TH'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 9554) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2017) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9644) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AE'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AE'::text)))) OR ((ts.year > 2017) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9644) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CD'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CD'::text)))) OR ((ts.year > 2017) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9644) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 9752) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1979) AND (ts.year < 1982) AND (ts.taxon_concept_id = 9803) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 9850) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9871) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9919) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 9941) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 9986) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10054) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 10096) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1996) AND (ts.year < 2005) AND (ts.taxon_concept_id = 10241) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 2013) AND (ts.year < 2015) AND (ts.taxon_concept_id = 10248) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 10403) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10464) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1978) AND (ts.year < 1990) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'BW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'BW'::text)))) OR ((ts.year > 2010) AND (ts.year < 2013) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1979) AND (ts.year < 1984) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1990) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SD'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SD'::text)))) OR ((ts.year > 1981) AND (ts.year < 1987) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZM'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZM'::text)))) OR ((ts.year > 1981) AND (ts.year < 1987) AND (ts.taxon_concept_id = 10745) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'ZW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'ZW'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10761) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10761) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10761) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'NO'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'NO'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10761) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10804) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1975) AND (ts.year < 1978) AND (ts.taxon_concept_id = 10905) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10905) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IS'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IS'::text)))) OR ((ts.year > 1977) AND (ts.year < 1999) AND (ts.taxon_concept_id = 10941) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'RU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'RU'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 10978) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 10978) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 2005) AND (ts.year < 2025) AND (ts.taxon_concept_id = 11005) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 2003) AND (ts.year < 2014) AND (ts.taxon_concept_id = 11033) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2003) AND (ts.year < 2014) AND (ts.taxon_concept_id = 11033) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 2003) AND (ts.year < 2025) AND (ts.taxon_concept_id = 11033) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PH'::text)))) OR ((ts.year > 1990) AND (ts.year < 2025) AND (ts.taxon_concept_id = 11071) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CU'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CU'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 11071) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1979) AND (ts.year < 1984) AND (ts.taxon_concept_id = 11071) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'IT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'IT'::text)))) OR ((ts.year > 1980) AND (ts.year < 1987) AND (ts.taxon_concept_id = 11071) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 11071) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1981) AND (ts.year < 2025) AND (ts.taxon_concept_id = 11071) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SR'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 11207) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 11271) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 12165) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1980) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12165) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12168) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12168) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'MK'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'MK'::text)))) OR ((ts.year > 1975) AND (ts.year < 1977) AND (ts.taxon_concept_id = 12176) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 12180) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12193) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12199) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12199) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'MK'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'MK'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12205) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12206) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12220) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12238) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1978) AND (ts.year < 1984) AND (ts.taxon_concept_id = 12248) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'FR'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'FR'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 12248) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1980) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12248) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12249) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12249) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 12251) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12254) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12254) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12278) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12278) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 12286) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 12290) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12299) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12299) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'MK'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'MK'::text)))) OR ((ts.year > 1975) AND (ts.year < 1982) AND (ts.taxon_concept_id = 12303) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1975) AND (ts.year < 1982) AND (ts.taxon_concept_id = 12309) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12320) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2000) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12320) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'MK'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'MK'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 12324) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 1975) AND (ts.year < 1977) AND (ts.taxon_concept_id = 12325) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2004) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12332) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'PW'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'PW'::text)))) OR ((ts.year > 1996) AND (ts.year < 2025) AND (ts.taxon_concept_id = 12332) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'SA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'SA'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12629) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 12629) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 12843) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 12843) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 13147) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 14439) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 14450) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 14450) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 15492) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 17168) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 17592) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 17592) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 17824) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 18004) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 18383) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 18695) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 18866) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 18866) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 19242) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1979) AND (ts.year < 2005) AND (ts.taxon_concept_id = 19324) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 19336) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 19420) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 19620) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 20139) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 20271) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 20415) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 20657) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 20749) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 21123) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 21610) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 22677) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 22677) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 22715) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 22715) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 23356) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 23450) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 23835) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1979) AND (ts.year < 2014) AND (ts.taxon_concept_id = 24119) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 24516) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 25138) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 25138) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 25178) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 25351) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 25367) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 25895) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 25895) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1979) AND (ts.year < 1983) AND (ts.taxon_concept_id = 25968) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 25969) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 26024) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 26263) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 26732) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1992) AND (ts.year < 2014) AND (ts.taxon_concept_id = 26732) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 26931) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 27568) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 27661) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 27815) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 27815) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 27816) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1987) AND (ts.year < 2004) AND (ts.taxon_concept_id = 27947) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CL'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CL'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 28010) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 28657) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 28657) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 28936) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 29060) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 29522) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 29612) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 29612) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 29621) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 29621) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 29622) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 1981) AND (ts.year < 1983) AND (ts.taxon_concept_id = 29622) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'LI'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'LI'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 44177) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 45112) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 50438) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 65766) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 65767) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1979) AND (ts.year < 1982) AND (ts.taxon_concept_id = 68342) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1976) AND (ts.year < 1978) AND (ts.taxon_concept_id = 68363) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'GB'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'GB'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98193) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98194) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98196) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98198) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98199) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98270) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98271) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2019) AND (ts.year < 2020) AND (ts.taxon_concept_id = 98331) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1975) AND (ts.year < 1977) AND (ts.taxon_concept_id = 12178) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 1558) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 5311) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1979) AND (ts.year < 1980) AND (ts.taxon_concept_id = 5311) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'DK'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'DK'::text)))) OR ((ts.year > 1980) AND (ts.year < 1989) AND (ts.taxon_concept_id = 5311) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 12233) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1980) AND (ts.year < 1983) AND (ts.taxon_concept_id = 12233) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'JP'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'JP'::text)))) OR ((ts.year > 1985) AND (ts.year < 1989) AND (ts.taxon_concept_id = 8941) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1983) AND (ts.year < 1989) AND (ts.taxon_concept_id = 11205) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'AT'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'AT'::text)))) OR ((ts.year > 1979) AND (ts.year < 1998) AND (ts.taxon_concept_id = 8117) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CH'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CH'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 4614) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 11078) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 10210) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 9277) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 100209) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 100473) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text)))) OR ((ts.year > 2023) AND (ts.year < 2025) AND (ts.taxon_concept_id = 100472) AND (((ts.reported_by_exporter IS TRUE) AND ((exporters.iso_code2)::text = 'CA'::text)) OR ((ts.reported_by_exporter IS FALSE) AND ((importers.iso_code2)::text = 'CA'::text))))))))
  ORDER BY s.year, s.class_name, s.order_name, s.family_name, s.genus_name, s.taxon_name, s.term;


--
-- Name: trade_shipments_appendix_i_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.trade_shipments_appendix_i_mview AS
 SELECT trade_shipments_appendix_i_view.id,
    trade_shipments_appendix_i_view.year,
    trade_shipments_appendix_i_view.appendix,
    trade_shipments_appendix_i_view.taxon_concept_id,
    trade_shipments_appendix_i_view.author_year,
    trade_shipments_appendix_i_view.name_status,
    trade_shipments_appendix_i_view.taxon_name,
    trade_shipments_appendix_i_view.phylum_id,
    trade_shipments_appendix_i_view.class_id,
    trade_shipments_appendix_i_view.class_name,
    trade_shipments_appendix_i_view.order_id,
    trade_shipments_appendix_i_view.order_name,
    trade_shipments_appendix_i_view.family_id,
    trade_shipments_appendix_i_view.family_name,
    trade_shipments_appendix_i_view.genus_id,
    trade_shipments_appendix_i_view.genus_name,
    trade_shipments_appendix_i_view.term_id,
    trade_shipments_appendix_i_view.term,
    trade_shipments_appendix_i_view.importer_reported_quantity,
    trade_shipments_appendix_i_view.exporter_reported_quantity,
    trade_shipments_appendix_i_view.unit_id,
    trade_shipments_appendix_i_view.unit,
    trade_shipments_appendix_i_view.exporter_id,
    trade_shipments_appendix_i_view.exporter_iso,
    trade_shipments_appendix_i_view.exporter,
    trade_shipments_appendix_i_view.importer_id,
    trade_shipments_appendix_i_view.importer_iso,
    trade_shipments_appendix_i_view.importer,
    trade_shipments_appendix_i_view.origin,
    trade_shipments_appendix_i_view.purpose_id,
    trade_shipments_appendix_i_view.purpose,
    trade_shipments_appendix_i_view.source_id,
    trade_shipments_appendix_i_view.source,
    trade_shipments_appendix_i_view.import_permits,
    trade_shipments_appendix_i_view.export_permits,
    trade_shipments_appendix_i_view.origin_permits,
    trade_shipments_appendix_i_view.ifs_permits,
    trade_shipments_appendix_i_view.import_permit,
    trade_shipments_appendix_i_view.export_permit,
    trade_shipments_appendix_i_view.origin_permit,
    trade_shipments_appendix_i_view.ifs_permit,
    trade_shipments_appendix_i_view.rank_id,
    trade_shipments_appendix_i_view.rank_name,
    trade_shipments_appendix_i_view.issue_type
   FROM public.trade_shipments_appendix_i_view
  WITH NO DATA;


--
-- Name: trade_shipments_cites_suspensions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_shipments_cites_suspensions_view AS
 SELECT DISTINCT s.id,
    s.year,
    s.appendix,
    s.taxon_concept_id,
    s.author_year,
    s.name_status,
    s.taxon_name,
    s.phylum_id,
    s.class_id,
    s.class_name,
    s.order_id,
    s.order_name,
    s.family_id,
    s.family_name,
    s.genus_id,
    s.genus_name,
    s.term_id,
    s.term,
    s.importer_reported_quantity,
    s.exporter_reported_quantity,
    s.unit_id,
    s.unit,
    s.exporter_id,
    s.exporter_iso,
    s.exporter,
    s.importer_id,
    s.importer_iso,
    s.importer,
    s.origin,
    s.purpose_id,
    s.purpose,
    s.source_id,
    s.source,
    s.import_permits,
    s.export_permits,
    s.origin_permits,
    s.ifs_permits,
    s.import_permit,
    s.export_permit,
    s.origin_permit,
    s.ifs_permit,
    s.issue_type,
    s.details_of_compliance_issue,
    s.compliance_type_start_date,
    s.compliance_type_taxon,
    s.rank_id,
    s.rank_name,
    s.compliance_type_end_date,
    s.suspension_start_notification,
    s.suspension_end_notification,
    s.notes
   FROM ( SELECT ts.id,
            ts.year,
            ts.appendix,
            ts.taxon_concept_id,
            ts.taxon_concept_author_year AS author_year,
            ts.taxon_concept_name_status AS name_status,
            ts.taxon_concept_full_name AS taxon_name,
            ts.taxon_concept_phylum_id AS phylum_id,
            ts.taxon_concept_class_id AS class_id,
            ts.taxon_concept_class_name AS class_name,
            ts.taxon_concept_order_id AS order_id,
            ts.taxon_concept_order_name AS order_name,
            ts.taxon_concept_family_id AS family_id,
            ts.taxon_concept_family_name AS family_name,
            ts.taxon_concept_genus_id AS genus_id,
            ts.taxon_concept_genus_name AS genus_name,
            terms.id AS term_id,
            terms.name_en AS term,
                CASE
                    WHEN (ts.reported_by_exporter IS FALSE) THEN ts.quantity
                    ELSE NULL::numeric
                END AS importer_reported_quantity,
                CASE
                    WHEN (ts.reported_by_exporter IS TRUE) THEN ts.quantity
                    ELSE NULL::numeric
                END AS exporter_reported_quantity,
            units.id AS unit_id,
            units.name_en AS unit,
            exporters.id AS exporter_id,
            exporters.iso_code2 AS exporter_iso,
            exporters.name_en AS exporter,
            importers.id AS importer_id,
            importers.iso_code2 AS importer_iso,
            importers.name_en AS importer,
            NULL::text AS origin,
            purposes.id AS purpose_id,
            purposes.name_en AS purpose,
            sources.id AS source_id,
            sources.name_en AS source,
            ts.import_permits_ids AS import_permits,
            ts.export_permits_ids AS export_permits,
            ts.origin_permits_ids AS origin_permits,
            ts.ifs_permits_ids AS ifs_permits,
            ts.import_permit_number AS import_permit,
            ts.export_permit_number AS export_permit,
            ts.origin_permit_number AS origin_permit,
            ts.ifs_permit_number AS ifs_permit,
            'Suspension'::text AS issue_type,
            start_notifications.subtype AS details_of_compliance_issue,
            start_notifications.effective_at AS compliance_type_start_date,
            ts.taxon_concept_full_name AS compliance_type_taxon,
            ranks.id AS rank_id,
            ranks.name AS rank_name,
            end_notifications.effective_at AS compliance_type_end_date,
            start_notifications.name AS suspension_start_notification,
            end_notifications.name AS suspension_end_notification,
            tr_tc.notes
           FROM ((((((((((((((public.trade_shipments_with_taxa_view ts
             JOIN public.taxon_concepts_and_ancestors_mview tca ON ((ts.taxon_concept_id = tca.taxon_concept_id)))
             JOIN public.trade_restrictions tr_tc ON ((tr_tc.taxon_concept_id = tca.ancestor_taxon_concept_id)))
             JOIN public.events start_notifications ON ((tr_tc.start_notification_id = start_notifications.id)))
             JOIN public.geo_entities importers ON ((ts.importer_id = importers.id)))
             JOIN public.geo_entities exporters ON ((ts.exporter_id = exporters.id)))
             JOIN public.ranks ON ((ranks.id = ts.taxon_concept_rank_id)))
             LEFT JOIN public.geo_entities suspension_countries ON ((tr_tc.geo_entity_id = suspension_countries.id)))
             LEFT JOIN public.events end_notifications ON ((tr_tc.end_notification_id = end_notifications.id)))
             LEFT JOIN public.trade_restriction_sources tr_s ON ((tr_tc.id = tr_s.trade_restriction_id)))
             LEFT JOIN public.trade_restriction_purposes tr_p ON ((tr_tc.id = tr_p.trade_restriction_id)))
             LEFT JOIN public.trade_codes sources ON ((sources.id = ts.source_id)))
             LEFT JOIN public.trade_codes purposes ON ((purposes.id = ts.purpose_id)))
             LEFT JOIN public.trade_codes units ON ((units.id = ts.unit_id)))
             LEFT JOIN public.trade_codes terms ON ((terms.id = ts.term_id)))
          WHERE (((tr_tc.type)::text = 'CitesSuspension'::text) AND ((ts.appendix)::text <> 'N'::text) AND ((start_notifications.type)::text = 'CitesSuspensionNotification'::text) AND ((start_notifications.subtype)::text <> ALL ((ARRAY['National trade ban (communicated by MA)'::character varying, 'Information notice'::character varying])::text[])) AND ((end_notifications.type)::text = 'CitesSuspensionNotification'::text) AND ((end_notifications.subtype)::text <> ALL ((ARRAY['National trade ban (communicated by MA)'::character varying, 'Information notice'::character varying])::text[])) AND ((ts.year >= (date_part('year'::text, tr_tc.start_date))::integer) AND (ts.year <=
                CASE
                    WHEN (tr_tc.end_date IS NULL) THEN (date_part('year'::text, CURRENT_DATE))::integer
                    ELSE (date_part('year'::text, tr_tc.end_date))::integer
                END)) AND ((tr_tc.geo_entity_id IS NULL) OR ((tr_tc.geo_entity_id = ts.exporter_id) OR ((tr_tc.geo_entity_id = ts.importer_id) AND tr_tc.applies_to_import))) AND ((tr_s.source_id = ts.source_id) OR (tr_s.id IS NULL)) AND ((tr_p.purpose_id = ts.purpose_id) OR (tr_p.id IS NULL)) AND (ts.country_of_origin_id IS NULL) AND (((sources.name_en)::text <> 'Confiscations/seizures'::text) OR (ts.source_id IS NULL)))
        UNION
         SELECT ts.id,
            ts.year,
            ts.appendix,
            ts.taxon_concept_id,
            ts.taxon_concept_author_year AS author_year,
            ts.taxon_concept_name_status AS name_status,
            ts.taxon_concept_full_name AS taxon_name,
            ts.taxon_concept_phylum_id AS phylum_id,
            ts.taxon_concept_class_id AS class_id,
            ts.taxon_concept_class_name AS class_name,
            ts.taxon_concept_order_id AS order_id,
            ts.taxon_concept_order_name AS order_name,
            ts.taxon_concept_family_id AS family_id,
            ts.taxon_concept_family_name AS family_name,
            ts.taxon_concept_genus_id AS genus_id,
            ts.taxon_concept_genus_name AS genus_name,
            terms.id AS term_id,
            terms.name_en AS term,
                CASE
                    WHEN (ts.reported_by_exporter IS FALSE) THEN ts.quantity
                    ELSE NULL::numeric
                END AS importer_reported_quantity,
                CASE
                    WHEN (ts.reported_by_exporter IS TRUE) THEN ts.quantity
                    ELSE NULL::numeric
                END AS exporter_reported_quantity,
            units.id AS unit_id,
            units.name_en AS unit,
            exporters.id AS exporter_id,
            exporters.iso_code2 AS exporter_iso,
            exporters.name_en AS exporter,
            importers.id AS importer_id,
            importers.iso_code2 AS importer_iso,
            importers.name_en AS importer,
            NULL::text AS origin,
            purposes.id AS purpose_id,
            purposes.name_en AS purpose,
            sources.id AS source_id,
            sources.name_en AS source,
            ts.import_permits_ids AS import_permits,
            ts.export_permits_ids AS export_permits,
            ts.origin_permits_ids AS origin_permits,
            ts.ifs_permits_ids AS ifs_permits,
            ts.import_permit_number AS import_permit,
            ts.export_permit_number AS export_permit,
            ts.origin_permit_number AS origin_permit,
            ts.ifs_permit_number AS ifs_permit,
            'Suspension'::text AS issue_type,
            start_notifications.subtype AS details_of_compliance_issue,
            start_notifications.effective_at AS start_date,
            ts.taxon_concept_full_name AS compliance_type_taxon,
            ranks.id AS rank_id,
            ranks.name AS rank_name,
            end_notifications.effective_at AS end_date,
            start_notifications.name AS suspension_start_notification,
            end_notifications.name AS suspension_end_notification,
            tr_ge.notes
           FROM (((((((((((((public.trade_shipments_with_taxa_view ts
             JOIN public.trade_restrictions tr_ge ON (((tr_ge.geo_entity_id = ts.exporter_id) OR ((tr_ge.geo_entity_id = ts.importer_id) AND tr_ge.applies_to_import))))
             JOIN public.events start_notifications ON ((tr_ge.start_notification_id = start_notifications.id)))
             JOIN public.geo_entities importers ON ((ts.importer_id = importers.id)))
             JOIN public.geo_entities exporters ON ((ts.exporter_id = exporters.id)))
             LEFT JOIN public.ranks ON ((ranks.id = ts.taxon_concept_rank_id)))
             LEFT JOIN public.geo_entities suspension_countries ON ((tr_ge.geo_entity_id = suspension_countries.id)))
             LEFT JOIN public.events end_notifications ON ((tr_ge.end_notification_id = end_notifications.id)))
             LEFT JOIN public.trade_restriction_sources tr_s ON ((tr_ge.id = tr_s.trade_restriction_id)))
             LEFT JOIN public.trade_restriction_purposes tr_p ON ((tr_ge.id = tr_p.trade_restriction_id)))
             LEFT JOIN public.trade_codes sources ON ((sources.id = ts.source_id)))
             LEFT JOIN public.trade_codes purposes ON ((purposes.id = ts.purpose_id)))
             LEFT JOIN public.trade_codes units ON ((units.id = ts.unit_id)))
             LEFT JOIN public.trade_codes terms ON ((terms.id = ts.term_id)))
          WHERE (((tr_ge.type)::text = 'CitesSuspension'::text) AND ((ts.appendix)::text <> 'N'::text) AND ((start_notifications.type)::text = 'CitesSuspensionNotification'::text) AND ((start_notifications.subtype)::text <> ALL ((ARRAY['National trade ban (communicated by MA)'::character varying, 'Information notice'::character varying])::text[])) AND ((end_notifications.type)::text = 'CitesSuspensionNotification'::text) AND ((end_notifications.subtype)::text <> ALL ((ARRAY['National trade ban (communicated by MA)'::character varying, 'Information notice'::character varying])::text[])) AND ((tr_ge.taxon_concept_id IS NULL) OR (tr_ge.taxon_concept_id = ts.taxon_concept_id)) AND ((ts.year >= (date_part('year'::text, tr_ge.start_date))::integer) AND (ts.year <=
                CASE
                    WHEN (tr_ge.end_date IS NULL) THEN (date_part('year'::text, CURRENT_DATE))::integer
                    ELSE (date_part('year'::text, tr_ge.end_date))::integer
                END)) AND ((tr_s.source_id = ts.source_id) OR (tr_s.id IS NULL)) AND ((tr_p.purpose_id = ts.purpose_id) OR (tr_p.id IS NULL)) AND (ts.country_of_origin_id IS NULL) AND (((sources.name_en)::text <> 'Confiscations/seizures'::text) OR (ts.source_id IS NULL)))) s
  WHERE (NOT (s.id IN ( SELECT ts.id
           FROM (((((((public.trade_shipments_with_taxa_view ts
             JOIN public.geo_entities importers ON ((ts.importer_id = importers.id)))
             JOIN public.geo_entities exporters ON ((ts.exporter_id = exporters.id)))
             JOIN public.ranks ON ((ranks.id = ts.taxon_concept_rank_id)))
             LEFT JOIN public.trade_codes sources ON ((sources.id = ts.source_id)))
             LEFT JOIN public.trade_codes purposes ON ((purposes.id = ts.purpose_id)))
             LEFT JOIN public.trade_codes units ON ((units.id = ts.unit_id)))
             LEFT JOIN public.trade_codes terms ON ((terms.id = ts.term_id)))
          WHERE (((ts.year >= 2005) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'AF'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7903) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8288) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6477) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3975) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6352) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10905) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4329) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9445) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7840) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9048) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8608) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7265) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10200) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4438) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5314) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4206) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5623) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5924) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5138) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6659) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 11020) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4989) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3327) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8462) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7046) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9702) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4979) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3957) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9126) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 67923) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4021) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6515) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6532) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7197) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9180) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3918) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6793) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7504) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8540) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10842) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4061) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8788) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10448) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3052) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6238) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7528) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10363) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10436) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8883) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10466) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6913) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3188) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 68344) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5644) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8066) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8865) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8605) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6746) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4039) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8084) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 68342) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9803) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9382) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 11005) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6391) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7820) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 11079) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 11185) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5652) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5385) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4956) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10761) AND true AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7010) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8842) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6795) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4962) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10624) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8824) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 34009) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 67921) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5245) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8989) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 11236) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10064) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8215) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10191) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6629) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8310) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4770) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 67922) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7086) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5326) AND true AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2016) AND true AND ((exporters.iso_code2)::text = 'AO'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2006) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 55214) AND ((exporters.iso_code2)::text = 'AR'::text) AND true AND true AND ((sources.code)::text = 'R'::text) AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2006) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 5390) AND ((exporters.iso_code2)::text = 'AR'::text) AND true AND true AND ((sources.code)::text = 'R'::text) AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2006) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 8246) AND ((exporters.iso_code2)::text = 'AR'::text) AND true AND ((terms.code)::text = 'TRO'::text) AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2006) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 6330) AND ((exporters.iso_code2)::text = 'AR'::text) AND true AND ((terms.code)::text = 'TRO'::text) AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2015) AND true AND ((exporters.iso_code2)::text = 'CD'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2022) AND (ts.taxon_concept_id = 9644) AND ((exporters.iso_code2)::text = 'CD'::text) AND true AND true AND ((sources.code)::text = 'A'::text) AND ((purposes.code)::text = 'C'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2011) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'DJ'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2018) AND (ts.taxon_concept_id = 9644) AND ((exporters.iso_code2)::text = 'CD'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2019) AND (ts.year <= 2021) AND true AND ((exporters.iso_code2)::text = 'GN'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 1999) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'IN'::text) AND true AND true AND ((sources.code)::text = 'A'::text) AND ((purposes.code)::text = 'C'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'IN'::text) AND true AND true AND ((sources.code)::text = 'A'::text) AND ((purposes.code)::text = 'C'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2015) AND true AND ((exporters.iso_code2)::text = 'LA'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2016) AND true AND ((exporters.iso_code2)::text = 'LA'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2022) AND (ts.taxon_concept_id = 12737) AND ((exporters.iso_code2)::text = 'LA'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2018) AND true AND ((exporters.iso_code2)::text = 'LR'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'LR'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 5734) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 5734) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5734) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 5734) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3151) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3151) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3151) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3151) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3411) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3411) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3411) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3411) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 10706) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 10706) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10706) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 10706) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 6828) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 6828) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6828) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 6828) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 5858) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 5858) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5858) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 5858) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 4830) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 4830) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 4830) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 4830) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3078) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3078) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3078) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3078) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 9527) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 9527) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9527) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 9527) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3359) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3359) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3359) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3359) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3362) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3362) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3362) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3362) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3686) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3686) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3686) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3686) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3604) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3604) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3604) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3604) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 10503) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 10503) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 10503) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 10503) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 11228) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 11228) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 11228) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 11228) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 7304) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 7304) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7304) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 7304) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'GN'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2021) AND (ts.year <= 2022) AND true AND ((exporters.iso_code2)::text = 'GN'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 12881) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2022) AND (ts.taxon_concept_id = 12881) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3390) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3390) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3390) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3390) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 5493) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 5493) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5493) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 5493) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 6377) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 6377) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6377) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 6377) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 6242) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 6242) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6242) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 6242) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 5707) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 5707) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5707) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 5707) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 7542) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 7542) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7542) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 7542) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3293) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3293) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3293) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3293) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 8011) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 8011) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8011) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 8011) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 5979) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 5979) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5979) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 5979) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 9004) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 9004) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9004) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 9004) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 5547) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 5547) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 5547) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 5547) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 9590) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 9590) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 9590) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 9590) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3930) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3930) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3930) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3930) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 7052) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 7052) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 7052) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 7052) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 3477) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 3477) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 3477) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 3477) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 8779) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 8779) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 8779) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 8779) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2004) AND (ts.year <= 2019) AND true AND ((exporters.iso_code2)::text = 'MR'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND true AND ((exporters.iso_code2)::text = 'NG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'NG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2011) AND (ts.year <= 2014) AND true AND ((exporters.iso_code2)::text = 'PY'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2011) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 23851) AND ((exporters.iso_code2)::text = 'PY'::text) AND true AND ((terms.code)::text = 'OIL'::text) AND ((sources.code)::text = 'TIM'::text) AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2011) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 6048) AND ((exporters.iso_code2)::text = 'PY'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 5690) AND ((exporters.iso_code2)::text = 'LA'::text) AND true AND ((terms.code)::text = 'BAL'::text) AND ((sources.code)::text = 'BAR'::text) AND ((purposes.code)::text = 'BOD'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2006) AND (ts.year <= 2016) AND true AND ((exporters.iso_code2)::text = 'SO'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2012) AND (ts.year <= 2013) AND (ts.taxon_concept_id = 6940) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2013) AND (ts.year <= 2014) AND (ts.taxon_concept_id = 6940) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 12737) AND ((exporters.iso_code2)::text = 'LA'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 9644) AND ((exporters.iso_code2)::text = 'CD'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'CM'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'CF'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'TD'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'GM'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2018) AND true AND ((exporters.iso_code2)::text = 'GW'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'ML'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'TG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'ST'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 67733) AND ((exporters.iso_code2)::text = 'GW'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2018) AND true AND ((exporters.iso_code2)::text = 'LA'::text) AND true AND ((terms.code)::text = 'CAR'::text) AND ((sources.code)::text = 'WPR'::text) AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2014) AND (ts.year <= 2015) AND (ts.taxon_concept_id = 6940) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2015) AND (ts.year <= 2016) AND (ts.taxon_concept_id = 6940) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND true AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2022) AND (ts.year <= 2025) AND (ts.taxon_concept_id = 12737) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2018) AND (ts.year <= 2022) AND (ts.taxon_concept_id = 12737) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2017) AND (ts.taxon_concept_id = 12737) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2017) AND (ts.year <= 2018) AND (ts.taxon_concept_id = 12737) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2016) AND (ts.year <= 2017) AND (ts.taxon_concept_id = 12881) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2017) AND (ts.year <= 2018) AND (ts.taxon_concept_id = 12881) AND ((exporters.iso_code2)::text = 'MG'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2023) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'MX'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2004) AND (ts.year <= 2019) AND true AND ((exporters.iso_code2)::text = 'SO'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL)) OR ((ts.year >= 2019) AND (ts.year <= 2025) AND true AND ((exporters.iso_code2)::text = 'SO'::text) AND true AND true AND true AND ((purposes.code)::text = 'Z'::text) AND (ts.country_of_origin_id IS NULL))))))
  ORDER BY s.year, s.class_name, s.order_name, s.family_name, s.genus_name, s.taxon_name, s.term;


--
-- Name: trade_shipments_cites_suspensions_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.trade_shipments_cites_suspensions_mview AS
 SELECT trade_shipments_cites_suspensions_view.id,
    trade_shipments_cites_suspensions_view.year,
    trade_shipments_cites_suspensions_view.appendix,
    trade_shipments_cites_suspensions_view.taxon_concept_id,
    trade_shipments_cites_suspensions_view.author_year,
    trade_shipments_cites_suspensions_view.name_status,
    trade_shipments_cites_suspensions_view.taxon_name,
    trade_shipments_cites_suspensions_view.phylum_id,
    trade_shipments_cites_suspensions_view.class_id,
    trade_shipments_cites_suspensions_view.class_name,
    trade_shipments_cites_suspensions_view.order_id,
    trade_shipments_cites_suspensions_view.order_name,
    trade_shipments_cites_suspensions_view.family_id,
    trade_shipments_cites_suspensions_view.family_name,
    trade_shipments_cites_suspensions_view.genus_id,
    trade_shipments_cites_suspensions_view.genus_name,
    trade_shipments_cites_suspensions_view.term_id,
    trade_shipments_cites_suspensions_view.term,
    trade_shipments_cites_suspensions_view.importer_reported_quantity,
    trade_shipments_cites_suspensions_view.exporter_reported_quantity,
    trade_shipments_cites_suspensions_view.unit_id,
    trade_shipments_cites_suspensions_view.unit,
    trade_shipments_cites_suspensions_view.exporter_id,
    trade_shipments_cites_suspensions_view.exporter_iso,
    trade_shipments_cites_suspensions_view.exporter,
    trade_shipments_cites_suspensions_view.importer_id,
    trade_shipments_cites_suspensions_view.importer_iso,
    trade_shipments_cites_suspensions_view.importer,
    trade_shipments_cites_suspensions_view.origin,
    trade_shipments_cites_suspensions_view.purpose_id,
    trade_shipments_cites_suspensions_view.purpose,
    trade_shipments_cites_suspensions_view.source_id,
    trade_shipments_cites_suspensions_view.source,
    trade_shipments_cites_suspensions_view.import_permits,
    trade_shipments_cites_suspensions_view.export_permits,
    trade_shipments_cites_suspensions_view.origin_permits,
    trade_shipments_cites_suspensions_view.ifs_permits,
    trade_shipments_cites_suspensions_view.import_permit,
    trade_shipments_cites_suspensions_view.export_permit,
    trade_shipments_cites_suspensions_view.origin_permit,
    trade_shipments_cites_suspensions_view.ifs_permit,
    trade_shipments_cites_suspensions_view.issue_type,
    trade_shipments_cites_suspensions_view.details_of_compliance_issue,
    trade_shipments_cites_suspensions_view.compliance_type_start_date,
    trade_shipments_cites_suspensions_view.compliance_type_taxon,
    trade_shipments_cites_suspensions_view.rank_id,
    trade_shipments_cites_suspensions_view.rank_name,
    trade_shipments_cites_suspensions_view.compliance_type_end_date,
    trade_shipments_cites_suspensions_view.suspension_start_notification,
    trade_shipments_cites_suspensions_view.suspension_end_notification,
    trade_shipments_cites_suspensions_view.notes
   FROM public.trade_shipments_cites_suspensions_view
  WITH NO DATA;


--
-- Name: trade_shipments_mandatory_quotas_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_shipments_mandatory_quotas_view AS
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '16/02/1995'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Melanosuchus niger'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**I** Included in Appendix I, except for the population of Brazil, which is included in Appendix II, and the population of Ecuador, which is included in Appendix II and is subject to a zero annual export quota until an annual export quota has been approved by the CITES Secretariat and the IUCN/SSC Crocodile Specialist Group.
**II** Population of Brazil and the population of Ecuador, which is included in Appendix II and is subject to a zero annual export quota until an annual export quota has been approved by the CITES Secretariat and the IUCN/SSC Crocodile Specialist Group.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1995) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 10978) AND ((exporter_1.iso_code2)::text = 'EC'::text) AND true AND true AND true AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '09/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Capra falconeri'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '12'::text AS quota_quantity,
    'hunting trophies  Conf. 10.15 (Rev. CoP14)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 3780) AND ((exporter_1.iso_code2)::text = 'PK'::text) AND true AND ((term_1.code)::text = 'TRO'::text) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (12)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '09/06/1997'::text AS compliance_type_start_date,
    '23/02/2023'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '500'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2023) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'ET'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (500)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '10/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '250'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'NA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (250)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '11/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '500'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'TZ'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (500)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '12/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '300'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'ZM'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (300)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '13/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '500'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'ZW'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (500)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '14/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '130'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'BW'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (130)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '15/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '40'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'CF'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (40)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '16/06/1997'::text AS compliance_type_start_date,
    '23/02/2023'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '80'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2023) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'KE'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (80)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '17/06/1997'::text AS compliance_type_start_date,
    '23/02/2023'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '50'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2023) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'MW'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (50)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '18/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '120'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'MZ'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (120)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '19/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '150'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'ZA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (150)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '20/06/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '28'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'UG'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (28)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '18/09/1997'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Chaetophractus nationi'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Included in Appendix II. A zero annual export quota has been established. All specimens shall be deemed to be specimens of species included in Appendix I and the trade in them shall be regulated accordingly.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1997) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 5522) AND true AND true AND true AND true AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '19/07/2000'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Centrochelys sulcata'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [FAMILY listing Testudinidae spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for Centrochelys sulcata for specimens removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2000) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 31025) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '14/10/2004'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Diceros bicornis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '5'::text AS quota_quantity,
    'hunting trophies from adult males (Resolution Conf. 13.5 (Rev.CoP18))'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2004) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 6656) AND ((exporter_1.iso_code2)::text = 'NA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['TRO'::character varying, 'SKI'::character varying, 'SKU'::character varying, 'HOR'::character varying, 'BOD'::character varying, 'FOO'::character varying, 'GEN'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (5)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '14/10/2004'::text AS compliance_type_start_date,
    '25/11/2019'::text AS compliance_type_end_date,
    'Diceros bicornis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '5'::text AS quota_quantity,
    'hunting trophies from adult males [Note: see Resolution Conf. 13.5 (Rev.CoP18)]'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2004) AND (ts_1.year <= 2019) AND (ts_1.taxon_concept_id = 6656) AND ((exporter_1.iso_code2)::text = 'ZA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['TRO'::character varying, 'SKI'::character varying, 'SKU'::character varying, 'HOR'::character varying, 'BOD'::character varying, 'FOO'::character varying, 'GEN'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (5)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Chelodina mccordi'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Zero export quota for specimens from the wild.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7441) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Batagur borneoensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Zero quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 4927) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Batagur trivittata'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Zero quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 4397) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora aurocapitata'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8231) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    '25/11/2019'::text AS compliance_type_end_date,
    'Cuora bourreti'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    ''::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2019) AND (ts_1.taxon_concept_id = 65766) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora flavomarginata'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7271) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    '23/02/2023'::text AS compliance_type_end_date,
    'Cuora galbinifrons'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2023) AND (ts_1.taxon_concept_id = 10210) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora mccordi'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 3678) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora mouhotii'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 10699) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora pani'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 6783) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    '25/11/2019'::text AS compliance_type_end_date,
    'Cuora picturata'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    ''::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2019) AND (ts_1.taxon_concept_id = 65767) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora trifasciata'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 6023) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora yunnanensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 5712) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Cuora zhoui'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Cuora spp.] Except the species included in Appendix I; zero quota for wild specimens for commercial purposes for Cuora aurocapitata, C. flavomarginata, C. galbinifrons, C. mccordi, C. mouhotii, C. pani, C. trifasciata, C. yunnanensis and C. zhoui.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 5930) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Heosemys annandalii'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Zero quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7457) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Heosemys depressa'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Zero quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 4484) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    '25/11/2019'::text AS compliance_type_end_date,
    'Mauremys annamensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    ''::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2019) AND (ts_1.taxon_concept_id = 3838) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '12/06/2013'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Orlitia borneensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** Zero quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2013) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 3413) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera leo'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [FAMILY listing Felidae spp.] For Panthera leo (African populations): a zero annual export quota is established for specimens of bones, bone pieces, bone products, claws, skeletons, skulls and teeth removed from the wild and traded for commercial purposes. Annual export quotas for trade in bones, bone pieces, bone products, claws, skeletons, skulls and teeth for commercial purposes, derived from captive breeding operations in South Africa, will be established and communicated annually to the CITES Secretariat.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 6353) AND true AND true AND ((term_1.code)::text = ANY ((ARRAY['BON'::character varying, 'BOP'::character varying, 'BPR'::character varying, 'CLA'::character varying, 'SKE'::character varying, 'SKU'::character varying, 'TEE'::character varying])::text[])) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Saiga borealis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'A zero export quota for wild specimens traded for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 9751) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Saiga borealis mongolica'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'A zero export quota for wild specimens traded for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 12241) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Saiga tatarica'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'A zero export quota for wild specimens traded for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8765) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Crocodylus acutus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'Population of the Integrated Management District of Mangroves of the Bay of Cispata, Tinajones, La Balsa and Surrounding Areas, Department of Córdoba, Colombia, and the population of Cuba; and the population of Mexico, which is subject to a zero export quota for wild specimens for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 6436) AND ((exporter_1.iso_code2)::text = 'MX'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Ceratophora aspera'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'Zero export quota for wild specimens for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 98192) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Ceratophora stoddartii'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'Zero export quota for wild specimens for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 98195) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '26/11/2019'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Lyriocephalus scutatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'Zero export quota for wild specimens for commercial purposes '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2019) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 98201) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    ' 01/07/1975'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Acinonyx jubatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '5'::text AS quota_quantity,
    'live and trophies'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1975) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8935) AND ((exporter_1.iso_code2)::text = 'BW'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['LIV'::character varying, 'TRO'::character varying])::text[])) AND true AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (5)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    ' 01/07/1975'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Acinonyx jubatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '150'::text AS quota_quantity,
    'live and trophies'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1975) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8935) AND ((exporter_1.iso_code2)::text = 'NA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['LIV'::character varying, 'TRO'::character varying])::text[])) AND true AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (150)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    ' 01/07/1975'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Acinonyx jubatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '50'::text AS quota_quantity,
    'live and trophies'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 1975) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8935) AND ((exporter_1.iso_code2)::text = 'ZW'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['LIV'::character varying, 'TRO'::character varying])::text[])) AND true AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (50)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Crocodylus porosus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**I** Except the populations of Australia, Indonesia, Malaysia [wild harvest restricted to the State of Sarawak and a zero quota for wild specimens for the other States of Malaysia (Sabah and Peninsular Malaysia), with no change in the zero quota unless approved by the Parties] and Papua New Guinea, which are included in Appendix II.
**II** Only the populations of Australia, Indonesia, Malaysia [wild harvest restricted to the State of Sarawak and a zero quota for wild specimens for the other States of Malaysia (Sabah and Peninsular Malaysia), with no change in the zero quota unless approved by the Parties] and Papua New Guinea; all other populations are included in Appendix I.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8560) AND ((exporter_1.iso_code2)::text = 'MY'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Abronia aurita'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Abronia spp.] Except the species included in Appendix I. Zero export quota for wild specimens for Abronia aurita, A. gaiophantasma, A. montecristoi, A. salvadorensis and A. vasconcelosii.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 68179) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Abronia gaiophantasma'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Abronia spp.] Except the species included in Appendix I. Zero export quota for wild specimens for Abronia aurita, A. gaiophantasma, A. montecristoi, A. salvadorensis and A. vasconcelosii.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 68245) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Abronia montecristoi'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Abronia spp.] Except the species included in Appendix I. Zero export quota for wild specimens for Abronia aurita, A. gaiophantasma, A. montecristoi, A. salvadorensis and A. vasconcelosii.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 68148) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Abronia salvadorensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Abronia spp.] Except the species included in Appendix I. Zero export quota for wild specimens for Abronia aurita, A. gaiophantasma, A. montecristoi, A. salvadorensis and A. vasconcelosii.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 68213) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Abronia vasconcelosii'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [GENUS listing Abronia spp.] Except the species included in Appendix I. Zero export quota for wild specimens for Abronia aurita, A. gaiophantasma, A. montecristoi, A. salvadorensis and A. vasconcelosii.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 68195) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 02/01/2017'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Lanthanotus borneensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [FAMILY listing Lanthanotidae spp.] Zero export quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 67618) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 13/02/2003'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Tursiops truncatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [ORDER listing Cetacea spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for live specimens from the Black Sea population of Tursiops truncatus removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2003) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7086) AND ((exporter_1.iso_code2)::text = 'BG'::text) AND true AND ((term_1.code)::text = 'LIV'::text) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 13/02/2003'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Tursiops truncatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [ORDER listing Cetacea spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for live specimens from the Black Sea population of Tursiops truncatus removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2003) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7086) AND ((exporter_1.iso_code2)::text = 'GE'::text) AND true AND ((term_1.code)::text = 'LIV'::text) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 13/02/2003'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Tursiops truncatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [ORDER listing Cetacea spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for live specimens from the Black Sea population of Tursiops truncatus removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2003) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7086) AND ((exporter_1.iso_code2)::text = 'RO'::text) AND true AND ((term_1.code)::text = 'LIV'::text) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 13/02/2003'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Tursiops truncatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [ORDER listing Cetacea spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for live specimens from the Black Sea population of Tursiops truncatus removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2003) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7086) AND ((exporter_1.iso_code2)::text = 'RU'::text) AND true AND ((term_1.code)::text = 'LIV'::text) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 13/02/2003'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Tursiops truncatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [ORDER listing Cetacea spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for live specimens from the Black Sea population of Tursiops truncatus removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2003) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7086) AND ((exporter_1.iso_code2)::text = 'TR'::text) AND true AND ((term_1.code)::text = 'LIV'::text) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 13/02/2003'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Tursiops truncatus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**II** [ORDER listing Cetacea spp.] Included in Appendix II, except for the species included in Appendix I. A zero annual export quota has been established for live specimens from the Black Sea population of Tursiops truncatus removed from the wild and traded for primarily commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2003) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7086) AND ((exporter_1.iso_code2)::text = 'UA'::text) AND true AND ((term_1.code)::text = 'LIV'::text) AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 23/06/2010'::text AS compliance_type_start_date,
    ' 01/01/2017'::text AS compliance_type_end_date,
    'Crocodylus moreletii'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'Zero quota for Mexico. Removed following listing in 02/01/2017'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2010) AND (ts_1.year <= 2017) AND (ts_1.taxon_concept_id = 7747) AND ((exporter_1.iso_code2)::text = 'MX'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 23/06/2010'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Crocodylus moreletii'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**I** Except the population of Belize, which is included in Appendix II with a zero quota for wild specimens traded for commercial purposes, and the population of Mexico, which is included in Appendix II.
**II** Only the population of Belize, which is included in Appendix II with a zero quota for wild specimens traded for commercial purposes, and the population of Mexico.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2010) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 7747) AND ((exporter_1.iso_code2)::text = 'BZ'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 23/06/2010'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Crocodylus niloticus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    '**I** Included in Appendix I, except the populations of Botswana, Egypt (subject to a zero quota for wild specimens traded for commercial purposes), Ethiopia, Kenya, Madagascar, Malawi, Mozambique, Namibia, South Africa, Uganda, the United Republic of Tanzania (subject to an annual export quota of no more than 1,600 wild specimens including hunting trophies, in addition to ranched specimens), Zambia and Zimbabwe, which are included in Appendix II
**II** Populations of Botswana, Egypt (subject to a zero quota for wild specimens traded for commercial purposes), Ethiopia, Kenya, Madagascar, Malawi, Mozambique, Namibia, South Africa, Uganda, the United Republic of Tanzania (subject to an annual export quota of no more than 1,600 wild specimens including hunting trophies, in addition to ranched specimens), Zambia and Zimbabwe. '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2010) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 10745) AND ((exporter_1.iso_code2)::text = 'EG'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    ' 23/06/2010'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Crocodylus niloticus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '1600'::text AS quota_quantity,
    '**I** Included in Appendix I, except the populations of Botswana, Egypt (subject to a zero quota for wild specimens traded for commercial purposes), Ethiopia, Kenya, Madagascar, Malawi, Mozambique, Namibia, South Africa, Uganda, the United Republic of Tanzania (subject to an annual export quota of no more than 1,600 wild specimens including hunting trophies, in addition to ranched specimens), Zambia and Zimbabwe, which are included in Appendix II
**II** Populations of Botswana, Egypt (subject to a zero quota for wild specimens traded for commercial purposes), Ethiopia, Kenya, Madagascar, Malawi, Mozambique, Namibia, South Africa, Uganda, the United Republic of Tanzania (subject to an annual export quota of no more than 1,600 wild specimens including hunting trophies, in addition to ranched specimens), Zambia and Zimbabwe. '::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2010) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 10745) AND ((exporter_1.iso_code2)::text = 'TZ'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (1600)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '23/02/2023'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Agalychnis lemur'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'wild-taken specimens traded for commercial purposes'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2023) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 101453) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '23/02/2023'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Laotriton laoensis'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'zero annual export quota for wild-taken specimens traded for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2023) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 10017) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '23/02/2023'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Hypancistrus zebra'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'zero export quota for wild specimens for commercial purposes.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2023) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 68475) AND true AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '23/02/2023'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Caiman latirostris'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'wild-taken specimens traded for commercial purposes'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2023) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 5390) AND ((exporter_1.iso_code2)::text = 'BR'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '23/02/2023'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Crocodylus porosus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '0'::text AS quota_quantity,
    'Philippines [population of the Palawan Islands, subject to a zero annual export quota for wild specimens traded for commercial purposes]'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2023) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8560) AND ((exporter_1.iso_code2)::text = 'PH'::text) AND true AND true AND ((source_1.code)::text = 'W'::text) AND ((purpose_1.code)::text = 'T'::text) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (0)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'CoP_approved'::text AS details_of_compliance_issue,
    '23/02/2023'::text AS compliance_type_start_date,
    'Present'::text AS compliance_type_end_date,
    'Panthera pardus'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '20'::text AS quota_quantity,
    'Resolution Conf. 10.14 (Rev. CoP19)'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2023) AND (ts_1.year <= 2025) AND (ts_1.taxon_concept_id = 8619) AND ((exporter_1.iso_code2)::text = 'ET'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKI'::character varying, 'TRO'::character varying])::text[])) AND true AND ((purpose_1.code)::text = ANY ((ARRAY['H'::character varying, 'P'::character varying])::text[])) AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (20)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '02/01/2017'::text AS compliance_type_start_date,
    '31/12/2017'::text AS compliance_type_end_date,
    'Panthera leo'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '800'::text AS quota_quantity,
    '**II** [FAMILY listing Felidae spp.] For Panthera leo (African populations): a zero annual export quota is established for specimens of bones, bone pieces, bone products, claws, skeletons, skulls and teeth removed from the wild and traded for commercial purposes. Annual export quotas for trade in bones, bone pieces, bone products, claws, skeletons, skulls and teeth for commercial purposes, derived from captive breeding operations in South Africa, will be established and communicated annually to the CITES Secretariat.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2017) AND (ts_1.year <= 2017) AND (ts_1.taxon_concept_id = 6353) AND ((exporter_1.iso_code2)::text = 'ZA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKE'::character varying, 'SKU'::character varying])::text[])) AND ((source_1.code)::text = 'C'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (800)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id)
UNION
( SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_id,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.taxon_concept_genus_name AS genus_name,
        CASE
            WHEN ts.reported_by_exporter THEN ts.quantity
            ELSE NULL::numeric
        END AS exporter_reported_quantity,
        CASE
            WHEN ts.reported_by_exporter THEN NULL::numeric
            ELSE ts.quantity
        END AS importer_reported_quantity,
    unit.id AS unit_id,
    unit.name_en AS unit,
    importer.id AS importer_id,
    importer.iso_code2 AS importer_iso,
    importer.name_en AS importer,
    exporter.id AS exporter_id,
    exporter.iso_code2 AS exporter_iso,
    exporter.name_en AS exporter,
    NULL::text AS origin,
    purpose.id AS purpose_id,
    purpose.name_en AS purpose,
    source.id AS source_id,
    source.name_en AS source,
    term.id AS term_id,
    term.name_en AS term,
    ts.import_permits_ids AS import_permits,
    ts.export_permits_ids AS export_permits,
    ts.origin_permits_ids AS origin_permits,
    ts.ifs_permits_ids AS ifs_permits,
    ts.import_permit_number AS import_permit,
    ts.export_permit_number AS export_permit,
    ts.origin_permit_number AS origin_permit,
    ts.origin_permit_number AS ifs_permit,
    'Quota'::text AS issue_type,
    'Listing_annotations'::text AS details_of_compliance_issue,
    '01/01/2018'::text AS compliance_type_start_date,
    '31/12/2018'::text AS compliance_type_end_date,
    'Panthera leo'::text AS compliance_type_taxon,
    ts.taxon_concept_rank_id AS rank_id,
    'SPECIES'::text AS rank_name,
    '800'::text AS quota_quantity,
    '**II** [FAMILY listing Felidae spp.] For Panthera leo (African populations): a zero annual export quota is established for specimens of bones, bone pieces, bone products, claws, skeletons, skulls and teeth removed from the wild and traded for commercial purposes. Annual export quotas for trade in bones, bone pieces, bone products, claws, skeletons, skulls and teeth for commercial purposes, derived from captive breeding operations in South Africa, will be established and communicated annually to the CITES Secretariat.'::text AS notes
   FROM ((((((public.trade_shipments_with_taxa_view ts
     JOIN public.geo_entities exporter ON ((exporter.id = ts.exporter_id)))
     JOIN public.geo_entities importer ON ((importer.id = ts.importer_id)))
     LEFT JOIN public.trade_codes source ON ((ts.source_id = source.id)))
     LEFT JOIN public.trade_codes purpose ON ((ts.purpose_id = purpose.id)))
     LEFT JOIN public.trade_codes unit ON ((ts.unit_id = unit.id)))
     LEFT JOIN public.trade_codes term ON ((ts.term_id = term.id)))
  WHERE (ts.id IN ( SELECT unnest(sub.ids) AS unnest
           FROM ( SELECT array_agg(ts_1.id) AS ids
                   FROM (((((public.trade_shipments_with_taxa_view ts_1
                     JOIN public.geo_entities exporter_1 ON ((exporter_1.id = ts_1.exporter_id)))
                     LEFT JOIN public.trade_codes source_1 ON ((ts_1.source_id = source_1.id)))
                     LEFT JOIN public.trade_codes purpose_1 ON ((ts_1.purpose_id = purpose_1.id)))
                     LEFT JOIN public.trade_codes unit_1 ON ((ts_1.unit_id = unit_1.id)))
                     LEFT JOIN public.trade_codes term_1 ON ((ts_1.term_id = term_1.id)))
                  WHERE ((ts_1.year >= 2018) AND (ts_1.year <= 2018) AND (ts_1.taxon_concept_id = 6353) AND ((exporter_1.iso_code2)::text = 'ZA'::text) AND true AND ((term_1.code)::text = ANY ((ARRAY['SKE'::character varying, 'SKU'::character varying])::text[])) AND ((source_1.code)::text = 'C'::text) AND true AND (ts_1.country_of_origin_id IS NULL) AND (((source_1.name_en)::text <> 'Confiscations/seizures'::text) OR (ts_1.source_id IS NULL)))
                  GROUP BY ts_1.year, ts_1.reported_by_exporter
                 HAVING (sum(ts_1.quantity) > (800)::numeric)) sub))
  ORDER BY ts.year, ts.taxon_concept_full_name, ts.exporter_id, ts.importer_id);


--
-- Name: trade_shipments_mandatory_quotas_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.trade_shipments_mandatory_quotas_mview AS
 SELECT trade_shipments_mandatory_quotas_view.id,
    trade_shipments_mandatory_quotas_view.year,
    trade_shipments_mandatory_quotas_view.appendix,
    trade_shipments_mandatory_quotas_view.author_year,
    trade_shipments_mandatory_quotas_view.name_status,
    trade_shipments_mandatory_quotas_view.taxon_concept_id,
    trade_shipments_mandatory_quotas_view.taxon_name,
    trade_shipments_mandatory_quotas_view.phylum_id,
    trade_shipments_mandatory_quotas_view.class_id,
    trade_shipments_mandatory_quotas_view.class_name,
    trade_shipments_mandatory_quotas_view.order_id,
    trade_shipments_mandatory_quotas_view.order_name,
    trade_shipments_mandatory_quotas_view.family_id,
    trade_shipments_mandatory_quotas_view.family_name,
    trade_shipments_mandatory_quotas_view.genus_id,
    trade_shipments_mandatory_quotas_view.genus_name,
    trade_shipments_mandatory_quotas_view.exporter_reported_quantity,
    trade_shipments_mandatory_quotas_view.importer_reported_quantity,
    trade_shipments_mandatory_quotas_view.unit_id,
    trade_shipments_mandatory_quotas_view.unit,
    trade_shipments_mandatory_quotas_view.importer_id,
    trade_shipments_mandatory_quotas_view.importer_iso,
    trade_shipments_mandatory_quotas_view.importer,
    trade_shipments_mandatory_quotas_view.exporter_id,
    trade_shipments_mandatory_quotas_view.exporter_iso,
    trade_shipments_mandatory_quotas_view.exporter,
    trade_shipments_mandatory_quotas_view.origin,
    trade_shipments_mandatory_quotas_view.purpose_id,
    trade_shipments_mandatory_quotas_view.purpose,
    trade_shipments_mandatory_quotas_view.source_id,
    trade_shipments_mandatory_quotas_view.source,
    trade_shipments_mandatory_quotas_view.term_id,
    trade_shipments_mandatory_quotas_view.term,
    trade_shipments_mandatory_quotas_view.import_permits,
    trade_shipments_mandatory_quotas_view.export_permits,
    trade_shipments_mandatory_quotas_view.origin_permits,
    trade_shipments_mandatory_quotas_view.ifs_permits,
    trade_shipments_mandatory_quotas_view.import_permit,
    trade_shipments_mandatory_quotas_view.export_permit,
    trade_shipments_mandatory_quotas_view.origin_permit,
    trade_shipments_mandatory_quotas_view.ifs_permit,
    trade_shipments_mandatory_quotas_view.issue_type,
    trade_shipments_mandatory_quotas_view.details_of_compliance_issue,
    trade_shipments_mandatory_quotas_view.compliance_type_start_date,
    trade_shipments_mandatory_quotas_view.compliance_type_end_date,
    trade_shipments_mandatory_quotas_view.compliance_type_taxon,
    trade_shipments_mandatory_quotas_view.rank_id,
    trade_shipments_mandatory_quotas_view.rank_name,
    trade_shipments_mandatory_quotas_view.quota_quantity,
    trade_shipments_mandatory_quotas_view.notes
   FROM public.trade_shipments_mandatory_quotas_view
  WITH NO DATA;


--
-- Name: non_compliant_shipments_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.non_compliant_shipments_view AS
 SELECT DISTINCT trade_shipments_appendix_i_mview.id,
    trade_shipments_appendix_i_mview.year,
    trade_shipments_appendix_i_mview.appendix,
    trade_shipments_appendix_i_mview.taxon_concept_id,
    trade_shipments_appendix_i_mview.author_year,
    trade_shipments_appendix_i_mview.name_status,
    trade_shipments_appendix_i_mview.taxon_name,
    trade_shipments_appendix_i_mview.phylum_id,
    trade_shipments_appendix_i_mview.class_id,
    trade_shipments_appendix_i_mview.class_name,
    trade_shipments_appendix_i_mview.order_id,
    trade_shipments_appendix_i_mview.order_name,
    trade_shipments_appendix_i_mview.family_id,
    trade_shipments_appendix_i_mview.family_name,
    trade_shipments_appendix_i_mview.genus_id,
    trade_shipments_appendix_i_mview.genus_name,
    trade_shipments_appendix_i_mview.term_id,
    trade_shipments_appendix_i_mview.term,
    trade_shipments_appendix_i_mview.importer_reported_quantity,
    trade_shipments_appendix_i_mview.exporter_reported_quantity,
    trade_shipments_appendix_i_mview.unit_id,
    trade_shipments_appendix_i_mview.unit,
    trade_shipments_appendix_i_mview.exporter_id,
    trade_shipments_appendix_i_mview.exporter_iso,
    trade_shipments_appendix_i_mview.exporter,
    trade_shipments_appendix_i_mview.importer_id,
    trade_shipments_appendix_i_mview.importer_iso,
    trade_shipments_appendix_i_mview.importer,
    trade_shipments_appendix_i_mview.origin,
    trade_shipments_appendix_i_mview.purpose_id,
    trade_shipments_appendix_i_mview.purpose,
    trade_shipments_appendix_i_mview.source_id,
    trade_shipments_appendix_i_mview.source,
    trade_shipments_appendix_i_mview.import_permits,
    trade_shipments_appendix_i_mview.export_permits,
    trade_shipments_appendix_i_mview.origin_permits,
    trade_shipments_appendix_i_mview.ifs_permits,
    trade_shipments_appendix_i_mview.import_permit,
    trade_shipments_appendix_i_mview.export_permit,
    trade_shipments_appendix_i_mview.origin_permit,
    trade_shipments_appendix_i_mview.ifs_permit,
    trade_shipments_appendix_i_mview.rank_id,
    trade_shipments_appendix_i_mview.rank_name,
    trade_shipments_appendix_i_mview.issue_type
   FROM public.trade_shipments_appendix_i_mview
UNION ALL
 SELECT DISTINCT trade_shipments_mandatory_quotas_mview.id,
    trade_shipments_mandatory_quotas_mview.year,
    trade_shipments_mandatory_quotas_mview.appendix,
    trade_shipments_mandatory_quotas_mview.taxon_concept_id,
    trade_shipments_mandatory_quotas_mview.author_year,
    trade_shipments_mandatory_quotas_mview.name_status,
    trade_shipments_mandatory_quotas_mview.taxon_name,
    trade_shipments_mandatory_quotas_mview.phylum_id,
    trade_shipments_mandatory_quotas_mview.class_id,
    trade_shipments_mandatory_quotas_mview.class_name,
    trade_shipments_mandatory_quotas_mview.order_id,
    trade_shipments_mandatory_quotas_mview.order_name,
    trade_shipments_mandatory_quotas_mview.family_id,
    trade_shipments_mandatory_quotas_mview.family_name,
    trade_shipments_mandatory_quotas_mview.genus_id,
    trade_shipments_mandatory_quotas_mview.genus_name,
    trade_shipments_mandatory_quotas_mview.term_id,
    trade_shipments_mandatory_quotas_mview.term,
    trade_shipments_mandatory_quotas_mview.importer_reported_quantity,
    trade_shipments_mandatory_quotas_mview.exporter_reported_quantity,
    trade_shipments_mandatory_quotas_mview.unit_id,
    trade_shipments_mandatory_quotas_mview.unit,
    trade_shipments_mandatory_quotas_mview.exporter_id,
    trade_shipments_mandatory_quotas_mview.exporter_iso,
    trade_shipments_mandatory_quotas_mview.exporter,
    trade_shipments_mandatory_quotas_mview.importer_id,
    trade_shipments_mandatory_quotas_mview.importer_iso,
    trade_shipments_mandatory_quotas_mview.importer,
    trade_shipments_mandatory_quotas_mview.origin,
    trade_shipments_mandatory_quotas_mview.purpose_id,
    trade_shipments_mandatory_quotas_mview.purpose,
    trade_shipments_mandatory_quotas_mview.source_id,
    trade_shipments_mandatory_quotas_mview.source,
    trade_shipments_mandatory_quotas_mview.import_permits,
    trade_shipments_mandatory_quotas_mview.export_permits,
    trade_shipments_mandatory_quotas_mview.origin_permits,
    trade_shipments_mandatory_quotas_mview.ifs_permits,
    trade_shipments_mandatory_quotas_mview.import_permit,
    trade_shipments_mandatory_quotas_mview.export_permit,
    trade_shipments_mandatory_quotas_mview.origin_permit,
    trade_shipments_mandatory_quotas_mview.ifs_permit,
    trade_shipments_mandatory_quotas_mview.rank_id,
    trade_shipments_mandatory_quotas_mview.rank_name,
    trade_shipments_mandatory_quotas_mview.issue_type
   FROM public.trade_shipments_mandatory_quotas_mview
UNION ALL
 SELECT DISTINCT trade_shipments_cites_suspensions_mview.id,
    trade_shipments_cites_suspensions_mview.year,
    trade_shipments_cites_suspensions_mview.appendix,
    trade_shipments_cites_suspensions_mview.taxon_concept_id,
    trade_shipments_cites_suspensions_mview.author_year,
    trade_shipments_cites_suspensions_mview.name_status,
    trade_shipments_cites_suspensions_mview.taxon_name,
    trade_shipments_cites_suspensions_mview.phylum_id,
    trade_shipments_cites_suspensions_mview.class_id,
    trade_shipments_cites_suspensions_mview.class_name,
    trade_shipments_cites_suspensions_mview.order_id,
    trade_shipments_cites_suspensions_mview.order_name,
    trade_shipments_cites_suspensions_mview.family_id,
    trade_shipments_cites_suspensions_mview.family_name,
    trade_shipments_cites_suspensions_mview.genus_id,
    trade_shipments_cites_suspensions_mview.genus_name,
    trade_shipments_cites_suspensions_mview.term_id,
    trade_shipments_cites_suspensions_mview.term,
    trade_shipments_cites_suspensions_mview.importer_reported_quantity,
    trade_shipments_cites_suspensions_mview.exporter_reported_quantity,
    trade_shipments_cites_suspensions_mview.unit_id,
    trade_shipments_cites_suspensions_mview.unit,
    trade_shipments_cites_suspensions_mview.exporter_id,
    trade_shipments_cites_suspensions_mview.exporter_iso,
    trade_shipments_cites_suspensions_mview.exporter,
    trade_shipments_cites_suspensions_mview.importer_id,
    trade_shipments_cites_suspensions_mview.importer_iso,
    trade_shipments_cites_suspensions_mview.importer,
    trade_shipments_cites_suspensions_mview.origin,
    trade_shipments_cites_suspensions_mview.purpose_id,
    trade_shipments_cites_suspensions_mview.purpose,
    trade_shipments_cites_suspensions_mview.source_id,
    trade_shipments_cites_suspensions_mview.source,
    trade_shipments_cites_suspensions_mview.import_permits,
    trade_shipments_cites_suspensions_mview.export_permits,
    trade_shipments_cites_suspensions_mview.origin_permits,
    trade_shipments_cites_suspensions_mview.ifs_permits,
    trade_shipments_cites_suspensions_mview.import_permit,
    trade_shipments_cites_suspensions_mview.export_permit,
    trade_shipments_cites_suspensions_mview.origin_permit,
    trade_shipments_cites_suspensions_mview.ifs_permit,
    trade_shipments_cites_suspensions_mview.rank_id,
    trade_shipments_cites_suspensions_mview.rank_name,
    trade_shipments_cites_suspensions_mview.issue_type
   FROM public.trade_shipments_cites_suspensions_mview;


--
-- Name: orphaned_taxon_concepts_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.orphaned_taxon_concepts_view AS
 SELECT tc.name_status,
    tc.id,
    tc.legacy_id,
    tc.legacy_trade_code,
    (tc.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    tc.full_name,
    tc.author_year,
    taxonomies.id AS taxonomy_id,
    taxonomies.name AS taxonomy_name,
    array_to_string(ARRAY[general_note.note, nomenclature_note.note, distribution_note.note], '
'::text) AS internal_notes,
    to_char(tc.created_at, 'DD/MM/YYYY HH24:MI'::text) AS created_at,
    uc.name AS created_by,
    to_char(tc.updated_at, 'DD/MM/YYYY HH24:MI'::text) AS updated_at,
    uu.name AS updated_by,
    to_char(tc.dependents_updated_at, 'DD/MM/YYYY HH24:MI'::text) AS dependents_updated_at,
    uud.name AS dependents_updated_by
   FROM ((((((((((public.taxon_concepts tc
     JOIN public.taxonomies ON ((taxonomies.id = tc.taxonomy_id)))
     LEFT JOIN public.taxon_relationships tr1 ON ((tr1.taxon_concept_id = tc.id)))
     LEFT JOIN public.taxon_relationships tr2 ON ((tr2.other_taxon_concept_id = tc.id)))
     LEFT JOIN public.taxon_concepts children ON ((children.parent_id = tc.id)))
     LEFT JOIN public.comments general_note ON (((general_note.commentable_id = tc.id) AND ((general_note.commentable_type)::text = 'TaxonConcept'::text) AND ((general_note.comment_type)::text = 'General'::text))))
     LEFT JOIN public.comments nomenclature_note ON (((nomenclature_note.commentable_id = tc.id) AND ((nomenclature_note.commentable_type)::text = 'TaxonConcept'::text) AND ((nomenclature_note.comment_type)::text = 'Nomenclature'::text))))
     LEFT JOIN public.comments distribution_note ON (((distribution_note.commentable_id = tc.id) AND ((distribution_note.commentable_type)::text = 'TaxonConcept'::text) AND ((distribution_note.comment_type)::text = 'Distribution'::text))))
     LEFT JOIN public.users uc ON ((tc.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((tc.updated_by_id = uu.id)))
     LEFT JOIN public.users uud ON ((tc.dependents_updated_by_id = uud.id)))
  WHERE ((tc.parent_id IS NULL) AND (tr1.id IS NULL) AND (tr2.id IS NULL) AND (children.id IS NULL));


--
-- Name: preset_tags; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.preset_tags (
    id integer NOT NULL,
    name character varying(255),
    model character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: preset_tags_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.preset_tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: preset_tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.preset_tags_id_seq OWNED BY public.preset_tags.id;


--
-- Name: proposal_details; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.proposal_details (
    id integer NOT NULL,
    document_id integer,
    proposal_nature text,
    proposal_outcome_id integer,
    representation text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    proposal_number text
);


--
-- Name: proposal_details_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.proposal_details_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: proposal_details_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.proposal_details_id_seq OWNED BY public.proposal_details.id;


--
-- Name: ranks_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.ranks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: ranks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.ranks_id_seq OWNED BY public.ranks.id;


--
-- Name: references_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.references_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: references_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.references_id_seq OWNED BY public."references".id;


--
-- Name: references_legacy_id_mapping; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.references_legacy_id_mapping (
    id integer NOT NULL,
    legacy_id integer NOT NULL,
    legacy_type text NOT NULL,
    alias_legacy_id integer NOT NULL
);


--
-- Name: references_legacy_id_mapping_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.references_legacy_id_mapping_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: references_legacy_id_mapping_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.references_legacy_id_mapping_id_seq OWNED BY public.references_legacy_id_mapping.id;


--
-- Name: review_details; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.review_details (
    id integer NOT NULL,
    document_id integer,
    review_phase_id integer,
    process_stage_id integer,
    recommended_category text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: review_details_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.review_details_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: review_details_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.review_details_id_seq OWNED BY public.review_details.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.schema_migrations (
    version character varying(255) NOT NULL
);


--
-- Name: species_listings_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.species_listings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: species_listings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.species_listings_id_seq OWNED BY public.species_listings.id;


--
-- Name: species_reference_output_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.species_reference_output_view AS
 SELECT st.id,
    st.legacy_id,
    (st.data OPERATOR(public.->) 'kingdom_name'::text) AS kingdom_name,
    (st.data OPERATOR(public.->) 'phylum_name'::text) AS phylum_name,
    (st.data OPERATOR(public.->) 'class_name'::text) AS class_name,
    (st.data OPERATOR(public.->) 'order_name'::text) AS order_name,
    (st.data OPERATOR(public.->) 'family_name'::text) AS family_name,
    (st.data OPERATOR(public.->) 'genus_name'::text) AS genus_name,
    (st.data OPERATOR(public.->) 'species_name'::text) AS species_name,
    st.full_name,
    st.author_year,
    st.taxonomic_position,
    (st.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    st.name_status,
    taxonomies.name AS taxonomy,
    taxonomies.id AS taxonomy_id,
    rf.citation AS reference,
    rf.id AS reference_id,
    rf.legacy_id AS reference_legacy_id,
    to_char(r.created_at, 'DD/MM/YYYY'::text) AS created_at,
    uc.name AS created_by,
    to_char(r.updated_at, 'DD/MM/YYYY'::text) AS updated_at,
    uu.name AS updated_by
   FROM (((((public.taxon_concepts st
     JOIN public.taxonomies ON ((taxonomies.id = st.taxonomy_id)))
     LEFT JOIN public.taxon_concept_references r ON (((r.taxon_concept_id = st.id) AND (r.is_standard IS FALSE))))
     LEFT JOIN public."references" rf ON ((r.reference_id = rf.id)))
     LEFT JOIN public.users uc ON ((r.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((r.updated_by_id = uu.id)))
  WHERE ((st.name_status)::text = ANY (ARRAY[('A'::character varying)::text, ('N'::character varying)::text]));


--
-- Name: srg_histories_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.srg_histories_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: srg_histories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.srg_histories_id_seq OWNED BY public.srg_histories.id;


--
-- Name: standard_reference_output_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.standard_reference_output_view AS
 WITH RECURSIVE inherited_references AS (
         SELECT taxon_concept_references_1.id,
            taxon_concept_references_1.taxon_concept_id,
            taxon_concept_references_1.excluded_taxon_concepts_ids AS exclusions,
            taxon_concept_references_1.is_cascaded
           FROM public.taxon_concept_references taxon_concept_references_1
          WHERE (taxon_concept_references_1.is_standard = true)
        UNION
         SELECT d.id,
            low.id,
            d.exclusions,
            d.is_cascaded
           FROM (public.taxon_concepts low
             JOIN inherited_references d ON ((d.taxon_concept_id = low.parent_id)))
          WHERE ((NOT (COALESCE(d.exclusions, ARRAY[]::integer[]) @> ARRAY[low.id])) AND d.is_cascaded)
        )
 SELECT taxon_concepts.id,
    taxon_concepts.legacy_id,
    (taxon_concepts.data OPERATOR(public.->) 'kingdom_name'::text) AS kingdom_name,
    (taxon_concepts.data OPERATOR(public.->) 'phylum_name'::text) AS phylum_name,
    (taxon_concepts.data OPERATOR(public.->) 'class_name'::text) AS class_name,
    (taxon_concepts.data OPERATOR(public.->) 'order_name'::text) AS order_name,
    (taxon_concepts.data OPERATOR(public.->) 'family_name'::text) AS family_name,
    (taxon_concepts.data OPERATOR(public.->) 'genus_name'::text) AS genus_name,
    (taxon_concepts.data OPERATOR(public.->) 'species_name'::text) AS species_name,
    taxon_concepts.full_name,
    taxon_concepts.author_year,
    taxon_concepts.taxonomic_position,
    (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    taxon_concepts.name_status,
    taxonomies.name AS taxonomy,
    taxonomies.id AS taxonomy_id,
    r.id AS reference_id,
    r.legacy_id AS reference_legacy_id,
    r.citation,
        CASE
            WHEN ((issued_for.id IS NOT NULL) AND (issued_for.id <> taxon_concepts.id)) THEN issued_for.full_name
            ELSE ''::character varying
        END AS inherited_from,
        CASE
            WHEN ((issued_for.id IS NOT NULL) AND (issued_for.id = taxon_concepts.id)) THEN array_to_string(ARRAY( SELECT taxon_concepts_1.full_name
               FROM (unnest(inherited_references.exclusions) s(s)
                 JOIN public.taxon_concepts taxon_concepts_1 ON ((taxon_concepts_1.id = s.s)))
              WHERE (s.s IS NOT NULL)), ', '::text)
            ELSE ''::text
        END AS exclusions,
    inherited_references.is_cascaded,
    to_char(taxon_concept_references.created_at, 'DD/MM/YYYY'::text) AS created_at,
    uc.name AS created_by,
    to_char(taxon_concept_references.updated_at, 'DD/MM/YYYY'::text) AS updated_at,
    uu.name AS updated_by
   FROM (((((((public.taxon_concepts
     JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
     LEFT JOIN inherited_references ON ((taxon_concepts.id = inherited_references.taxon_concept_id)))
     LEFT JOIN public.taxon_concept_references ON ((taxon_concept_references.id = inherited_references.id)))
     LEFT JOIN public."references" r ON ((r.id = taxon_concept_references.reference_id)))
     LEFT JOIN public.taxon_concepts issued_for ON ((issued_for.id = taxon_concept_references.taxon_concept_id)))
     LEFT JOIN public.users uc ON ((taxon_concept_references.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((taxon_concept_references.updated_by_id = uu.id)))
  WHERE ((taxon_concepts.name_status)::text = ANY (ARRAY[('N'::character varying)::text, ('A'::character varying)::text]))
  ORDER BY r.citation;


--
-- Name: synonyms_and_trade_names_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.synonyms_and_trade_names_view AS
 SELECT st.name_status,
    st.id,
    st.legacy_id,
    st.legacy_trade_code,
    (st.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    st.full_name,
    st.author_year,
    a.full_name AS accepted_full_name,
    a.author_year AS accepted_author_year,
    a.id AS accepted_id,
    (a.data OPERATOR(public.->) 'rank_name'::text) AS accepted_rank_name,
    a.name_status AS accepted_name_status,
    (a.data OPERATOR(public.->) 'kingdom_name'::text) AS accepted_kingdom_name,
    (a.data OPERATOR(public.->) 'phylum_name'::text) AS accepted_phylum_name,
    (a.data OPERATOR(public.->) 'class_name'::text) AS accepted_class_name,
    (a.data OPERATOR(public.->) 'order_name'::text) AS accepted_order_name,
    (a.data OPERATOR(public.->) 'family_name'::text) AS accepted_family_name,
    (a.data OPERATOR(public.->) 'genus_name'::text) AS accepted_genus_name,
    (a.data OPERATOR(public.->) 'species_name'::text) AS accepted_species_name,
    taxonomies.id AS taxonomy_id,
    taxonomies.name AS taxonomy_name,
    array_to_string(ARRAY[general_note.note, nomenclature_note.note, distribution_note.note], '
'::text) AS internal_notes,
    to_char(st.created_at, 'DD/MM/YYYY HH24:MI'::text) AS created_at,
    uc.name AS created_by,
    to_char(st.updated_at, 'DD/MM/YYYY HH24:MI'::text) AS updated_at,
    uu.name AS updated_by,
    to_char(st.dependents_updated_at, 'DD/MM/YYYY HH24:MI'::text) AS dependents_updated_at,
    uud.name AS dependents_updated_by
   FROM ((((((((((public.taxon_concepts st
     JOIN public.taxonomies ON ((taxonomies.id = st.taxonomy_id)))
     LEFT JOIN public.taxon_relationships ON ((taxon_relationships.other_taxon_concept_id = st.id)))
     LEFT JOIN public.taxon_relationship_types trt ON ((trt.id = taxon_relationships.taxon_relationship_type_id)))
     LEFT JOIN public.taxon_concepts a ON ((taxon_relationships.taxon_concept_id = a.id)))
     LEFT JOIN public.comments general_note ON (((general_note.commentable_id = st.id) AND ((general_note.commentable_type)::text = 'TaxonConcept'::text) AND ((general_note.comment_type)::text = 'General'::text))))
     LEFT JOIN public.comments nomenclature_note ON (((nomenclature_note.commentable_id = st.id) AND ((nomenclature_note.commentable_type)::text = 'TaxonConcept'::text) AND ((nomenclature_note.comment_type)::text = 'Nomenclature'::text))))
     LEFT JOIN public.comments distribution_note ON (((distribution_note.commentable_id = st.id) AND ((distribution_note.commentable_type)::text = 'TaxonConcept'::text) AND ((distribution_note.comment_type)::text = 'Distribution'::text))))
     LEFT JOIN public.users uc ON ((st.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((st.updated_by_id = uu.id)))
     LEFT JOIN public.users uud ON ((st.dependents_updated_by_id = uud.id)))
  WHERE (((st.name_status)::text = ANY (ARRAY[('S'::character varying)::text, ('T'::character varying)::text])) AND ((trt.name)::text = ANY (ARRAY[('HAS_SYNONYM'::character varying)::text, ('HAS_TRADE_NAME'::character varying)::text])));


--
-- Name: taggings_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taggings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taggings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taggings_id_seq OWNED BY public.taggings.id;


--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.tags_id_seq OWNED BY public.tags.id;


--
-- Name: taxa_with_eu_listings_export_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.taxa_with_eu_listings_export_view AS
 WITH lc_eu AS (
         SELECT lc.id AS eu_id,
            lc.taxon_concept_id AS eu_taxon_concept_id,
            lc.species_listing_name AS eu_annex,
            lc.party_en AS eu_party_en,
            lc.party_es AS eu_party_es,
            lc.party_fr AS eu_party_fr,
            lc.annotation_en AS eu_annotation_en,
            lc.annotation_es AS eu_annotation_es,
            lc.annotation_fr AS eu_annotation_fr,
            lc.hash_annotation_en AS eu_hash_annotation_en,
            lc.hash_annotation_es AS eu_hash_annotation_es,
            lc.hash_annotation_fr AS eu_hash_annotation_fr,
            lc.effective_at AS eu_effective_at
           FROM public.api_eu_listing_changes_view lc
          WHERE (lc.is_current AND ((lc.change_type_name)::text = 'ADDITION'::text))
        ), lc_cites AS (
         SELECT lc.id AS cites_id,
            lc.taxon_concept_id AS cites_taxon_concept_id,
            lc.species_listing_name AS cites_annex,
            lc.party_en AS cites_party_en,
            lc.party_es AS cites_party_es,
            lc.party_fr AS cites_party_fr,
            lc.annotation_en AS cites_annotation_en,
            lc.annotation_es AS cites_annotation_es,
            lc.annotation_fr AS cites_annotation_fr,
            lc.hash_annotation_en AS cites_hash_annotation_en,
            lc.hash_annotation_es AS cites_hash_annotation_es,
            lc.hash_annotation_fr AS cites_hash_annotation_fr,
            lc.effective_at AS cites_effective_at
           FROM public.api_cites_listing_changes_view lc
          WHERE (lc.is_current AND ((lc.change_type_name)::text = 'ADDITION'::text))
        )
 SELECT tc.id,
    tc.parent_id,
    tc.full_name,
    tc.author_year,
    tc.name_status,
    tc.rank,
    tc.cites_listing,
    tc.kingdom_name,
    tc.phylum_name,
    tc.class_name,
    tc.order_name,
    tc.family_name,
    tc.genus_name,
    tc.kingdom_id,
    tc.phylum_id,
    tc.class_id,
    tc.order_id,
    tc.family_id,
    tc.genus_id,
    tc.created_at,
    tc.updated_at,
    tc.active,
    lc_eu.eu_id,
    lc_eu.eu_taxon_concept_id,
    lc_eu.eu_annex,
    lc_eu.eu_party_en,
    lc_eu.eu_party_es,
    lc_eu.eu_party_fr,
    lc_eu.eu_annotation_en,
    lc_eu.eu_annotation_es,
    lc_eu.eu_annotation_fr,
    lc_eu.eu_hash_annotation_en,
    lc_eu.eu_hash_annotation_es,
    lc_eu.eu_hash_annotation_fr,
    lc_eu.eu_effective_at
   FROM (public.api_taxon_concepts_view tc
     LEFT JOIN lc_eu ON ((lc_eu.eu_taxon_concept_id = tc.id)))
  WHERE (tc.active AND (tc.name_status = 'A'::text) AND tc.taxonomy_is_cites_eu AND ((tc.rank)::text = ANY (ARRAY[('SPECIES'::character varying)::text, ('SUBSPECIES'::character varying)::text, ('VARIETY'::character varying)::text])))
  ORDER BY tc.taxonomic_position;


--
-- Name: taxon_commons_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_commons_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_commons_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_commons_id_seq OWNED BY public.taxon_commons.id;


--
-- Name: taxon_concept_references_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_concept_references_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_concept_references_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_concept_references_id_seq OWNED BY public.taxon_concept_references.id;


--
-- Name: taxon_concept_versions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_concept_versions (
    id integer NOT NULL,
    item_type character varying(255) NOT NULL,
    item_id integer NOT NULL,
    event character varying(255) NOT NULL,
    whodunnit character varying(255),
    object_yml text,
    created_at timestamp without time zone,
    taxon_concept_id integer NOT NULL,
    taxonomy_name text NOT NULL,
    full_name text NOT NULL,
    author_year text,
    name_status text NOT NULL,
    rank_name text NOT NULL,
    object jsonb DEFAULT '{}'::jsonb
);


--
-- Name: taxon_concept_versions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_concept_versions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_concept_versions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_concept_versions_id_seq OWNED BY public.taxon_concept_versions.id;


--
-- Name: taxon_concepts_distributions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.taxon_concepts_distributions_view AS
SELECT
    NULL::integer AS id,
    NULL::integer AS legacy_id,
    NULL::text AS phylum_name,
    NULL::text AS class_name,
    NULL::text AS order_name,
    NULL::text AS family_name,
    NULL::character varying(255) AS full_name,
    NULL::text AS rank_name,
    NULL::character varying(255) AS geo_entity_type,
    NULL::character varying(255) AS geo_entity_name,
    NULL::character varying(255) AS geo_entity_iso_code2,
    NULL::text AS tags,
    NULL::text AS reference_full,
    NULL::integer AS reference_id,
    NULL::integer AS reference_legacy_id,
    NULL::character varying(255) AS taxonomy_name,
    NULL::character varying(255) AS taxonomic_position,
    NULL::integer AS taxonomy_id,
    NULL::text AS internal_notes,
    NULL::text AS created_at,
    NULL::character varying(255) AS created_by,
    NULL::text AS updated_at,
    NULL::character varying(255) AS updated_by;


--
-- Name: taxon_concepts_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_concepts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_concepts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_concepts_id_seq OWNED BY public.taxon_concepts.id;


--
-- Name: taxon_concepts_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_concepts_mview (
    id integer,
    parent_id integer,
    taxonomy_id integer,
    taxonomy_is_cites_eu boolean,
    full_name character varying(255),
    name_status character varying(255),
    rank_id integer,
    rank_name character varying(255),
    rank_display_name_en character varying(255),
    rank_display_name_es character varying(255),
    rank_display_name_fr character varying(255),
    spp boolean,
    cites_accepted boolean,
    kingdom_position integer,
    taxonomic_position character varying(255),
    kingdom_name character varying(255),
    phylum_name character varying(255),
    class_name character varying(255),
    order_name character varying(255),
    family_name character varying(255),
    subfamily_name character varying(255),
    genus_name character varying(255),
    species_name character varying(255),
    subspecies_name character varying(255),
    kingdom_id integer,
    phylum_id integer,
    class_id integer,
    order_id integer,
    family_id integer,
    subfamily_id integer,
    genus_id integer,
    species_id integer,
    subspecies_id integer,
    cites_i boolean,
    cites_ii boolean,
    cites_iii boolean,
    cites_listed boolean,
    cites_listed_descendants boolean,
    cites_show boolean,
    cites_status character varying(255),
    cites_listing_original character varying(255),
    cites_listing character varying(255),
    cites_listing_updated_at timestamp without time zone,
    ann_symbol character varying(255),
    hash_ann_symbol character varying(255),
    hash_ann_parent_symbol character varying(255),
    eu_listed boolean,
    eu_show boolean,
    eu_status character varying(255),
    eu_listing_original character varying(255),
    eu_listing character varying(255),
    eu_listing_updated_at timestamp without time zone,
    cms_listed boolean,
    cms_show boolean,
    cms_status character varying(255),
    cms_listing_original character varying(255),
    cms_listing character varying(255),
    cms_listing_updated_at timestamp without time zone,
    species_listings_ids integer[],
    species_listings_ids_aggregated integer[],
    author_year character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    dependents_updated_at timestamp without time zone,
    taxon_concept_id_com integer,
    english_names_ary character varying[],
    spanish_names_ary character varying[],
    french_names_ary character varying[],
    taxon_concept_id_syn integer,
    synonyms_ary character varying[],
    synonyms_author_years_ary character varying[],
    countries_ids_ary integer[],
    all_distribution_iso_codes_ary character varying[],
    all_distribution_ary_en character varying[],
    native_distribution_ary_en character varying[],
    introduced_distribution_ary_en character varying[],
    introduced_uncertain_distribution_ary_en character varying[],
    reintroduced_distribution_ary_en character varying[],
    extinct_distribution_ary_en character varying[],
    extinct_uncertain_distribution_ary_en character varying[],
    uncertain_distribution_ary_en character varying[],
    all_distribution_ary_es character varying[],
    native_distribution_ary_es character varying[],
    introduced_distribution_ary_es character varying[],
    introduced_uncertain_distribution_ary_es character varying[],
    reintroduced_distribution_ary_es character varying[],
    extinct_distribution_ary_es character varying[],
    extinct_uncertain_distribution_ary_es character varying[],
    uncertain_distribution_ary_es character varying[],
    all_distribution_ary_fr character varying[],
    native_distribution_ary_fr character varying[],
    introduced_distribution_ary_fr character varying[],
    introduced_uncertain_distribution_ary_fr character varying[],
    reintroduced_distribution_ary_fr character varying[],
    extinct_distribution_ary_fr character varying[],
    extinct_uncertain_distribution_ary_fr character varying[],
    uncertain_distribution_ary_fr character varying[],
    show_in_species_plus boolean,
    dirty boolean,
    expiry timestamp with time zone
);


--
-- Name: taxon_concepts_names_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.taxon_concepts_names_view AS
 SELECT taxon_concepts.id,
    taxon_concepts.legacy_id,
    (taxon_concepts.data OPERATOR(public.->) 'kingdom_name'::text) AS kingdom_name,
    (taxon_concepts.data OPERATOR(public.->) 'phylum_name'::text) AS phylum_name,
    (taxon_concepts.data OPERATOR(public.->) 'class_name'::text) AS class_name,
    (taxon_concepts.data OPERATOR(public.->) 'order_name'::text) AS order_name,
    (taxon_concepts.data OPERATOR(public.->) 'family_name'::text) AS family_name,
    (taxon_concepts.data OPERATOR(public.->) 'genus_name'::text) AS genus_name,
    (taxon_concepts.data OPERATOR(public.->) 'species_name'::text) AS species_name,
    taxon_concepts.full_name,
    taxon_concepts.author_year,
    (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    taxon_concepts.name_status,
    taxon_concepts.taxonomic_position,
    taxon_concepts.taxonomy_id,
    taxonomies.name AS taxonomy_name,
    array_to_string(ARRAY[general_note.note, nomenclature_note.note, distribution_note.note], '
'::text) AS internal_notes,
    to_char(taxon_concepts.created_at, 'DD/MM/YYYY HH24:MI'::text) AS created_at,
    uc.name AS created_by,
    to_char(taxon_concepts.updated_at, 'DD/MM/YYYY HH24:MI'::text) AS updated_at,
    uu.name AS updated_by,
    to_char(taxon_concepts.dependents_updated_at, 'DD/MM/YYYY HH24:MI'::text) AS dependents_updated_at,
    uud.name AS dependents_updated_by
   FROM (((((((public.taxon_concepts
     JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
     LEFT JOIN public.comments general_note ON (((general_note.commentable_id = taxon_concepts.id) AND ((general_note.commentable_type)::text = 'TaxonConcept'::text) AND ((general_note.comment_type)::text = 'General'::text))))
     LEFT JOIN public.comments nomenclature_note ON (((nomenclature_note.commentable_id = taxon_concepts.id) AND ((nomenclature_note.commentable_type)::text = 'TaxonConcept'::text) AND ((nomenclature_note.comment_type)::text = 'Nomenclature'::text))))
     LEFT JOIN public.comments distribution_note ON (((distribution_note.commentable_id = taxon_concepts.id) AND ((distribution_note.commentable_type)::text = 'TaxonConcept'::text) AND ((distribution_note.comment_type)::text = 'Distribution'::text))))
     LEFT JOIN public.users uc ON ((taxon_concepts.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((taxon_concepts.updated_by_id = uu.id)))
     LEFT JOIN public.users uud ON ((taxon_concepts.dependents_updated_by_id = uud.id)));


--
-- Name: taxon_concepts_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.taxon_concepts_view AS
 SELECT taxon_concepts.id,
    taxon_concepts.parent_id,
    taxon_concepts.taxonomy_id,
        CASE
            WHEN ((taxonomies.name)::text = 'CITES_EU'::text) THEN true
            ELSE false
        END AS taxonomy_is_cites_eu,
    taxon_concepts.full_name,
    taxon_concepts.name_status,
    taxon_concepts.rank_id,
    ranks.name AS rank_name,
    (ranks.display_name_en)::character varying(255) AS rank_display_name_en,
    (ranks.display_name_es)::character varying(255) AS rank_display_name_es,
    (ranks.display_name_fr)::character varying(255) AS rank_display_name_fr,
    ((taxon_concepts.data OPERATOR(public.->) 'spp'::text))::boolean AS spp,
    ((taxon_concepts.data OPERATOR(public.->) 'cites_accepted'::text))::boolean AS cites_accepted,
        CASE
            WHEN ((taxon_concepts.data OPERATOR(public.->) 'kingdom_name'::text) = 'Animalia'::text) THEN 0
            ELSE 1
        END AS kingdom_position,
    taxon_concepts.taxonomic_position,
    ((taxon_concepts.data OPERATOR(public.->) 'kingdom_name'::text))::character varying(255) AS kingdom_name,
    ((taxon_concepts.data OPERATOR(public.->) 'phylum_name'::text))::character varying(255) AS phylum_name,
    ((taxon_concepts.data OPERATOR(public.->) 'class_name'::text))::character varying(255) AS class_name,
    ((taxon_concepts.data OPERATOR(public.->) 'order_name'::text))::character varying(255) AS order_name,
    ((taxon_concepts.data OPERATOR(public.->) 'family_name'::text))::character varying(255) AS family_name,
    ((taxon_concepts.data OPERATOR(public.->) 'subfamily_name'::text))::character varying(255) AS subfamily_name,
    ((taxon_concepts.data OPERATOR(public.->) 'genus_name'::text))::character varying(255) AS genus_name,
    (lower((taxon_concepts.data OPERATOR(public.->) 'species_name'::text)))::character varying(255) AS species_name,
    (lower((taxon_concepts.data OPERATOR(public.->) 'subspecies_name'::text)))::character varying(255) AS subspecies_name,
    ((taxon_concepts.data OPERATOR(public.->) 'kingdom_id'::text))::integer AS kingdom_id,
    ((taxon_concepts.data OPERATOR(public.->) 'phylum_id'::text))::integer AS phylum_id,
    ((taxon_concepts.data OPERATOR(public.->) 'class_id'::text))::integer AS class_id,
    ((taxon_concepts.data OPERATOR(public.->) 'order_id'::text))::integer AS order_id,
    ((taxon_concepts.data OPERATOR(public.->) 'family_id'::text))::integer AS family_id,
    ((taxon_concepts.data OPERATOR(public.->) 'subfamily_id'::text))::integer AS subfamily_id,
    ((taxon_concepts.data OPERATOR(public.->) 'genus_id'::text))::integer AS genus_id,
    ((taxon_concepts.data OPERATOR(public.->) 'species_id'::text))::integer AS species_id,
    ((taxon_concepts.data OPERATOR(public.->) 'subspecies_id'::text))::integer AS subspecies_id,
        CASE
            WHEN ((taxon_concepts.listing OPERATOR(public.->) 'cites_I'::text) = 'I'::text) THEN true
            ELSE false
        END AS cites_i,
        CASE
            WHEN ((taxon_concepts.listing OPERATOR(public.->) 'cites_II'::text) = 'II'::text) THEN true
            ELSE false
        END AS cites_ii,
        CASE
            WHEN ((taxon_concepts.listing OPERATOR(public.->) 'cites_III'::text) = 'III'::text) THEN true
            ELSE false
        END AS cites_iii,
        CASE
            WHEN (((taxon_concepts.listing OPERATOR(public.->) 'cites_status'::text) = 'LISTED'::text) AND ((taxon_concepts.listing OPERATOR(public.->) 'cites_level_of_listing'::text) = 't'::text)) THEN true
            WHEN ((taxon_concepts.listing OPERATOR(public.->) 'cites_status'::text) = 'LISTED'::text) THEN false
            ELSE NULL::boolean
        END AS cites_listed,
    ((taxon_concepts.listing OPERATOR(public.->) 'cites_listed_descendants'::text))::boolean AS cites_listed_descendants,
    ((taxon_concepts.listing OPERATOR(public.->) 'cites_show'::text))::boolean AS cites_show,
    ((taxon_concepts.listing OPERATOR(public.->) 'cites_status'::text))::character varying(255) AS cites_status,
    ((taxon_concepts.listing OPERATOR(public.->) 'cites_listing_original'::text))::character varying(255) AS cites_listing_original,
    ((taxon_concepts.listing OPERATOR(public.->) 'cites_listing'::text))::character varying(255) AS cites_listing,
    ((taxon_concepts.listing OPERATOR(public.->) 'cites_listing_updated_at'::text))::timestamp without time zone AS cites_listing_updated_at,
    ((taxon_concepts.listing OPERATOR(public.->) 'ann_symbol'::text))::character varying(255) AS ann_symbol,
    ((taxon_concepts.listing OPERATOR(public.->) 'hash_ann_symbol'::text))::character varying(255) AS hash_ann_symbol,
    ((taxon_concepts.listing OPERATOR(public.->) 'hash_ann_parent_symbol'::text))::character varying(255) AS hash_ann_parent_symbol,
        CASE
            WHEN (((taxon_concepts.listing OPERATOR(public.->) 'eu_status'::text) = 'LISTED'::text) AND ((taxon_concepts.listing OPERATOR(public.->) 'eu_level_of_listing'::text) = 't'::text)) THEN true
            WHEN ((taxon_concepts.listing OPERATOR(public.->) 'eu_status'::text) = 'LISTED'::text) THEN false
            ELSE NULL::boolean
        END AS eu_listed,
    ((taxon_concepts.listing OPERATOR(public.->) 'eu_show'::text))::boolean AS eu_show,
    ((taxon_concepts.listing OPERATOR(public.->) 'eu_status'::text))::character varying(255) AS eu_status,
    ((taxon_concepts.listing OPERATOR(public.->) 'eu_listing_original'::text))::character varying(255) AS eu_listing_original,
    ((taxon_concepts.listing OPERATOR(public.->) 'eu_listing'::text))::character varying(255) AS eu_listing,
    ((taxon_concepts.listing OPERATOR(public.->) 'eu_listing_updated_at'::text))::timestamp without time zone AS eu_listing_updated_at,
        CASE
            WHEN (((taxon_concepts.listing OPERATOR(public.->) 'cms_status'::text) = 'LISTED'::text) AND ((taxon_concepts.listing OPERATOR(public.->) 'cms_level_of_listing'::text) = 't'::text)) THEN true
            WHEN ((taxon_concepts.listing OPERATOR(public.->) 'cms_status'::text) = 'LISTED'::text) THEN false
            ELSE NULL::boolean
        END AS cms_listed,
    ((taxon_concepts.listing OPERATOR(public.->) 'cms_show'::text))::boolean AS cms_show,
    ((taxon_concepts.listing OPERATOR(public.->) 'cms_status'::text))::character varying(255) AS cms_status,
    ((taxon_concepts.listing OPERATOR(public.->) 'cms_listing_original'::text))::character varying(255) AS cms_listing_original,
    ((taxon_concepts.listing OPERATOR(public.->) 'cms_listing'::text))::character varying(255) AS cms_listing,
    ((taxon_concepts.listing OPERATOR(public.->) 'cms_listing_updated_at'::text))::timestamp without time zone AS cms_listing_updated_at,
    ((taxon_concepts.listing OPERATOR(public.->) 'species_listings_ids'::text))::integer[] AS species_listings_ids,
    ((taxon_concepts.listing OPERATOR(public.->) 'species_listings_ids_aggregated'::text))::integer[] AS species_listings_ids_aggregated,
    taxon_concepts.author_year,
    taxon_concepts.created_at,
    taxon_concepts.updated_at,
    taxon_concepts.dependents_updated_at,
    common_names.taxon_concept_id_com,
    common_names.english_names_ary,
    common_names.spanish_names_ary,
    common_names.french_names_ary,
    synonyms.taxon_concept_id_syn,
    synonyms.synonyms_ary,
    synonyms.synonyms_author_years_ary,
    countries_ids.countries_ids_ary,
    countries_ids.all_distribution_iso_codes_ary,
    countries_ids.all_distribution_ary_en,
    distributions_by_tag.native_distribution_ary_en,
    distributions_by_tag.introduced_distribution_ary_en,
    distributions_by_tag.introduced_uncertain_distribution_ary_en,
    distributions_by_tag.reintroduced_distribution_ary_en,
    distributions_by_tag.extinct_distribution_ary_en,
    distributions_by_tag.extinct_uncertain_distribution_ary_en,
    distributions_by_tag.uncertain_distribution_ary_en,
    countries_ids.all_distribution_ary_es,
    distributions_by_tag.native_distribution_ary_es,
    distributions_by_tag.introduced_distribution_ary_es,
    distributions_by_tag.introduced_uncertain_distribution_ary_es,
    distributions_by_tag.reintroduced_distribution_ary_es,
    distributions_by_tag.extinct_distribution_ary_es,
    distributions_by_tag.extinct_uncertain_distribution_ary_es,
    distributions_by_tag.uncertain_distribution_ary_es,
    countries_ids.all_distribution_ary_fr,
    distributions_by_tag.native_distribution_ary_fr,
    distributions_by_tag.introduced_distribution_ary_fr,
    distributions_by_tag.introduced_uncertain_distribution_ary_fr,
    distributions_by_tag.reintroduced_distribution_ary_fr,
    distributions_by_tag.extinct_distribution_ary_fr,
    distributions_by_tag.extinct_uncertain_distribution_ary_fr,
    distributions_by_tag.uncertain_distribution_ary_fr,
        CASE
            WHEN (((taxon_concepts.name_status)::text = 'A'::text) AND (((ranks.name)::text = 'SPECIES'::text) OR (((ranks.name)::text = 'SUBSPECIES'::text) AND ((((taxonomies.name)::text = 'CITES_EU'::text) AND (((taxon_concepts.listing OPERATOR(public.->) 'cites_historically_listed'::text))::boolean OR ((taxon_concepts.listing OPERATOR(public.->) 'eu_historically_listed'::text))::boolean)) OR (((taxonomies.name)::text = 'CMS'::text) AND ((taxon_concepts.listing OPERATOR(public.->) 'cms_historically_listed'::text))::boolean))))) THEN true
            ELSE false
        END AS show_in_species_plus
   FROM ((((((public.taxon_concepts
     JOIN public.ranks ON ((ranks.id = taxon_concepts.rank_id)))
     JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
     LEFT JOIN ( SELECT ct.taxon_concept_id_com,
            ct.english_names_ary,
            ct.spanish_names_ary,
            ct.french_names_ary
           FROM public.crosstab('SELECT taxon_commons.taxon_concept_id AS taxon_concept_id_com, languages.iso_code1 AS lng,
  ARRAY_AGG_NOTNULL(common_names.name ORDER BY common_names.name) AS common_names_ary
  FROM "taxon_commons"
  INNER JOIN "common_names"
  ON "common_names"."id" = "taxon_commons"."common_name_id"
  INNER JOIN "languages"
  ON "languages"."id" = "common_names"."language_id" AND UPPER(languages.iso_code1) IN (''EN'', ''FR'', ''ES'')
  GROUP BY taxon_commons.taxon_concept_id, languages.iso_code1
  ORDER BY 1,2'::text, 'SELECT DISTINCT languages.iso_code1 FROM languages WHERE UPPER(languages.iso_code1) IN (''EN'', ''FR'', ''ES'') order by 1'::text) ct(taxon_concept_id_com integer, english_names_ary character varying[], spanish_names_ary character varying[], french_names_ary character varying[])) common_names ON ((taxon_concepts.id = common_names.taxon_concept_id_com)))
     LEFT JOIN ( SELECT taxon_relationships.taxon_concept_id AS taxon_concept_id_syn,
            public.array_agg_notnull(synonym_tc.full_name) AS synonyms_ary,
            public.array_agg_notnull(synonym_tc.author_year) AS synonyms_author_years_ary
           FROM ((public.taxon_relationships
             JOIN public.taxon_relationship_types ON (((taxon_relationship_types.id = taxon_relationships.taxon_relationship_type_id) AND ((taxon_relationship_types.name)::text = 'HAS_SYNONYM'::text))))
             JOIN public.taxon_concepts synonym_tc ON ((synonym_tc.id = taxon_relationships.other_taxon_concept_id)))
          GROUP BY taxon_relationships.taxon_concept_id) synonyms ON ((taxon_concepts.id = synonyms.taxon_concept_id_syn)))
     LEFT JOIN ( SELECT distributions.taxon_concept_id AS taxon_concept_id_cnt,
            public.array_agg_notnull(geo_entities.id ORDER BY geo_entities.name_en) AS countries_ids_ary,
            public.array_agg_notnull(geo_entities.iso_code2 ORDER BY geo_entities.name_en) AS all_distribution_iso_codes_ary,
            public.array_agg_notnull(geo_entities.name_en ORDER BY geo_entities.name_en) AS all_distribution_ary_en,
            public.array_agg_notnull(geo_entities.name_en ORDER BY geo_entities.name_es) AS all_distribution_ary_es,
            public.array_agg_notnull(geo_entities.name_en ORDER BY geo_entities.name_fr) AS all_distribution_ary_fr
           FROM ((public.distributions
             JOIN public.geo_entities ON ((distributions.geo_entity_id = geo_entities.id)))
             JOIN public.geo_entity_types ON (((geo_entity_types.id = geo_entities.geo_entity_type_id) AND (((geo_entity_types.name)::text = 'COUNTRY'::text) OR ((geo_entity_types.name)::text = 'TERRITORY'::text)))))
          GROUP BY distributions.taxon_concept_id) countries_ids ON ((taxon_concepts.id = countries_ids.taxon_concept_id_cnt)))
     LEFT JOIN ( SELECT ct.taxon_concept_id,
            ct.native_distribution_ary_en,
            ct.introduced_distribution_ary_en,
            ct.introduced_uncertain_distribution_ary_en,
            ct.reintroduced_distribution_ary_en,
            ct.extinct_distribution_ary_en,
            ct.extinct_uncertain_distribution_ary_en,
            ct.uncertain_distribution_ary_en,
            ct.native_distribution_ary_es,
            ct.introduced_distribution_ary_es,
            ct.introduced_uncertain_distribution_ary_es,
            ct.reintroduced_distribution_ary_es,
            ct.extinct_distribution_ary_es,
            ct.extinct_uncertain_distribution_ary_es,
            ct.uncertain_distribution_ary_es,
            ct.native_distribution_ary_fr,
            ct.introduced_distribution_ary_fr,
            ct.introduced_uncertain_distribution_ary_fr,
            ct.reintroduced_distribution_ary_fr,
            ct.extinct_distribution_ary_fr,
            ct.extinct_uncertain_distribution_ary_fr,
            ct.uncertain_distribution_ary_fr
           FROM public.crosstab('SELECT distributions.taxon_concept_id,
      CASE WHEN tags.name IS NULL THEN ''NATIVE'' ELSE UPPER(tags.name) END || ''_'' || lng AS tag,
      ARRAY_AGG_NOTNULL(geo_entities.name ORDER BY geo_entities.name) AS locations_ary
    FROM distributions
    JOIN (
      SELECT geo_entities.id, geo_entities.iso_code2, ''EN'' AS lng, geo_entities.name_en AS name FROM geo_entities
      UNION
      SELECT geo_entities.id, geo_entities.iso_code2, ''ES'' AS lng, geo_entities.name_es AS name FROM geo_entities
      UNION
      SELECT geo_entities.id, geo_entities.iso_code2, ''FR'' AS lng, geo_entities.name_fr AS name FROM geo_entities
    ) geo_entities
      ON geo_entities.id = distributions.geo_entity_id
    LEFT JOIN taggings
      ON taggable_id = distributions.id AND taggable_type = ''Distribution''
    LEFT JOIN tags
      ON tags.id = taggings.tag_id
      AND (
        UPPER(tags.name) IN (
          ''INTRODUCED'', ''INTRODUCED (?)'', ''REINTRODUCED'',
          ''EXTINCT'', ''EXTINCT (?)'', ''DISTRIBUTION UNCERTAIN''
        ) OR tags.name IS NULL
      )
    GROUP BY distributions.taxon_concept_id, tags.name, geo_entities.lng
    '::text, 'SELECT * FROM UNNEST(
      ARRAY[
        ''NATIVE_EN'', ''INTRODUCED_EN'', ''INTRODUCED (?)_EN'', ''REINTRODUCED_EN'',
        ''EXTINCT_EN'', ''EXTINCT (?)_EN'', ''DISTRIBUTION UNCERTAIN_EN'',
        ''NATIVE_ES'', ''INTRODUCED_ES'', ''INTRODUCED (?)_ES'', ''REINTRODUCED_ES'',
        ''EXTINCT_ES'', ''EXTINCT (?)_ES'', ''DISTRIBUTION UNCERTAIN_ES'',
        ''NATIVE_FR'', ''INTRODUCED_FR'', ''INTRODUCED (?)_FR'', ''REINTRODUCED_FR'',
        ''EXTINCT_FR'', ''EXTINCT (?)_FR'', ''DISTRIBUTION UNCERTAIN_FR''
      ])'::text) ct(taxon_concept_id integer, native_distribution_ary_en character varying[], introduced_distribution_ary_en character varying[], introduced_uncertain_distribution_ary_en character varying[], reintroduced_distribution_ary_en character varying[], extinct_distribution_ary_en character varying[], extinct_uncertain_distribution_ary_en character varying[], uncertain_distribution_ary_en character varying[], native_distribution_ary_es character varying[], introduced_distribution_ary_es character varying[], introduced_uncertain_distribution_ary_es character varying[], reintroduced_distribution_ary_es character varying[], extinct_distribution_ary_es character varying[], extinct_uncertain_distribution_ary_es character varying[], uncertain_distribution_ary_es character varying[], native_distribution_ary_fr character varying[], introduced_distribution_ary_fr character varying[], introduced_uncertain_distribution_ary_fr character varying[], reintroduced_distribution_ary_fr character varying[], extinct_distribution_ary_fr character varying[], extinct_uncertain_distribution_ary_fr character varying[], uncertain_distribution_ary_fr character varying[])) distributions_by_tag ON ((taxon_concepts.id = distributions_by_tag.taxon_concept_id)));


--
-- Name: taxon_instruments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_instruments (
    id integer NOT NULL,
    taxon_concept_id integer,
    instrument_id integer,
    effective_from timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: taxon_instruments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_instruments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_instruments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_instruments_id_seq OWNED BY public.taxon_instruments.id;


--
-- Name: taxon_names; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.taxon_names (
    id integer NOT NULL,
    scientific_name character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: taxon_names_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_names_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_names_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_names_id_seq OWNED BY public.taxon_names.id;


--
-- Name: taxon_relationship_types_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_relationship_types_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_relationship_types_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_relationship_types_id_seq OWNED BY public.taxon_relationship_types.id;


--
-- Name: taxon_relationships_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxon_relationships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxon_relationships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxon_relationships_id_seq OWNED BY public.taxon_relationships.id;


--
-- Name: trade_conversion_rules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_conversion_rules (
    id bigint NOT NULL,
    rule_type character varying,
    rule_name character varying,
    rule_priority integer,
    rule_input jsonb,
    rule_output jsonb,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


--
-- Name: trade_taxon_groups; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_taxon_groups (
    id bigint NOT NULL,
    code character varying,
    name_en character varying,
    name_es character varying,
    name_fr character varying,
    created_at timestamp(6) without time zone NOT NULL,
    updated_at timestamp(6) without time zone NOT NULL
);


--
-- Name: taxon_trade_taxon_groups_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.taxon_trade_taxon_groups_view AS
 WITH rule AS (
         SELECT rule_1.id AS trade_conversion_rule_id,
            rule_1.rule_name,
            rule_1.rule_priority,
            taxon_group.id AS trade_taxon_group_id,
            taxon_group.code AS trade_taxon_group_code,
            taxon_group.name_en AS trade_taxon_group_name_en,
            taxon_group.name_es AS trade_taxon_group_name_es,
            taxon_group.name_fr AS trade_taxon_group_name_fr,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'kingdom_names'::text)) AS jsonb_array_elements_text) AS kingdom_names,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'phylum_names'::text)) AS jsonb_array_elements_text) AS phylum_names,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'class_names'::text)) AS jsonb_array_elements_text) AS class_names,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'order_names'::text)) AS jsonb_array_elements_text) AS order_names,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'family_names'::text)) AS jsonb_array_elements_text) AS family_names,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'genus_names'::text)) AS jsonb_array_elements_text) AS genus_names,
            ARRAY( SELECT jsonb_array_elements_text((rule_1.rule_input -> 'taxon_names'::text)) AS jsonb_array_elements_text) AS taxon_names,
            (rule_1.rule_output -> 'group'::text) AS output_group_code
           FROM (public.trade_conversion_rules rule_1
             JOIN public.trade_taxon_groups taxon_group ON ((((rule_1.rule_type)::text = 'taxon_group'::text) AND ((rule_1.rule_output ->> 'group'::text) = (taxon_group.code)::text))))
        )
 SELECT DISTINCT ON (taxon.id) taxon.id AS taxon_concept_id,
    rule.trade_conversion_rule_id,
    rule.trade_taxon_group_id,
    rule.trade_taxon_group_code,
    rule.trade_taxon_group_name_en,
    rule.trade_taxon_group_name_es,
    rule.trade_taxon_group_name_fr
   FROM (public.taxon_concepts taxon
     JOIN rule ON ((((taxon.data OPERATOR(public.->) 'kingdom_name'::text) = ANY (rule.kingdom_names)) OR ((taxon.data OPERATOR(public.->) 'phylum_name'::text) = ANY (rule.phylum_names)) OR ((taxon.data OPERATOR(public.->) 'class_name'::text) = ANY (rule.class_names)) OR ((taxon.data OPERATOR(public.->) 'order_name'::text) = ANY (rule.order_names)) OR ((taxon.data OPERATOR(public.->) 'family_name'::text) = ANY (rule.family_names)) OR ((taxon.data OPERATOR(public.->) 'genus_name'::text) = ANY (rule.genus_names)) OR ((taxon.full_name)::text = ANY (rule.taxon_names)))))
  ORDER BY taxon.id, rule.rule_priority;


--
-- Name: taxonomies_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.taxonomies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: taxonomies_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.taxonomies_id_seq OWNED BY public.taxonomies.id;


--
-- Name: term_trade_codes_pairs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.term_trade_codes_pairs (
    id integer NOT NULL,
    term_id integer NOT NULL,
    trade_code_id integer,
    trade_code_type character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: term_trade_codes_pairs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.term_trade_codes_pairs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: term_trade_codes_pairs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.term_trade_codes_pairs_id_seq OWNED BY public.term_trade_codes_pairs.id;


--
-- Name: trade_annual_report_uploads; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_annual_report_uploads (
    id integer NOT NULL,
    created_by integer,
    updated_by integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    number_of_rows integer,
    csv_source_file text,
    trading_country_id integer NOT NULL,
    point_of_view character varying(255) DEFAULT 'E'::character varying NOT NULL,
    created_by_id integer,
    updated_by_id integer,
    is_from_web_service boolean DEFAULT false,
    number_of_records_submitted integer,
    auto_reminder_sent_at timestamp without time zone,
    sandbox_transferred_at timestamp without time zone,
    sandbox_transferred_by_id integer,
    submitted_at timestamp without time zone,
    submitted_by_id integer,
    deleted_at timestamp without time zone,
    deleted_by_id integer,
    epix_created_by_id integer,
    epix_created_at timestamp without time zone,
    epix_updated_by_id integer,
    epix_updated_at timestamp without time zone,
    epix_submitted_by_id integer,
    epix_submitted_at timestamp without time zone,
    validated_at timestamp without time zone,
    validation_report jsonb,
    force_submit boolean DEFAULT false,
    aws_storage_path character varying(255)
);


--
-- Name: trade_annual_report_uploads_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_annual_report_uploads_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_annual_report_uploads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_annual_report_uploads_id_seq OWNED BY public.trade_annual_report_uploads.id;


--
-- Name: trade_codes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_codes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_codes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_codes_id_seq OWNED BY public.trade_codes.id;


--
-- Name: trade_conversion_rules_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_conversion_rules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_conversion_rules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_conversion_rules_id_seq OWNED BY public.trade_conversion_rules.id;


--
-- Name: trade_permits; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_permits (
    id integer NOT NULL,
    number character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: trade_permits_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_permits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_permits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_permits_id_seq OWNED BY public.trade_permits.id;


--
-- Name: trade_plus_shipments_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_plus_shipments_view AS
 SELECT shipments.id,
    shipments.source_id,
    shipments.unit_id,
    shipments.purpose_id,
    shipments.term_id,
    shipments.quantity,
    shipments.appendix,
    shipments.trade_annual_report_upload_id,
    shipments.exporter_id,
    shipments.importer_id,
    shipments.country_of_origin_id,
    shipments.reported_by_exporter,
    shipments.taxon_concept_id,
    shipments.year,
    shipments.created_at,
    shipments.updated_at,
    shipments.sandbox_id,
    shipments.reported_taxon_concept_id,
    shipments.import_permit_number,
    shipments.export_permit_number,
    shipments.origin_permit_number,
    shipments.legacy_shipment_number,
    shipments.import_permits_ids,
    shipments.export_permits_ids,
    shipments.origin_permits_ids,
    shipments.updated_by_id,
    shipments.created_by_id,
    shipments.epix_created_at,
    shipments.epix_updated_at,
    shipments.epix_created_by_id,
    shipments.epix_updated_by_id,
    shipments.ifs_permits_ids,
    shipments.ifs_permit_number,
    taxon_concepts.full_name AS taxon_concept_full_name,
    taxon_concepts.author_year AS taxon_concept_author_year,
    taxon_concepts.name_status AS taxon_concept_name_status,
    taxon_concepts.rank_id AS taxon_concept_rank_id,
    ((taxon_concepts.data OPERATOR(public.->) 'kingdom_id'::text))::integer AS taxon_concept_kingdom_id,
    ((taxon_concepts.data OPERATOR(public.->) 'phylum_id'::text))::integer AS taxon_concept_phylum_id,
    ((taxon_concepts.data OPERATOR(public.->) 'class_id'::text))::integer AS taxon_concept_class_id,
    ((taxon_concepts.data OPERATOR(public.->) 'order_id'::text))::integer AS taxon_concept_order_id,
    ((taxon_concepts.data OPERATOR(public.->) 'family_id'::text))::integer AS taxon_concept_family_id,
    ((taxon_concepts.data OPERATOR(public.->) 'subfamily_id'::text))::integer AS taxon_concept_subfamily_id,
    ((taxon_concepts.data OPERATOR(public.->) 'genus_id'::text))::integer AS taxon_concept_genus_id,
    ((taxon_concepts.data OPERATOR(public.->) 'species_id'::text))::integer AS taxon_concept_species_id,
    (taxon_concepts.data OPERATOR(public.->) 'kingdom_name'::text) AS taxon_concept_kingdom_name,
    (taxon_concepts.data OPERATOR(public.->) 'phylum_name'::text) AS taxon_concept_phylum_name,
    (taxon_concepts.data OPERATOR(public.->) 'class_name'::text) AS taxon_concept_class_name,
    (taxon_concepts.data OPERATOR(public.->) 'order_name'::text) AS taxon_concept_order_name,
    (taxon_concepts.data OPERATOR(public.->) 'family_name'::text) AS taxon_concept_family_name,
    (taxon_concepts.data OPERATOR(public.->) 'genus_name'::text) AS taxon_concept_genus_name
   FROM (( SELECT ts.id,
            ts.source_id,
            ts.unit_id,
            ts.purpose_id,
            ts.term_id,
            ts.quantity,
            ts.appendix,
            ts.trade_annual_report_upload_id,
            ts.exporter_id,
            ts.importer_id,
            ts.country_of_origin_id,
            ts.reported_by_exporter,
            ts.taxon_concept_id,
            ts.year,
            ts.created_at,
            ts.updated_at,
            ts.sandbox_id,
            ts.reported_taxon_concept_id,
            ts.import_permit_number,
            ts.export_permit_number,
            ts.origin_permit_number,
            ts.legacy_shipment_number,
            ts.import_permits_ids,
            ts.export_permits_ids,
            ts.origin_permits_ids,
            ts.updated_by_id,
            ts.created_by_id,
            ts.epix_created_at,
            ts.epix_updated_at,
            ts.epix_created_by_id,
            ts.epix_updated_by_id,
            ts.ifs_permits_ids,
            ts.ifs_permit_number
           FROM public.trade_shipments ts
          WHERE ((ts.appendix)::text <> 'N'::text)) shipments
     JOIN public.taxon_concepts ON ((shipments.taxon_concept_id = taxon_concepts.id)));


--
-- Name: trade_plus_group_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_plus_group_view AS
 SELECT ts.id,
    ts.source_id,
    ts.unit_id,
    ts.purpose_id,
    ts.term_id,
    ts.quantity,
    ts.appendix,
    ts.trade_annual_report_upload_id,
    ts.exporter_id,
    ts.importer_id,
    ts.country_of_origin_id,
    ts.reported_by_exporter,
    ts.taxon_concept_id,
    ts.year,
    ts.created_at,
    ts.updated_at,
    ts.sandbox_id,
    ts.reported_taxon_concept_id,
    ts.import_permit_number,
    ts.export_permit_number,
    ts.origin_permit_number,
    ts.legacy_shipment_number,
    ts.import_permits_ids,
    ts.export_permits_ids,
    ts.origin_permits_ids,
    ts.updated_by_id,
    ts.created_by_id,
    ts.epix_created_at,
    ts.epix_updated_at,
    ts.epix_created_by_id,
    ts.epix_updated_by_id,
    ts.ifs_permits_ids,
    ts.ifs_permit_number,
    ts.taxon_concept_full_name,
    ts.taxon_concept_author_year,
    ts.taxon_concept_name_status,
    ts.taxon_concept_rank_id,
    ts.taxon_concept_kingdom_id,
    ts.taxon_concept_phylum_id,
    ts.taxon_concept_class_id,
    ts.taxon_concept_order_id,
    ts.taxon_concept_family_id,
    ts.taxon_concept_subfamily_id,
    ts.taxon_concept_genus_id,
    ts.taxon_concept_species_id,
    ts.taxon_concept_kingdom_name,
    ts.taxon_concept_phylum_name,
    ts.taxon_concept_class_name,
    ts.taxon_concept_order_name,
    ts.taxon_concept_family_name,
    ts.taxon_concept_genus_name,
    tg.trade_taxon_group_code AS group_code,
    tg.trade_taxon_group_name_en AS group_en,
    tg.trade_taxon_group_name_es AS group_es,
    tg.trade_taxon_group_name_fr AS group_fr
   FROM (public.trade_plus_shipments_view ts
     LEFT JOIN public.taxon_trade_taxon_groups_view tg ON ((ts.taxon_concept_id = tg.taxon_concept_id)));


--
-- Name: trade_plus_formatted_data_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_plus_formatted_data_view AS
 WITH unnested_rules AS (
         SELECT r.id AS rule_id,
            r.rule_priority,
            r.rule_name,
            r.rule_type,
            r_terms.term_code,
            r_units.unit_code,
            ((r.rule_input ->> 'taxon_filters'::text) IS NOT NULL) AS has_taxon_filters,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'kingdom_names'::text)) a(s)) AS kingdom_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'phylum_names'::text)) a(s)) AS phylum_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'class_names'::text)) a(s)) AS class_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'order_names'::text)) a(s)) AS order_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'family_names'::text)) a(s)) AS family_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'genus_names'::text)) a(s)) AS genus_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'taxon_names'::text)) a(s)) AS taxon_names,
            ( SELECT array_agg(a.s) AS array_agg
                   FROM jsonb_array_elements_text(((r.rule_input -> 'taxon_filters'::text) -> 'group_codes'::text)) a(s)) AS group_codes,
            (r.rule_output ->> 'term'::text) AS output_term_code,
            (r.rule_output ->> 'unit'::text) AS output_unit_code,
            (r.rule_output ->> 'quantity_modifier'::text) AS quantity_modifier,
            ((r.rule_output ->> 'modifier_value'::text))::numeric AS modifier_value
           FROM ((public.trade_conversion_rules r
             LEFT JOIN ( SELECT r_1.id,
                    jsonb_array_elements_text((r_1.rule_input -> 'terms'::text)) AS term_code
                   FROM public.trade_conversion_rules r_1) r_terms ON ((r_terms.id = r.id)))
             LEFT JOIN ( SELECT r_1.id,
                    jsonb_array_elements_text((r_1.rule_input -> 'units'::text)) AS unit_code
                   FROM public.trade_conversion_rules r_1) r_units ON ((r_units.id = r.id)))
          WHERE ((r.rule_type)::text = ANY ((ARRAY['standardise_terms'::character varying, 'standardise_units'::character varying, 'standardise_terms_and_units'::character varying])::text[]))
        ), unnested_rules_with_trade_codes AS (
         SELECT unnested_rules.rule_id,
            unnested_rules.rule_priority,
            unnested_rules.rule_name,
            unnested_rules.rule_type,
            unnested_rules.term_code,
            unnested_rules.unit_code,
            unnested_rules.has_taxon_filters,
            unnested_rules.kingdom_names,
            unnested_rules.phylum_names,
            unnested_rules.class_names,
            unnested_rules.order_names,
            unnested_rules.family_names,
            unnested_rules.genus_names,
            unnested_rules.taxon_names,
            unnested_rules.group_codes,
            unnested_rules.output_term_code,
            unnested_rules.output_unit_code,
            unnested_rules.quantity_modifier,
            unnested_rules.modifier_value,
            term.id AS term_id,
                CASE
                    WHEN (unnested_rules.output_term_code = 'NULL'::text) THEN '-1'::integer
                    ELSE output_term.id
                END AS output_term_id,
                CASE
                    WHEN (unnested_rules.output_term_code = 'NULL'::text) THEN 'NULL'::character varying
                    ELSE output_term.name_en
                END AS output_term_name_en,
                CASE
                    WHEN (unnested_rules.output_term_code = 'NULL'::text) THEN 'NULL'::character varying
                    ELSE output_term.name_es
                END AS output_term_name_es,
                CASE
                    WHEN (unnested_rules.output_term_code = 'NULL'::text) THEN 'NULL'::character varying
                    ELSE output_term.name_fr
                END AS output_term_name_fr,
            unit.id AS unit_id,
                CASE
                    WHEN (unnested_rules.output_unit_code = 'NULL'::text) THEN '-1'::integer
                    ELSE output_unit.id
                END AS output_unit_id,
                CASE
                    WHEN (unnested_rules.output_unit_code = 'NULL'::text) THEN 'NULL'::character varying
                    ELSE output_unit.name_en
                END AS output_unit_name_en,
                CASE
                    WHEN (unnested_rules.output_unit_code = 'NULL'::text) THEN 'NULL'::character varying
                    ELSE output_unit.name_es
                END AS output_unit_name_es,
                CASE
                    WHEN (unnested_rules.output_unit_code = 'NULL'::text) THEN 'NULL'::character varying
                    ELSE output_unit.name_fr
                END AS output_unit_name_fr
           FROM ((((unnested_rules
             LEFT JOIN public.trade_codes term ON ((((term.code)::text = unnested_rules.term_code) AND ((term.type)::text = 'Term'::text))))
             LEFT JOIN public.trade_codes unit ON ((((unit.code)::text = unnested_rules.unit_code) AND ((unit.type)::text = 'Unit'::text))))
             LEFT JOIN public.trade_codes output_term ON ((((output_term.code)::text = unnested_rules.output_term_code) AND ((output_term.type)::text = 'Term'::text))))
             LEFT JOIN public.trade_codes output_unit ON ((((output_unit.code)::text = unnested_rules.output_unit_code) AND ((output_unit.type)::text = 'Unit'::text))))
        )
 SELECT DISTINCT ON (ts.id) ts.id,
    ts.year,
    ts.appendix,
    ts.reported_by_exporter,
    ts.taxon_concept_id AS taxon_id,
    ts.taxon_concept_author_year AS author_year,
    ts.taxon_concept_name_status AS name_status,
    ts.taxon_concept_full_name AS taxon_name,
    ts.taxon_concept_kingdom_name AS kingdom_name,
    ts.taxon_concept_kingdom_id AS kingdom_id,
    ts.taxon_concept_phylum_name AS phylum_name,
    ts.taxon_concept_phylum_id AS phylum_id,
    ts.taxon_concept_class_name AS class_name,
    ts.taxon_concept_class_id AS class_id,
    ts.taxon_concept_order_name AS order_name,
    ts.taxon_concept_order_id AS order_id,
    ts.taxon_concept_family_name AS family_name,
    ts.taxon_concept_family_id AS family_id,
    ts.taxon_concept_genus_name AS genus_name,
    ts.taxon_concept_genus_id AS genus_id,
    ts.group_en AS group_name_en,
    ts.group_es AS group_name_es,
    ts.group_fr AS group_name_fr,
    ts.quantity,
    ts.taxon_concept_rank_id,
    ts.source_id,
    ts.purpose_id,
        CASE
            WHEN (ts.importer_id = 218) THEN 160
            ELSE ts.importer_id
        END AS china_importer_id,
        CASE
            WHEN (ts.exporter_id = 218) THEN 160
            ELSE ts.exporter_id
        END AS china_exporter_id,
        CASE
            WHEN (ts.country_of_origin_id = 218) THEN 160
            ELSE ts.country_of_origin_id
        END AS china_origin_id,
    ts.term_id AS original_term_id,
    terms.code AS original_term_code,
    terms.name_en AS original_term_en,
    ts.unit_id AS original_unit_id,
    units.code AS original_unit_code,
    units.name_en AS original_unit_en,
    NULLIF(COALESCE(tur.output_term_id, ur.output_term_id, tr.output_term_id, ts.term_id), '-1'::integer) AS term_id,
    NULLIF(COALESCE(tur.output_term_code, ur.output_term_code, tr.output_term_code, (terms.code)::text), 'NULL'::text) AS term_code,
    NULLIF((COALESCE(tur.output_term_name_en, ur.output_term_name_en, tr.output_term_name_en, terms.name_en))::text, 'NULL'::text) AS term_en,
    NULLIF((COALESCE(tur.output_term_name_es, ur.output_term_name_es, tr.output_term_name_es, terms.name_es))::text, 'NULL'::text) AS term_es,
    NULLIF((COALESCE(tur.output_term_name_fr, ur.output_term_name_fr, tr.output_term_name_fr, terms.name_fr))::text, 'NULL'::text) AS term_fr,
    NULLIF(COALESCE(tur.output_unit_id, ur.output_unit_id, tr.output_unit_id, ts.unit_id), '-1'::integer) AS unit_id,
    NULLIF(COALESCE(tur.output_unit_code, ur.output_unit_code, tr.output_unit_code, (units.code)::text), 'NULL'::text) AS unit_code,
    NULLIF((COALESCE(tur.output_unit_name_en, ur.output_unit_name_en, tr.output_unit_name_en, units.name_en))::text, 'NULL'::text) AS unit_en,
    NULLIF((COALESCE(tur.output_unit_name_es, ur.output_unit_name_es, tr.output_unit_name_es, units.name_es))::text, 'NULL'::text) AS unit_es,
    NULLIF((COALESCE(tur.output_unit_name_fr, ur.output_unit_name_fr, tr.output_unit_name_fr, units.name_fr))::text, 'NULL'::text) AS unit_fr,
    tr.rule_id AS term_rule_id,
    ur.rule_id AS unit_rule_id,
    tur.rule_id AS term_and_unit_rule_id,
    ts.group_code,
    tr.quantity_modifier AS term_quantity_modifier,
    (tr.modifier_value)::double precision AS term_modifier_value,
    COALESCE(tur.quantity_modifier, ur.quantity_modifier) AS unit_quantity_modifier,
    COALESCE((tur.modifier_value)::double precision, (ur.modifier_value)::double precision) AS unit_modifier_value
   FROM (((((public.trade_plus_group_view ts
     LEFT JOIN unnested_rules_with_trade_codes tr ON ((((tr.rule_type)::text = 'standardise_terms'::text) AND ((tr.unit_code IS NULL) OR ((tr.unit_code = 'NULL'::text) AND (ts.unit_id IS NULL)) OR (tr.unit_id = ts.unit_id)) AND ((tr.term_code IS NULL) OR ((tr.term_code = 'NULL'::text) AND (ts.term_id IS NULL)) OR (tr.term_id = ts.term_id)) AND ((NOT tr.has_taxon_filters) OR (ts.taxon_concept_kingdom_name = ANY (tr.kingdom_names)) OR (ts.taxon_concept_phylum_name = ANY (tr.phylum_names)) OR (ts.taxon_concept_class_name = ANY (tr.class_names)) OR (ts.taxon_concept_order_name = ANY (tr.order_names)) OR (ts.taxon_concept_family_name = ANY (tr.family_names)) OR (ts.taxon_concept_genus_name = ANY (tr.genus_names)) OR ((ts.taxon_concept_full_name)::text = ANY (tr.taxon_names)) OR ((ts.group_code)::text = ANY (tr.group_codes))))))
     LEFT JOIN unnested_rules_with_trade_codes ur ON ((((ur.rule_type)::text = 'standardise_units'::text) AND ((ur.unit_code IS NULL) OR ((ur.unit_code = 'NULL'::text) AND (ts.unit_id IS NULL)) OR (ur.unit_id = COALESCE(tr.output_unit_id, ts.unit_id))) AND ((ur.term_code IS NULL) OR ((ur.term_code = 'NULL'::text) AND (ts.term_id IS NULL)) OR (ur.term_id = COALESCE(tr.output_term_id, ts.term_id))) AND ((NOT ur.has_taxon_filters) OR (ts.taxon_concept_kingdom_name = ANY (ur.kingdom_names)) OR (ts.taxon_concept_phylum_name = ANY (ur.phylum_names)) OR (ts.taxon_concept_class_name = ANY (ur.class_names)) OR (ts.taxon_concept_order_name = ANY (ur.order_names)) OR (ts.taxon_concept_family_name = ANY (ur.family_names)) OR (ts.taxon_concept_genus_name = ANY (ur.genus_names)) OR ((ts.taxon_concept_full_name)::text = ANY (ur.taxon_names)) OR ((ts.group_code)::text = ANY (ur.group_codes))))))
     LEFT JOIN unnested_rules_with_trade_codes tur ON ((((tur.rule_type)::text = 'standardise_terms_and_units'::text) AND ((tur.unit_code IS NULL) OR ((tur.unit_code = 'NULL'::text) AND (ts.unit_id IS NULL)) OR (tur.unit_id = COALESCE(ur.output_unit_id, tr.output_unit_id, ts.unit_id))) AND ((tur.term_code IS NULL) OR ((tur.term_code = 'NULL'::text) AND (ts.term_id IS NULL)) OR (tur.term_id = COALESCE(ur.output_term_id, tr.output_term_id, ts.term_id))) AND ((NOT tur.has_taxon_filters) OR (ts.taxon_concept_kingdom_name = ANY (tur.kingdom_names)) OR (ts.taxon_concept_phylum_name = ANY (tur.phylum_names)) OR (ts.taxon_concept_class_name = ANY (tur.class_names)) OR (ts.taxon_concept_order_name = ANY (tur.order_names)) OR (ts.taxon_concept_family_name = ANY (tur.family_names)) OR (ts.taxon_concept_genus_name = ANY (tur.genus_names)) OR ((ts.taxon_concept_full_name)::text = ANY (tur.taxon_names)) OR ((ts.group_code)::text = ANY (tur.group_codes))))))
     LEFT JOIN public.trade_codes terms ON ((ts.term_id = terms.id)))
     LEFT JOIN public.trade_codes units ON ((ts.unit_id = units.id)))
  ORDER BY ts.id, tr.rule_priority, ur.rule_priority, tur.rule_priority;


--
-- Name: trade_plus_formatted_data_final_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_plus_formatted_data_final_view AS
 SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.reported_by_exporter,
    ts.taxon_id,
    ts.author_year,
    ts.name_status,
    ts.taxon_name,
    ts.kingdom_name,
    ts.kingdom_id,
    ts.phylum_name,
    ts.phylum_id,
    ts.class_name,
    ts.class_id,
    ts.order_name,
    ts.order_id,
    ts.family_name,
    ts.family_id,
    ts.genus_name,
    ts.genus_id,
    ts.group_name_en,
    ts.group_name_es,
    ts.group_name_fr,
    ts.quantity,
    ts.taxon_concept_rank_id,
    ts.source_id,
    ts.purpose_id,
    ts.china_importer_id,
    ts.china_exporter_id,
    ts.china_origin_id,
    ts.original_term_id,
    ts.original_term_code,
    ts.original_term_en,
    ts.original_unit_id,
    ts.original_unit_code,
    ts.original_unit_en,
    ts.term_id,
    ts.term_code,
    ts.term_en,
    ts.term_es,
    ts.term_fr,
    ts.unit_id,
    ts.unit_code,
    ts.unit_en,
    ts.unit_es,
    ts.unit_fr,
    ts.term_rule_id,
    ts.unit_rule_id,
    ts.term_and_unit_rule_id,
    ts.group_code,
    ts.term_quantity_modifier,
    ts.term_modifier_value,
    ts.unit_quantity_modifier,
    ts.unit_modifier_value
   FROM public.trade_plus_formatted_data_view ts;


--
-- Name: trade_plus_complete_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_plus_complete_view AS
 SELECT ts.id,
    ts.year,
    ts.appendix,
    ts.reported_by_exporter,
    ts.taxon_id,
    ts.author_year,
    ts.name_status,
    ts.taxon_name,
    ts.kingdom_name,
    ts.kingdom_id,
    ts.phylum_name,
    ts.phylum_id,
    ts.class_name,
    ts.class_id,
    ts.order_name,
    ts.order_id,
    ts.family_name,
    ts.family_id,
    ts.genus_name,
    ts.genus_id,
    ts.group_name_en,
    ts.group_name_es,
    ts.group_name_fr,
    ts.quantity,
    ts.taxon_concept_rank_id,
    ts.source_id,
    ts.purpose_id,
    ts.china_importer_id,
    ts.china_exporter_id,
    ts.china_origin_id,
    ts.original_term_id,
    ts.original_term_code,
    ts.original_term_en,
    ts.original_unit_id,
    ts.original_unit_code,
    ts.original_unit_en,
    ts.term_id,
    ts.term_code,
    ts.term_en,
    ts.term_es,
    ts.term_fr,
    ts.unit_id,
    ts.unit_code,
    ts.unit_en,
    ts.unit_es,
    ts.unit_fr,
    ts.term_rule_id,
    ts.unit_rule_id,
    ts.term_and_unit_rule_id,
    ts.group_code,
    ts.term_quantity_modifier,
    ts.term_modifier_value,
    ts.unit_quantity_modifier,
    ts.unit_modifier_value,
    exporters.id AS exporter_id,
    exporters.iso_code2 AS exporter_iso,
    exporters.name_en AS exporter_en,
    exporters.name_es AS exporter_es,
    exporters.name_fr AS exporter_fr,
    importers.id AS importer_id,
    importers.iso_code2 AS importer_iso,
    importers.name_en AS importer_en,
    importers.name_es AS importer_es,
    importers.name_fr AS importer_fr,
    origins.id AS origin_id,
    origins.iso_code2 AS origin_iso,
    origins.name_en AS origin_en,
    origins.name_es AS origin_es,
    origins.name_fr AS origin_fr,
    purposes.name_en AS purpose_en,
    purposes.name_es AS purpose_es,
    purposes.name_fr AS purpose_fr,
    purposes.code AS purpose_code,
    sources.name_en AS source_en,
    sources.name_es AS source_es,
    sources.name_fr AS source_fr,
    sources.code AS source_code,
    ranks.id AS rank_id,
    ranks.display_name_en AS rank_name_en,
    ranks.display_name_es AS rank_name_es,
    ranks.display_name_fr AS rank_name_fr,
        CASE
            WHEN (ts.reported_by_exporter IS FALSE) THEN
            CASE
                WHEN (ts.term_quantity_modifier = '*'::text) THEN
                CASE
                    WHEN (ts.unit_quantity_modifier = '*'::text) THEN (((ts.quantity)::double precision * ts.term_modifier_value) * ts.unit_modifier_value)
                    WHEN (ts.unit_quantity_modifier = '/'::text) THEN (((ts.quantity)::double precision * ts.term_modifier_value) / ts.unit_modifier_value)
                    ELSE ((ts.quantity)::double precision * ts.term_modifier_value)
                END
                WHEN (ts.term_quantity_modifier = '/'::text) THEN
                CASE
                    WHEN (ts.unit_quantity_modifier = '*'::text) THEN (((ts.quantity)::double precision / ts.term_modifier_value) * ts.unit_modifier_value)
                    WHEN (ts.unit_quantity_modifier = '/'::text) THEN (((ts.quantity)::double precision / ts.term_modifier_value) / ts.unit_modifier_value)
                    ELSE ((ts.quantity)::double precision / ts.term_modifier_value)
                END
                ELSE
                CASE
                    WHEN (ts.unit_quantity_modifier = '*'::text) THEN ((ts.quantity)::double precision * ts.unit_modifier_value)
                    WHEN (ts.unit_quantity_modifier = '/'::text) THEN ((ts.quantity)::double precision / ts.unit_modifier_value)
                    ELSE (ts.quantity)::double precision
                END
            END
            ELSE NULL::double precision
        END AS importer_reported_quantity,
        CASE
            WHEN (ts.reported_by_exporter IS TRUE) THEN
            CASE
                WHEN (ts.term_quantity_modifier = '*'::text) THEN
                CASE
                    WHEN (ts.unit_quantity_modifier = '*'::text) THEN (((ts.quantity)::double precision * ts.term_modifier_value) * ts.unit_modifier_value)
                    WHEN (ts.unit_quantity_modifier = '/'::text) THEN (((ts.quantity)::double precision * ts.term_modifier_value) / ts.unit_modifier_value)
                    ELSE ((ts.quantity)::double precision * ts.term_modifier_value)
                END
                WHEN (ts.term_quantity_modifier = '/'::text) THEN
                CASE
                    WHEN (ts.unit_quantity_modifier = '*'::text) THEN (((ts.quantity)::double precision / ts.term_modifier_value) * ts.unit_modifier_value)
                    WHEN (ts.unit_quantity_modifier = '/'::text) THEN (((ts.quantity)::double precision / ts.term_modifier_value) / ts.unit_modifier_value)
                    ELSE ((ts.quantity)::double precision / ts.term_modifier_value)
                END
                ELSE
                CASE
                    WHEN (ts.unit_quantity_modifier = '*'::text) THEN ((ts.quantity)::double precision * ts.unit_modifier_value)
                    WHEN (ts.unit_quantity_modifier = '/'::text) THEN ((ts.quantity)::double precision / ts.unit_modifier_value)
                    ELSE (ts.quantity)::double precision
                END
            END
            ELSE NULL::double precision
        END AS exporter_reported_quantity
   FROM ((((((((public.trade_plus_formatted_data_final_view ts
     LEFT JOIN public.trade_codes terms ON ((ts.term_id = terms.id)))
     LEFT JOIN public.trade_codes units ON ((ts.unit_id = units.id)))
     LEFT JOIN public.trade_codes sources ON ((ts.source_id = sources.id)))
     LEFT JOIN public.trade_codes purposes ON ((ts.purpose_id = purposes.id)))
     JOIN public.ranks ON ((ranks.id = ts.taxon_concept_rank_id)))
     LEFT JOIN public.geo_entities exporters ON ((ts.china_exporter_id = exporters.id)))
     LEFT JOIN public.geo_entities importers ON ((ts.china_importer_id = importers.id)))
     LEFT JOIN public.geo_entities origins ON ((ts.china_origin_id = origins.id)));


--
-- Name: trade_plus_complete_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.trade_plus_complete_mview AS
 SELECT trade_plus_complete_view.id,
    trade_plus_complete_view.year,
    trade_plus_complete_view.appendix,
    trade_plus_complete_view.reported_by_exporter,
    trade_plus_complete_view.taxon_id,
    trade_plus_complete_view.author_year,
    trade_plus_complete_view.name_status,
    trade_plus_complete_view.taxon_name,
    trade_plus_complete_view.kingdom_name,
    trade_plus_complete_view.kingdom_id,
    trade_plus_complete_view.phylum_name,
    trade_plus_complete_view.phylum_id,
    trade_plus_complete_view.class_name,
    trade_plus_complete_view.class_id,
    trade_plus_complete_view.order_name,
    trade_plus_complete_view.order_id,
    trade_plus_complete_view.family_name,
    trade_plus_complete_view.family_id,
    trade_plus_complete_view.genus_name,
    trade_plus_complete_view.genus_id,
    trade_plus_complete_view.group_name_en,
    trade_plus_complete_view.group_name_es,
    trade_plus_complete_view.group_name_fr,
    trade_plus_complete_view.quantity,
    trade_plus_complete_view.taxon_concept_rank_id,
    trade_plus_complete_view.source_id,
    trade_plus_complete_view.purpose_id,
    trade_plus_complete_view.china_importer_id,
    trade_plus_complete_view.china_exporter_id,
    trade_plus_complete_view.china_origin_id,
    trade_plus_complete_view.original_term_id,
    trade_plus_complete_view.original_term_code,
    trade_plus_complete_view.original_term_en,
    trade_plus_complete_view.original_unit_id,
    trade_plus_complete_view.original_unit_code,
    trade_plus_complete_view.original_unit_en,
    trade_plus_complete_view.term_id,
    trade_plus_complete_view.term_code,
    trade_plus_complete_view.term_en,
    trade_plus_complete_view.term_es,
    trade_plus_complete_view.term_fr,
    trade_plus_complete_view.unit_id,
    trade_plus_complete_view.unit_code,
    trade_plus_complete_view.unit_en,
    trade_plus_complete_view.unit_es,
    trade_plus_complete_view.unit_fr,
    trade_plus_complete_view.term_rule_id,
    trade_plus_complete_view.unit_rule_id,
    trade_plus_complete_view.term_and_unit_rule_id,
    trade_plus_complete_view.group_code,
    trade_plus_complete_view.term_quantity_modifier,
    trade_plus_complete_view.term_modifier_value,
    trade_plus_complete_view.unit_quantity_modifier,
    trade_plus_complete_view.unit_modifier_value,
    trade_plus_complete_view.exporter_id,
    trade_plus_complete_view.exporter_iso,
    trade_plus_complete_view.exporter_en,
    trade_plus_complete_view.exporter_es,
    trade_plus_complete_view.exporter_fr,
    trade_plus_complete_view.importer_id,
    trade_plus_complete_view.importer_iso,
    trade_plus_complete_view.importer_en,
    trade_plus_complete_view.importer_es,
    trade_plus_complete_view.importer_fr,
    trade_plus_complete_view.origin_id,
    trade_plus_complete_view.origin_iso,
    trade_plus_complete_view.origin_en,
    trade_plus_complete_view.origin_es,
    trade_plus_complete_view.origin_fr,
    trade_plus_complete_view.purpose_en,
    trade_plus_complete_view.purpose_es,
    trade_plus_complete_view.purpose_fr,
    trade_plus_complete_view.purpose_code,
    trade_plus_complete_view.source_en,
    trade_plus_complete_view.source_es,
    trade_plus_complete_view.source_fr,
    trade_plus_complete_view.source_code,
    trade_plus_complete_view.rank_id,
    trade_plus_complete_view.rank_name_en,
    trade_plus_complete_view.rank_name_es,
    trade_plus_complete_view.rank_name_fr,
    trade_plus_complete_view.importer_reported_quantity,
    trade_plus_complete_view.exporter_reported_quantity
   FROM public.trade_plus_complete_view
  WITH NO DATA;


--
-- Name: trade_plus_static; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_plus_static (
    id integer NOT NULL,
    year integer,
    appendix character varying(255),
    taxon_name character varying(255),
    taxon_id integer,
    group_name character varying(255),
    kingdom_name character varying(255),
    phylum_name character varying(255),
    class_name character varying(255),
    order_name character varying(255),
    family_name character varying(255),
    genus_name character varying(255),
    importer character varying(255),
    importer_iso character varying(255),
    exporter character varying(255),
    exporter_iso character varying(255),
    origin character varying(255),
    origin_iso character varying(255),
    importer_reported_quantity character varying(255),
    exporter_reported_quantity character varying(255),
    term character varying(255),
    term_converted character varying(255),
    unit character varying(255),
    unit_converted character varying(255),
    purpose character varying(255),
    source character varying(255)
);


--
-- Name: trade_plus_static_complete_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_plus_static_complete_view AS
 SELECT DISTINCT s.id,
    s.year,
    s.appendix,
    s.appendix_id,
    s.taxon_id,
    s.taxon_name,
    s.kingdom_name,
    s.phylum_name,
    s.group_name,
    s.class_name,
    s.order_name,
    s.family_name,
    s.genus_name,
    s.term_id,
    s.term,
    s.importer_reported_quantity,
    s.exporter_reported_quantity,
    s.unit_id,
    s.unit,
    s.exporter_id,
    s.exporter_iso,
    s.exporter,
    s.importer_id,
    s.importer_iso,
    s.importer,
    s.origin_id,
    s.origin_iso,
    s.origin,
    s.purpose_id,
    s.purpose,
    s.source_id,
    s.source
   FROM ( SELECT ts.id,
            ts.year,
            ts.appendix,
            listings.id AS appendix_id,
            ts.taxon_id,
            ts.taxon_name,
            ts.kingdom_name,
            ts.phylum_name,
            ts.group_name,
            ts.class_name,
            ts.order_name,
            ts.family_name,
            ts.genus_name,
            terms.id AS term_id,
            ts.term_converted AS term,
            ts.importer_reported_quantity,
            ts.exporter_reported_quantity,
            units.id AS unit_id,
            ts.unit_converted AS unit,
            exporters.id AS exporter_id,
            exporters.iso_code2 AS exporter_iso,
            exporters.name_en AS exporter,
            importers.id AS importer_id,
            importers.iso_code2 AS importer_iso,
            importers.name_en AS importer,
            origins.id AS origin_id,
            origins.iso_code2 AS origin_iso,
            origins.name_en AS origin,
            purposes.id AS purpose_id,
            purposes.name_en AS purpose,
            sources.id AS source_id,
            sources.name_en AS source
           FROM ((((((((public.trade_plus_static ts
             JOIN public.species_listings listings ON (((listings.abbreviation)::text = (ts.appendix)::text)))
             LEFT JOIN public.trade_codes sources ON ((((ts.source)::text = (sources.code)::text) AND ((sources.type)::text = 'Source'::text))))
             LEFT JOIN public.trade_codes purposes ON ((((ts.purpose)::text = (purposes.code)::text) AND ((purposes.type)::text = 'Purpose'::text))))
             LEFT JOIN public.trade_codes terms ON ((((ts.term_converted)::text = (terms.name_en)::text) AND ((terms.type)::text = 'Term'::text))))
             LEFT JOIN public.trade_codes units ON ((((ts.unit_converted)::text = (units.name_en)::text) AND ((units.type)::text = 'Unit'::text))))
             LEFT JOIN public.geo_entities exporters ON (((ts.exporter_iso)::text = (exporters.iso_code2)::text)))
             LEFT JOIN public.geo_entities importers ON (((ts.importer_iso)::text = (importers.iso_code2)::text)))
             LEFT JOIN public.geo_entities origins ON (((ts.origin_iso)::text = (origins.iso_code2)::text)))
          WHERE (((ts.appendix)::text <> 'N'::text) AND (listings.designation_id = 1))) s;


--
-- Name: trade_plus_static_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_plus_static_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_plus_static_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_plus_static_id_seq OWNED BY public.trade_plus_static.id;


--
-- Name: trade_restriction_purposes_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_restriction_purposes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_restriction_purposes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_restriction_purposes_id_seq OWNED BY public.trade_restriction_purposes.id;


--
-- Name: trade_restriction_sources_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_restriction_sources_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_restriction_sources_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_restriction_sources_id_seq OWNED BY public.trade_restriction_sources.id;


--
-- Name: trade_restriction_terms; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_restriction_terms (
    id integer NOT NULL,
    trade_restriction_id integer,
    term_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    created_by_id integer,
    updated_by_id integer
);


--
-- Name: trade_restriction_terms_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_restriction_terms_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_restriction_terms_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_restriction_terms_id_seq OWNED BY public.trade_restriction_terms.id;


--
-- Name: trade_restrictions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_restrictions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_restrictions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_restrictions_id_seq OWNED BY public.trade_restrictions.id;


--
-- Name: trade_sandbox_template; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_sandbox_template (
    id integer NOT NULL,
    appendix character varying(255),
    taxon_name character varying(255),
    term_code character varying(255),
    quantity character varying(255),
    unit_code character varying(255),
    trading_partner character varying(255),
    country_of_origin character varying(255),
    export_permit text,
    origin_permit text,
    purpose_code character varying(255),
    source_code character varying(255),
    year character varying(255),
    import_permit text,
    reported_taxon_concept_id integer,
    taxon_concept_id integer,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()),
    updated_at timestamp without time zone DEFAULT timezone('utc'::text, now()),
    epix_created_at timestamp without time zone,
    epix_updated_at timestamp without time zone,
    epix_created_by_id integer,
    epix_updated_by_id integer,
    updated_by_id integer,
    created_by_id integer,
    ifs_permit text
);


--
-- Name: trade_sandbox_4163; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_sandbox_4163 (
)
INHERITS (public.trade_sandbox_template);


--
-- Name: trade_sandbox_4163_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.trade_sandbox_4163_view AS
 SELECT aru.point_of_view,
        CASE
            WHEN ((aru.point_of_view)::text = 'E'::text) THEN geo_entities.iso_code2
            ELSE trade_sandbox_4163.trading_partner
        END AS exporter,
        CASE
            WHEN ((aru.point_of_view)::text = 'E'::text) THEN trade_sandbox_4163.trading_partner
            ELSE geo_entities.iso_code2
        END AS importer,
    taxon_concepts.full_name AS accepted_taxon_name,
    (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text) AS rank,
    taxon_concepts.rank_id,
    trade_sandbox_4163.id,
    trade_sandbox_4163.appendix,
    trade_sandbox_4163.taxon_name,
    trade_sandbox_4163.term_code,
    trade_sandbox_4163.quantity,
    trade_sandbox_4163.unit_code,
    trade_sandbox_4163.trading_partner,
    trade_sandbox_4163.country_of_origin,
    trade_sandbox_4163.export_permit,
    trade_sandbox_4163.origin_permit,
    trade_sandbox_4163.purpose_code,
    trade_sandbox_4163.source_code,
    trade_sandbox_4163.year,
    trade_sandbox_4163.import_permit,
    trade_sandbox_4163.reported_taxon_concept_id,
    trade_sandbox_4163.taxon_concept_id,
    trade_sandbox_4163.created_at,
    trade_sandbox_4163.updated_at,
    trade_sandbox_4163.epix_created_at,
    trade_sandbox_4163.epix_updated_at,
    trade_sandbox_4163.epix_created_by_id,
    trade_sandbox_4163.epix_updated_by_id,
    trade_sandbox_4163.updated_by_id,
    trade_sandbox_4163.created_by_id
   FROM (((public.trade_sandbox_4163
     JOIN public.trade_annual_report_uploads aru ON ((aru.id = 4163)))
     JOIN public.geo_entities ON ((geo_entities.id = aru.trading_country_id)))
     LEFT JOIN public.taxon_concepts ON ((trade_sandbox_4163.taxon_concept_id = taxon_concepts.id)));


--
-- Name: trade_sandbox_template_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_sandbox_template_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_sandbox_template_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_sandbox_template_id_seq OWNED BY public.trade_sandbox_template.id;


--
-- Name: trade_shipments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_shipments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_shipments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_shipments_id_seq OWNED BY public.trade_shipments.id;


--
-- Name: trade_shipments_with_taxa_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.trade_shipments_with_taxa_mview AS
 SELECT trade_shipments_with_taxa_view.id,
    trade_shipments_with_taxa_view.source_id,
    trade_shipments_with_taxa_view.unit_id,
    trade_shipments_with_taxa_view.purpose_id,
    trade_shipments_with_taxa_view.term_id,
    trade_shipments_with_taxa_view.quantity,
    trade_shipments_with_taxa_view.appendix,
    trade_shipments_with_taxa_view.trade_annual_report_upload_id,
    trade_shipments_with_taxa_view.exporter_id,
    trade_shipments_with_taxa_view.importer_id,
    trade_shipments_with_taxa_view.country_of_origin_id,
    trade_shipments_with_taxa_view.reported_by_exporter,
    trade_shipments_with_taxa_view.taxon_concept_id,
    trade_shipments_with_taxa_view.year,
    trade_shipments_with_taxa_view.created_at,
    trade_shipments_with_taxa_view.updated_at,
    trade_shipments_with_taxa_view.sandbox_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_id,
    trade_shipments_with_taxa_view.import_permit_number,
    trade_shipments_with_taxa_view.export_permit_number,
    trade_shipments_with_taxa_view.origin_permit_number,
    trade_shipments_with_taxa_view.legacy_shipment_number,
    trade_shipments_with_taxa_view.import_permits_ids,
    trade_shipments_with_taxa_view.export_permits_ids,
    trade_shipments_with_taxa_view.origin_permits_ids,
    trade_shipments_with_taxa_view.updated_by_id,
    trade_shipments_with_taxa_view.created_by_id,
    trade_shipments_with_taxa_view.epix_created_at,
    trade_shipments_with_taxa_view.epix_updated_at,
    trade_shipments_with_taxa_view.epix_created_by_id,
    trade_shipments_with_taxa_view.epix_updated_by_id,
    trade_shipments_with_taxa_view.ifs_permits_ids,
    trade_shipments_with_taxa_view.ifs_permit_number,
    trade_shipments_with_taxa_view.taxon_concept_full_name,
    trade_shipments_with_taxa_view.taxon_concept_author_year,
    trade_shipments_with_taxa_view.taxon_concept_name_status,
    trade_shipments_with_taxa_view.taxon_concept_rank_id,
    trade_shipments_with_taxa_view.taxon_concept_kingdom_id,
    trade_shipments_with_taxa_view.taxon_concept_phylum_id,
    trade_shipments_with_taxa_view.taxon_concept_class_id,
    trade_shipments_with_taxa_view.taxon_concept_order_id,
    trade_shipments_with_taxa_view.taxon_concept_family_id,
    trade_shipments_with_taxa_view.taxon_concept_subfamily_id,
    trade_shipments_with_taxa_view.taxon_concept_genus_id,
    trade_shipments_with_taxa_view.taxon_concept_species_id,
    trade_shipments_with_taxa_view.taxon_concept_class_name,
    trade_shipments_with_taxa_view.taxon_concept_order_name,
    trade_shipments_with_taxa_view.taxon_concept_family_name,
    trade_shipments_with_taxa_view.taxon_concept_genus_name,
    trade_shipments_with_taxa_view.reported_taxon_concept_full_name,
    trade_shipments_with_taxa_view.reported_taxon_concept_author_year,
    trade_shipments_with_taxa_view.reported_taxon_concept_name_status,
    trade_shipments_with_taxa_view.reported_taxon_concept_rank_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_kingdom_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_phylum_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_class_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_order_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_family_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_subfamily_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_genus_id,
    trade_shipments_with_taxa_view.reported_taxon_concept_species_id
   FROM public.trade_shipments_with_taxa_view
  WITH NO DATA;


--
-- Name: trade_taxon_concept_term_pairs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_taxon_concept_term_pairs (
    id integer NOT NULL,
    taxon_concept_id integer,
    term_id integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: trade_taxon_concept_term_pairs_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_taxon_concept_term_pairs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_taxon_concept_term_pairs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_taxon_concept_term_pairs_id_seq OWNED BY public.trade_taxon_concept_term_pairs.id;


--
-- Name: trade_taxon_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_taxon_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_taxon_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_taxon_groups_id_seq OWNED BY public.trade_taxon_groups.id;


--
-- Name: trade_trade_data_downloads; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_trade_data_downloads (
    id integer NOT NULL,
    user_ip character varying(255),
    report_type character varying(255),
    year_from integer,
    year_to integer,
    taxon character varying(255),
    appendix character varying(255),
    importer text,
    exporter text,
    origin text,
    term text,
    unit text,
    source text,
    purpose text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    number_of_rows integer,
    city character varying,
    country character varying,
    organization character varying
);


--
-- Name: trade_trade_data_downloads_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_trade_data_downloads_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_trade_data_downloads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_trade_data_downloads_id_seq OWNED BY public.trade_trade_data_downloads.id;


--
-- Name: trade_validation_errors; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_validation_errors (
    id integer NOT NULL,
    annual_report_upload_id integer NOT NULL,
    validation_rule_id integer NOT NULL,
    matching_criteria jsonb NOT NULL,
    is_ignored boolean DEFAULT false,
    is_primary boolean DEFAULT false,
    error_message text NOT NULL,
    error_count integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


--
-- Name: trade_validation_errors_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_validation_errors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_validation_errors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_validation_errors_id_seq OWNED BY public.trade_validation_errors.id;


--
-- Name: trade_validation_rules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.trade_validation_rules (
    id integer NOT NULL,
    valid_values_view character varying(255),
    type character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    format_re character varying(255),
    run_order integer NOT NULL,
    column_names character varying(255)[],
    is_primary boolean DEFAULT true NOT NULL,
    scope public.hstore,
    is_strict boolean DEFAULT false NOT NULL
);


--
-- Name: trade_validation_rules_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.trade_validation_rules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: trade_validation_rules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.trade_validation_rules_id_seq OWNED BY public.trade_validation_rules.id;


--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: valid_appendix_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_appendix_view AS
 SELECT appendix.appendix
   FROM unnest(ARRAY['I'::text, 'II'::text, 'III'::text, 'N'::text]) appendix(appendix);


--
-- Name: valid_country_of_origin_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_country_of_origin_view AS
 SELECT geo_entities.iso_code2 AS country_of_origin
   FROM (public.geo_entities
     JOIN public.geo_entity_types ON ((geo_entity_types.id = geo_entities.geo_entity_type_id)))
  WHERE ((geo_entity_types.name)::text = ANY (ARRAY[('COUNTRY'::character varying)::text, ('TERRITORY'::character varying)::text, ('TRADE_ENTITY'::character varying)::text]));


--
-- Name: valid_purpose_code_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_purpose_code_view AS
 SELECT trade_codes.code AS purpose_code
   FROM public.trade_codes
  WHERE ((trade_codes.type)::text = 'Purpose'::text);


--
-- Name: valid_source_code_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_source_code_view AS
 SELECT trade_codes.code AS source_code
   FROM public.trade_codes
  WHERE ((trade_codes.type)::text = 'Source'::text);


--
-- Name: valid_taxon_concept_annex_year_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.valid_taxon_concept_annex_year_mview (
    taxon_concept_id integer,
    annex character varying(255),
    effective_from timestamp without time zone,
    effective_to timestamp without time zone
);


--
-- Name: valid_taxon_concept_appendix_year_mview; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.valid_taxon_concept_appendix_year_mview (
    taxon_concept_id integer,
    appendix character varying(255),
    effective_from timestamp without time zone,
    effective_to timestamp without time zone
);


--
-- Name: valid_taxon_concept_country_of_origin_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_taxon_concept_country_of_origin_view AS
 SELECT taxon_concepts.id AS taxon_concept_id,
    geo_entities.iso_code2 AS country_of_origin,
    geo_entities.id AS country_of_origin_id
   FROM (((public.taxon_concepts
     JOIN public.taxonomies ON (((taxonomies.id = taxon_concepts.taxonomy_id) AND ((taxonomies.name)::text = 'CITES_EU'::text))))
     JOIN public.distributions ON ((distributions.taxon_concept_id = taxon_concepts.id)))
     JOIN public.geo_entities ON ((geo_entities.id = distributions.geo_entity_id)));


--
-- Name: valid_taxon_concept_exporter_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_taxon_concept_exporter_view AS
 SELECT taxon_concepts.id AS taxon_concept_id,
    geo_entities.iso_code2 AS exporter,
    geo_entities.id AS exporter_id
   FROM (((public.taxon_concepts
     JOIN public.taxonomies ON (((taxonomies.id = taxon_concepts.taxonomy_id) AND ((taxonomies.name)::text = 'CITES_EU'::text))))
     JOIN public.distributions ON ((distributions.taxon_concept_id = taxon_concepts.id)))
     JOIN public.geo_entities ON ((geo_entities.id = distributions.geo_entity_id)));


--
-- Name: valid_taxon_concept_term_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_taxon_concept_term_view AS
 WITH RECURSIVE self_and_descendants(id, pair_id, term_id) AS (
         SELECT taxon_concepts.id,
            trade_taxon_concept_term_pairs.id,
            trade_taxon_concept_term_pairs.term_id
           FROM (public.trade_taxon_concept_term_pairs
             JOIN public.taxon_concepts ON ((trade_taxon_concept_term_pairs.taxon_concept_id = taxon_concepts.id)))
          WHERE ((taxon_concepts.name_status)::text = 'A'::text)
        UNION
         SELECT hi.id,
            d.pair_id,
            d.term_id
           FROM (public.taxon_concepts hi
             JOIN self_and_descendants d ON ((d.id = hi.parent_id)))
          WHERE ((hi.name_status)::text = 'A'::text)
        ), taxa_with_terms AS (
         SELECT self_and_descendants.id AS taxon_concept_id,
            terms.code AS term_code,
            self_and_descendants.term_id
           FROM ((self_and_descendants
             JOIN public.trade_taxon_concept_term_pairs ON ((trade_taxon_concept_term_pairs.id = self_and_descendants.pair_id)))
             JOIN public.trade_codes terms ON (((terms.id = trade_taxon_concept_term_pairs.term_id) AND ((terms.type)::text = 'Term'::text))))
        ), hybrids_with_terms AS (
         SELECT rel.other_taxon_concept_id AS taxon_concept_id,
            taxa_with_terms.term_code,
            taxa_with_terms.term_id
           FROM ((taxa_with_terms
             JOIN public.taxon_relationships rel ON ((rel.taxon_concept_id = taxa_with_terms.taxon_concept_id)))
             JOIN public.taxon_relationship_types rel_type ON (((rel.taxon_relationship_type_id = rel_type.id) AND ((rel_type.name)::text = 'HAS_HYBRID'::text))))
        )
 SELECT taxa_with_terms.taxon_concept_id,
    taxa_with_terms.term_code,
    taxa_with_terms.term_id
   FROM taxa_with_terms
UNION
 SELECT hybrids_with_terms.taxon_concept_id,
    hybrids_with_terms.term_code,
    hybrids_with_terms.term_id
   FROM hybrids_with_terms;


--
-- Name: valid_taxon_concept_term_mview; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.valid_taxon_concept_term_mview AS
 SELECT valid_taxon_concept_term_view.taxon_concept_id,
    valid_taxon_concept_term_view.term_code,
    valid_taxon_concept_term_view.term_id
   FROM public.valid_taxon_concept_term_view
  WITH NO DATA;


--
-- Name: valid_taxon_name_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_taxon_name_view AS
 SELECT taxon_concepts.full_name AS taxon_name
   FROM (public.taxon_concepts
     JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
  WHERE ((taxonomies.name)::text = 'CITES_EU'::text);


--
-- Name: valid_term_code_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_term_code_view AS
 SELECT trade_codes.code AS term_code
   FROM public.trade_codes
  WHERE ((trade_codes.type)::text = 'Term'::text);


--
-- Name: valid_term_purpose_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_term_purpose_view AS
 SELECT terms.code AS term_code,
    terms.id AS term_id,
    purposes.code AS purpose_code,
    purposes.id AS purpose_id
   FROM ((public.term_trade_codes_pairs
     JOIN public.trade_codes purposes ON (((purposes.id = term_trade_codes_pairs.trade_code_id) AND ((term_trade_codes_pairs.trade_code_type)::text = 'Purpose'::text) AND ((purposes.type)::text = 'Purpose'::text))))
     JOIN public.trade_codes terms ON ((terms.id = term_trade_codes_pairs.term_id)))
UNION
 SELECT terms.code AS term_code,
    terms.id AS term_id,
    NULL::character varying AS purpose_code,
    NULL::integer AS purpose_id
   FROM (public.term_trade_codes_pairs
     JOIN public.trade_codes terms ON ((terms.id = term_trade_codes_pairs.term_id)))
  WHERE (((term_trade_codes_pairs.trade_code_type)::text = 'Purpose'::text) AND (term_trade_codes_pairs.trade_code_id IS NULL));


--
-- Name: valid_term_unit_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_term_unit_view AS
 SELECT terms.code AS term_code,
    terms.id AS term_id,
    units.code AS unit_code,
    units.id AS unit_id
   FROM ((public.term_trade_codes_pairs
     JOIN public.trade_codes units ON (((units.id = term_trade_codes_pairs.trade_code_id) AND ((term_trade_codes_pairs.trade_code_type)::text = 'Unit'::text) AND ((units.type)::text = 'Unit'::text))))
     JOIN public.trade_codes terms ON ((terms.id = term_trade_codes_pairs.term_id)))
UNION
 SELECT terms.code AS term_code,
    terms.id AS term_id,
    NULL::character varying AS unit_code,
    NULL::integer AS unit_id
   FROM (public.term_trade_codes_pairs
     JOIN public.trade_codes terms ON ((terms.id = term_trade_codes_pairs.term_id)))
  WHERE (((term_trade_codes_pairs.trade_code_type)::text = 'Unit'::text) AND (term_trade_codes_pairs.trade_code_id IS NULL));


--
-- Name: valid_trading_partner_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_trading_partner_view AS
 SELECT geo_entities.iso_code2 AS trading_partner
   FROM (public.geo_entities
     JOIN public.geo_entity_types ON ((geo_entity_types.id = geo_entities.geo_entity_type_id)))
  WHERE ((geo_entity_types.name)::text = ANY (ARRAY[('COUNTRY'::character varying)::text, ('TERRITORY'::character varying)::text, ('TRADE_ENTITY'::character varying)::text]));


--
-- Name: valid_unit_code_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_unit_code_view AS
 SELECT trade_codes.code AS unit_code
   FROM public.trade_codes
  WHERE ((trade_codes.type)::text = 'Unit'::text);


--
-- Name: versions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.versions (
    id integer NOT NULL,
    item_type character varying(255) NOT NULL,
    item_id integer NOT NULL,
    event character varying(255) NOT NULL,
    whodunnit character varying(255),
    object_yml text,
    created_at timestamp without time zone,
    object_changes_yml text,
    object jsonb DEFAULT '{}'::jsonb,
    object_changes jsonb DEFAULT '{}'::jsonb
);


--
-- Name: versions_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.versions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: versions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.versions_id_seq OWNED BY public.versions.id;


--
-- Name: year_annual_reports_by_countries; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.year_annual_reports_by_countries AS
 SELECT row_number() OVER (ORDER BY b.name_en, b.year DESC) AS no,
    b.name_en,
    b.year,
        CASE
            WHEN (b.sum = 0) THEN 'I/E'::text
            WHEN (b.sum = 1) THEN 'E'::text
            WHEN (b.sum = '-1'::integer) THEN 'I'::text
            ELSE NULL::text
        END AS reporter_type,
    b.year_created
   FROM ( SELECT a.name_en,
            a.year,
            sum(a.type) AS sum,
            a.year_created
           FROM ( SELECT DISTINCT g.name_en,
                    t.year,
                    1 AS type,
                    date_part('year'::text, t.created_at) AS year_created
                   FROM (public.trade_shipments t
                     LEFT JOIN public.geo_entities g ON ((t.exporter_id = g.id)))
                  WHERE (t.reported_by_exporter = true)
                UNION ALL
                 SELECT DISTINCT g.name_en,
                    t.year,
                    '-1'::integer AS type,
                    date_part('year'::text, t.created_at) AS year_created
                   FROM (public.trade_shipments t
                     LEFT JOIN public.geo_entities g ON ((t.importer_id = g.id)))
                  WHERE (t.reported_by_exporter = false)) a
          GROUP BY a.name_en, a.year, a.year_created) b;


--
-- Name: active_storage_attachments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_attachments ALTER COLUMN id SET DEFAULT nextval('public.active_storage_attachments_id_seq'::regclass);


--
-- Name: active_storage_blobs id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_blobs ALTER COLUMN id SET DEFAULT nextval('public.active_storage_blobs_id_seq'::regclass);


--
-- Name: active_storage_variant_records id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_variant_records ALTER COLUMN id SET DEFAULT nextval('public.active_storage_variant_records_id_seq'::regclass);


--
-- Name: analytics_events id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.analytics_events ALTER COLUMN id SET DEFAULT nextval('public.analytics_events_id_seq'::regclass);


--
-- Name: annotations id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.annotations ALTER COLUMN id SET DEFAULT nextval('public.annotations_id_seq'::regclass);


--
-- Name: api_requests id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.api_requests ALTER COLUMN id SET DEFAULT nextval('public.api_requests_id_seq'::regclass);


--
-- Name: bulk_downloads id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bulk_downloads ALTER COLUMN id SET DEFAULT nextval('public.bulk_downloads_id_seq'::regclass);


--
-- Name: change_types id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.change_types ALTER COLUMN id SET DEFAULT nextval('public.change_types_id_seq'::regclass);


--
-- Name: cites_processes id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cites_processes ALTER COLUMN id SET DEFAULT nextval('public.cites_processes_id_seq'::regclass);


--
-- Name: cites_suspension_confirmations id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cites_suspension_confirmations ALTER COLUMN id SET DEFAULT nextval('public.cites_suspension_confirmations_id_seq'::regclass);


--
-- Name: cms_mappings id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cms_mappings ALTER COLUMN id SET DEFAULT nextval('public.cms_mappings_id_seq'::regclass);


--
-- Name: comments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.comments ALTER COLUMN id SET DEFAULT nextval('public.comments_id_seq'::regclass);


--
-- Name: common_names id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.common_names ALTER COLUMN id SET DEFAULT nextval('public.common_names_id_seq'::regclass);


--
-- Name: designation_geo_entities id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designation_geo_entities ALTER COLUMN id SET DEFAULT nextval('public.designation_geo_entities_id_seq'::regclass);


--
-- Name: designations id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designations ALTER COLUMN id SET DEFAULT nextval('public.designations_id_seq'::regclass);


--
-- Name: distribution_references id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_references ALTER COLUMN id SET DEFAULT nextval('public.distribution_references_id_seq'::regclass);


--
-- Name: distributions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions ALTER COLUMN id SET DEFAULT nextval('public.distributions_id_seq'::regclass);


--
-- Name: document_citation_geo_entities id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_geo_entities ALTER COLUMN id SET DEFAULT nextval('public.document_citation_geo_entities_id_seq'::regclass);


--
-- Name: document_citation_taxon_concepts id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_taxon_concepts ALTER COLUMN id SET DEFAULT nextval('public.document_citation_taxon_concepts_id_seq'::regclass);


--
-- Name: document_citations id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citations ALTER COLUMN id SET DEFAULT nextval('public.document_citations_id_seq'::regclass);


--
-- Name: document_tags id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_tags ALTER COLUMN id SET DEFAULT nextval('public.document_tags_id_seq'::regclass);


--
-- Name: documents id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents ALTER COLUMN id SET DEFAULT nextval('public.documents_id_seq'::regclass);


--
-- Name: downloads id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.downloads ALTER COLUMN id SET DEFAULT nextval('public.downloads_id_seq'::regclass);


--
-- Name: eu_country_dates id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_country_dates ALTER COLUMN id SET DEFAULT nextval('public.eu_country_dates_id_seq'::regclass);


--
-- Name: eu_decision_confirmations id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decision_confirmations ALTER COLUMN id SET DEFAULT nextval('public.eu_decision_confirmations_id_seq'::regclass);


--
-- Name: eu_decision_types id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decision_types ALTER COLUMN id SET DEFAULT nextval('public.eu_decision_types_id_seq'::regclass);


--
-- Name: eu_decisions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions ALTER COLUMN id SET DEFAULT nextval('public.eu_decisions_id_seq'::regclass);


--
-- Name: events id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.events ALTER COLUMN id SET DEFAULT nextval('public.events_id_seq'::regclass);


--
-- Name: geo_entities id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_entities ALTER COLUMN id SET DEFAULT nextval('public.geo_entities_id_seq'::regclass);


--
-- Name: geo_entity_types id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_entity_types ALTER COLUMN id SET DEFAULT nextval('public.geo_entity_types_id_seq'::regclass);


--
-- Name: geo_relationship_types id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationship_types ALTER COLUMN id SET DEFAULT nextval('public.geo_relationship_types_id_seq'::regclass);


--
-- Name: geo_relationships id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationships ALTER COLUMN id SET DEFAULT nextval('public.geo_relationships_id_seq'::regclass);


--
-- Name: instruments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.instruments ALTER COLUMN id SET DEFAULT nextval('public.instruments_id_seq'::regclass);


--
-- Name: iucn_mappings id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.iucn_mappings ALTER COLUMN id SET DEFAULT nextval('public.iucn_mappings_id_seq'::regclass);


--
-- Name: languages id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.languages ALTER COLUMN id SET DEFAULT nextval('public.languages_id_seq'::regclass);


--
-- Name: listing_changes id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes ALTER COLUMN id SET DEFAULT nextval('public.listing_changes_id_seq'::regclass);


--
-- Name: listing_distributions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions ALTER COLUMN id SET DEFAULT nextval('public.listing_distributions_id_seq'::regclass);


--
-- Name: nomenclature_change_inputs id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_inputs ALTER COLUMN id SET DEFAULT nextval('public.nomenclature_change_inputs_id_seq'::regclass);


--
-- Name: nomenclature_change_output_reassignments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_output_reassignments ALTER COLUMN id SET DEFAULT nextval('public.nomenclature_change_output_reassignments_id_seq'::regclass);


--
-- Name: nomenclature_change_outputs id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs ALTER COLUMN id SET DEFAULT nextval('public.nomenclature_change_outputs_id_seq'::regclass);


--
-- Name: nomenclature_change_reassignment_targets id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignment_targets ALTER COLUMN id SET DEFAULT nextval('public.nomenclature_change_reassignment_targets_id_seq'::regclass);


--
-- Name: nomenclature_change_reassignments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignments ALTER COLUMN id SET DEFAULT nextval('public.nomenclature_change_reassignments_id_seq'::regclass);


--
-- Name: nomenclature_changes id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_changes ALTER COLUMN id SET DEFAULT nextval('public.nomenclature_changes_id_seq'::regclass);


--
-- Name: preset_tags id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.preset_tags ALTER COLUMN id SET DEFAULT nextval('public.preset_tags_id_seq'::regclass);


--
-- Name: proposal_details id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.proposal_details ALTER COLUMN id SET DEFAULT nextval('public.proposal_details_id_seq'::regclass);


--
-- Name: ranks id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ranks ALTER COLUMN id SET DEFAULT nextval('public.ranks_id_seq'::regclass);


--
-- Name: references id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."references" ALTER COLUMN id SET DEFAULT nextval('public.references_id_seq'::regclass);


--
-- Name: references_legacy_id_mapping id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.references_legacy_id_mapping ALTER COLUMN id SET DEFAULT nextval('public.references_legacy_id_mapping_id_seq'::regclass);


--
-- Name: review_details id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_details ALTER COLUMN id SET DEFAULT nextval('public.review_details_id_seq'::regclass);


--
-- Name: species_listings id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.species_listings ALTER COLUMN id SET DEFAULT nextval('public.species_listings_id_seq'::regclass);


--
-- Name: srg_histories id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.srg_histories ALTER COLUMN id SET DEFAULT nextval('public.srg_histories_id_seq'::regclass);


--
-- Name: taggings id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taggings ALTER COLUMN id SET DEFAULT nextval('public.taggings_id_seq'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.tags ALTER COLUMN id SET DEFAULT nextval('public.tags_id_seq'::regclass);


--
-- Name: taxon_commons id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_commons ALTER COLUMN id SET DEFAULT nextval('public.taxon_commons_id_seq'::regclass);


--
-- Name: taxon_concept_references id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_references ALTER COLUMN id SET DEFAULT nextval('public.taxon_concept_references_id_seq'::regclass);


--
-- Name: taxon_concept_versions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_versions ALTER COLUMN id SET DEFAULT nextval('public.taxon_concept_versions_id_seq'::regclass);


--
-- Name: taxon_concepts id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts ALTER COLUMN id SET DEFAULT nextval('public.taxon_concepts_id_seq'::regclass);


--
-- Name: taxon_instruments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_instruments ALTER COLUMN id SET DEFAULT nextval('public.taxon_instruments_id_seq'::regclass);


--
-- Name: taxon_names id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_names ALTER COLUMN id SET DEFAULT nextval('public.taxon_names_id_seq'::regclass);


--
-- Name: taxon_relationship_types id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationship_types ALTER COLUMN id SET DEFAULT nextval('public.taxon_relationship_types_id_seq'::regclass);


--
-- Name: taxon_relationships id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationships ALTER COLUMN id SET DEFAULT nextval('public.taxon_relationships_id_seq'::regclass);


--
-- Name: taxonomies id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxonomies ALTER COLUMN id SET DEFAULT nextval('public.taxonomies_id_seq'::regclass);


--
-- Name: term_trade_codes_pairs id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.term_trade_codes_pairs ALTER COLUMN id SET DEFAULT nextval('public.term_trade_codes_pairs_id_seq'::regclass);


--
-- Name: trade_annual_report_uploads id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads ALTER COLUMN id SET DEFAULT nextval('public.trade_annual_report_uploads_id_seq'::regclass);


--
-- Name: trade_codes id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_codes ALTER COLUMN id SET DEFAULT nextval('public.trade_codes_id_seq'::regclass);


--
-- Name: trade_conversion_rules id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_conversion_rules ALTER COLUMN id SET DEFAULT nextval('public.trade_conversion_rules_id_seq'::regclass);


--
-- Name: trade_permits id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_permits ALTER COLUMN id SET DEFAULT nextval('public.trade_permits_id_seq'::regclass);


--
-- Name: trade_plus_static id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_plus_static ALTER COLUMN id SET DEFAULT nextval('public.trade_plus_static_id_seq'::regclass);


--
-- Name: trade_restriction_purposes id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_purposes ALTER COLUMN id SET DEFAULT nextval('public.trade_restriction_purposes_id_seq'::regclass);


--
-- Name: trade_restriction_sources id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_sources ALTER COLUMN id SET DEFAULT nextval('public.trade_restriction_sources_id_seq'::regclass);


--
-- Name: trade_restriction_terms id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_terms ALTER COLUMN id SET DEFAULT nextval('public.trade_restriction_terms_id_seq'::regclass);


--
-- Name: trade_restrictions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions ALTER COLUMN id SET DEFAULT nextval('public.trade_restrictions_id_seq'::regclass);


--
-- Name: trade_sandbox_4163 id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_sandbox_4163 ALTER COLUMN id SET DEFAULT nextval('public.trade_sandbox_template_id_seq'::regclass);


--
-- Name: trade_sandbox_4163 created_at; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_sandbox_4163 ALTER COLUMN created_at SET DEFAULT timezone('utc'::text, now());


--
-- Name: trade_sandbox_4163 updated_at; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_sandbox_4163 ALTER COLUMN updated_at SET DEFAULT timezone('utc'::text, now());


--
-- Name: trade_sandbox_template id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_sandbox_template ALTER COLUMN id SET DEFAULT nextval('public.trade_sandbox_template_id_seq'::regclass);


--
-- Name: trade_shipments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments ALTER COLUMN id SET DEFAULT nextval('public.trade_shipments_id_seq'::regclass);


--
-- Name: trade_taxon_concept_term_pairs id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_taxon_concept_term_pairs ALTER COLUMN id SET DEFAULT nextval('public.trade_taxon_concept_term_pairs_id_seq'::regclass);


--
-- Name: trade_taxon_groups id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_taxon_groups ALTER COLUMN id SET DEFAULT nextval('public.trade_taxon_groups_id_seq'::regclass);


--
-- Name: trade_trade_data_downloads id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_trade_data_downloads ALTER COLUMN id SET DEFAULT nextval('public.trade_trade_data_downloads_id_seq'::regclass);


--
-- Name: trade_validation_errors id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_validation_errors ALTER COLUMN id SET DEFAULT nextval('public.trade_validation_errors_id_seq'::regclass);


--
-- Name: trade_validation_rules id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_validation_rules ALTER COLUMN id SET DEFAULT nextval('public.trade_validation_rules_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Name: versions id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.versions ALTER COLUMN id SET DEFAULT nextval('public.versions_id_seq'::regclass);


--
-- Name: active_storage_attachments active_storage_attachments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_attachments
    ADD CONSTRAINT active_storage_attachments_pkey PRIMARY KEY (id);


--
-- Name: active_storage_blobs active_storage_blobs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_blobs
    ADD CONSTRAINT active_storage_blobs_pkey PRIMARY KEY (id);


--
-- Name: active_storage_variant_records active_storage_variant_records_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_variant_records
    ADD CONSTRAINT active_storage_variant_records_pkey PRIMARY KEY (id);


--
-- Name: iucn_mappings admin_iucn_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.iucn_mappings
    ADD CONSTRAINT admin_iucn_mappings_pkey PRIMARY KEY (id);


--
-- Name: ahoy_events ahoy_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ahoy_events
    ADD CONSTRAINT ahoy_events_pkey PRIMARY KEY (id);


--
-- Name: ahoy_visits ahoy_visits_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ahoy_visits
    ADD CONSTRAINT ahoy_visits_pkey PRIMARY KEY (id);


--
-- Name: analytics_events analytics_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.analytics_events
    ADD CONSTRAINT analytics_events_pkey PRIMARY KEY (id);


--
-- Name: annotations annotations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT annotations_pkey PRIMARY KEY (id);


--
-- Name: api_requests api_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.api_requests
    ADD CONSTRAINT api_requests_pkey PRIMARY KEY (id);


--
-- Name: ar_internal_metadata ar_internal_metadata_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ar_internal_metadata
    ADD CONSTRAINT ar_internal_metadata_pkey PRIMARY KEY (key);


--
-- Name: bulk_downloads bulk_downloads_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bulk_downloads
    ADD CONSTRAINT bulk_downloads_pkey PRIMARY KEY (id);


--
-- Name: change_types change_types_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.change_types
    ADD CONSTRAINT change_types_pkey PRIMARY KEY (id);


--
-- Name: cites_processes cites_processes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cites_processes
    ADD CONSTRAINT cites_processes_pkey PRIMARY KEY (id);


--
-- Name: cites_suspension_confirmations cites_suspension_confirmations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cites_suspension_confirmations
    ADD CONSTRAINT cites_suspension_confirmations_pkey PRIMARY KEY (id);


--
-- Name: cms_mappings cms_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cms_mappings
    ADD CONSTRAINT cms_mappings_pkey PRIMARY KEY (id);


--
-- Name: comments comments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: common_names common_names_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.common_names
    ADD CONSTRAINT common_names_pkey PRIMARY KEY (id);


--
-- Name: designation_geo_entities designation_geo_entities_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designation_geo_entities
    ADD CONSTRAINT designation_geo_entities_pkey PRIMARY KEY (id);


--
-- Name: designations designations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designations
    ADD CONSTRAINT designations_pkey PRIMARY KEY (id);


--
-- Name: distribution_references distribution_references_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_references
    ADD CONSTRAINT distribution_references_pkey PRIMARY KEY (id);


--
-- Name: distributions distributions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_pkey PRIMARY KEY (id);


--
-- Name: document_citation_geo_entities document_citation_geo_entities_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_geo_entities
    ADD CONSTRAINT document_citation_geo_entities_pkey PRIMARY KEY (id);


--
-- Name: document_citation_taxon_concepts document_citation_taxon_concepts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_taxon_concepts
    ADD CONSTRAINT document_citation_taxon_concepts_pkey PRIMARY KEY (id);


--
-- Name: document_citations document_citations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citations
    ADD CONSTRAINT document_citations_pkey PRIMARY KEY (id);


--
-- Name: document_tags document_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_tags
    ADD CONSTRAINT document_tags_pkey PRIMARY KEY (id);


--
-- Name: documents documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_pkey PRIMARY KEY (id);


--
-- Name: downloads downloads_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.downloads
    ADD CONSTRAINT downloads_pkey PRIMARY KEY (id);


--
-- Name: eu_country_dates eu_country_dates_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_country_dates
    ADD CONSTRAINT eu_country_dates_pkey PRIMARY KEY (id);


--
-- Name: eu_decision_confirmations eu_decision_confirmations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decision_confirmations
    ADD CONSTRAINT eu_decision_confirmations_pkey PRIMARY KEY (id);


--
-- Name: eu_decision_types eu_decision_types_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decision_types
    ADD CONSTRAINT eu_decision_types_pkey PRIMARY KEY (id);


--
-- Name: eu_decisions eu_decisions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_pkey PRIMARY KEY (id);


--
-- Name: events events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: geo_entities geo_entities_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_entities
    ADD CONSTRAINT geo_entities_pkey PRIMARY KEY (id);


--
-- Name: geo_entity_types geo_entity_types_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_entity_types
    ADD CONSTRAINT geo_entity_types_pkey PRIMARY KEY (id);


--
-- Name: geo_relationship_types geo_relationship_types_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationship_types
    ADD CONSTRAINT geo_relationship_types_pkey PRIMARY KEY (id);


--
-- Name: geo_relationships geo_relationships_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationships
    ADD CONSTRAINT geo_relationships_pkey PRIMARY KEY (id);


--
-- Name: instruments instruments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.instruments
    ADD CONSTRAINT instruments_pkey PRIMARY KEY (id);


--
-- Name: languages languages_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.languages
    ADD CONSTRAINT languages_pkey PRIMARY KEY (id);


--
-- Name: listing_changes listing_changes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_pkey PRIMARY KEY (id);


--
-- Name: listing_distributions listing_distributions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions
    ADD CONSTRAINT listing_distributions_pkey PRIMARY KEY (id);


--
-- Name: nomenclature_change_inputs nomenclature_change_inputs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_inputs
    ADD CONSTRAINT nomenclature_change_inputs_pkey PRIMARY KEY (id);


--
-- Name: nomenclature_change_output_reassignments nomenclature_change_output_reassignments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_output_reassignments
    ADD CONSTRAINT nomenclature_change_output_reassignments_pkey PRIMARY KEY (id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_pkey PRIMARY KEY (id);


--
-- Name: nomenclature_change_reassignment_targets nomenclature_change_reassignment_targets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignment_targets
    ADD CONSTRAINT nomenclature_change_reassignment_targets_pkey PRIMARY KEY (id);


--
-- Name: nomenclature_change_reassignments nomenclature_change_reassignments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignments
    ADD CONSTRAINT nomenclature_change_reassignments_pkey PRIMARY KEY (id);


--
-- Name: nomenclature_changes nomenclature_changes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_changes
    ADD CONSTRAINT nomenclature_changes_pkey PRIMARY KEY (id);


--
-- Name: preset_tags preset_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.preset_tags
    ADD CONSTRAINT preset_tags_pkey PRIMARY KEY (id);


--
-- Name: proposal_details proposal_details_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.proposal_details
    ADD CONSTRAINT proposal_details_pkey PRIMARY KEY (id);


--
-- Name: ranks ranks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ranks
    ADD CONSTRAINT ranks_pkey PRIMARY KEY (id);


--
-- Name: references_legacy_id_mapping references_legacy_id_mapping_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.references_legacy_id_mapping
    ADD CONSTRAINT references_legacy_id_mapping_pkey PRIMARY KEY (id);


--
-- Name: references references_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."references"
    ADD CONSTRAINT references_pkey PRIMARY KEY (id);


--
-- Name: review_details review_details_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_details
    ADD CONSTRAINT review_details_pkey PRIMARY KEY (id);


--
-- Name: species_listings species_listings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.species_listings
    ADD CONSTRAINT species_listings_pkey PRIMARY KEY (id);


--
-- Name: srg_histories srg_histories_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.srg_histories
    ADD CONSTRAINT srg_histories_pkey PRIMARY KEY (id);


--
-- Name: taggings taggings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taggings
    ADD CONSTRAINT taggings_pkey PRIMARY KEY (id);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: taxon_commons taxon_commons_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_commons
    ADD CONSTRAINT taxon_commons_pkey PRIMARY KEY (id);


--
-- Name: taxon_concept_references taxon_concept_references_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_references
    ADD CONSTRAINT taxon_concept_references_pkey PRIMARY KEY (id);


--
-- Name: taxon_concept_versions taxon_concept_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_versions
    ADD CONSTRAINT taxon_concept_versions_pkey PRIMARY KEY (id);


--
-- Name: taxon_concepts taxon_concepts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_pkey PRIMARY KEY (id);


--
-- Name: taxon_instruments taxon_instruments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_instruments
    ADD CONSTRAINT taxon_instruments_pkey PRIMARY KEY (id);


--
-- Name: taxon_names taxon_names_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_names
    ADD CONSTRAINT taxon_names_pkey PRIMARY KEY (id);


--
-- Name: taxon_relationship_types taxon_relationship_types_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationship_types
    ADD CONSTRAINT taxon_relationship_types_pkey PRIMARY KEY (id);


--
-- Name: taxon_relationships taxon_relationships_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationships
    ADD CONSTRAINT taxon_relationships_pkey PRIMARY KEY (id);


--
-- Name: taxonomies taxonomies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxonomies
    ADD CONSTRAINT taxonomies_pkey PRIMARY KEY (id);


--
-- Name: term_trade_codes_pairs term_trade_codes_pairs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.term_trade_codes_pairs
    ADD CONSTRAINT term_trade_codes_pairs_pkey PRIMARY KEY (id);


--
-- Name: trade_annual_report_uploads trade_annual_report_uploads_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads
    ADD CONSTRAINT trade_annual_report_uploads_pkey PRIMARY KEY (id);


--
-- Name: trade_codes trade_codes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_codes
    ADD CONSTRAINT trade_codes_pkey PRIMARY KEY (id);


--
-- Name: trade_conversion_rules trade_conversion_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_conversion_rules
    ADD CONSTRAINT trade_conversion_rules_pkey PRIMARY KEY (id);


--
-- Name: trade_permits trade_permits_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_permits
    ADD CONSTRAINT trade_permits_pkey PRIMARY KEY (id);


--
-- Name: trade_plus_static trade_plus_static_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_plus_static
    ADD CONSTRAINT trade_plus_static_pkey PRIMARY KEY (id);


--
-- Name: trade_restriction_purposes trade_restriction_purposes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_purposes
    ADD CONSTRAINT trade_restriction_purposes_pkey PRIMARY KEY (id);


--
-- Name: trade_restriction_sources trade_restriction_sources_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_sources
    ADD CONSTRAINT trade_restriction_sources_pkey PRIMARY KEY (id);


--
-- Name: trade_restriction_terms trade_restriction_terms_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_terms
    ADD CONSTRAINT trade_restriction_terms_pkey PRIMARY KEY (id);


--
-- Name: trade_restrictions trade_restrictions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_pkey PRIMARY KEY (id);


--
-- Name: trade_sandbox_4163 trade_sandbox_4163_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_sandbox_4163
    ADD CONSTRAINT trade_sandbox_4163_pkey PRIMARY KEY (id);


--
-- Name: trade_sandbox_template trade_sandbox_template_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_sandbox_template
    ADD CONSTRAINT trade_sandbox_template_pkey PRIMARY KEY (id);


--
-- Name: trade_shipments trade_shipments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_pkey PRIMARY KEY (id);


--
-- Name: trade_taxon_concept_term_pairs trade_taxon_concept_code_pairs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_taxon_concept_term_pairs
    ADD CONSTRAINT trade_taxon_concept_code_pairs_pkey PRIMARY KEY (id);


--
-- Name: trade_taxon_groups trade_taxon_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_taxon_groups
    ADD CONSTRAINT trade_taxon_groups_pkey PRIMARY KEY (id);


--
-- Name: trade_trade_data_downloads trade_trade_data_downloads_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_trade_data_downloads
    ADD CONSTRAINT trade_trade_data_downloads_pkey PRIMARY KEY (id);


--
-- Name: trade_validation_errors trade_validation_errors_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_validation_errors
    ADD CONSTRAINT trade_validation_errors_pkey PRIMARY KEY (id);


--
-- Name: trade_validation_rules trade_validation_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_validation_rules
    ADD CONSTRAINT trade_validation_rules_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: versions versions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.versions
    ADD CONSTRAINT versions_pkey PRIMARY KEY (id);


--
-- Name: all_taxon_concepts_and_ancest_ancestor_taxon_concept_id_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX all_taxon_concepts_and_ancest_ancestor_taxon_concept_id_tax_idx ON public.all_taxon_concepts_and_ancestors_mview USING btree (ancestor_taxon_concept_id, taxon_concept_id);


--
-- Name: all_taxon_concepts_and_ancestors_mview_taxonomy_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX all_taxon_concepts_and_ancestors_mview_taxonomy_id_idx ON public.all_taxon_concepts_and_ancestors_mview USING btree (taxonomy_id);


--
-- Name: cites_species_listing_mview_tmp_countries_ids_ary_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX cites_species_listing_mview_tmp_countries_ids_ary_idx1 ON public.cites_species_listing_mview USING gin (countries_ids_ary);


--
-- Name: cms_species_listing_mview_tmp_countries_ids_ary_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX cms_species_listing_mview_tmp_countries_ids_ary_idx1 ON public.cms_species_listing_mview USING gin (countries_ids_ary);


--
-- Name: eu_species_listing_mview_tmp_countries_ids_ary_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX eu_species_listing_mview_tmp_countries_ids_ary_idx1 ON public.eu_species_listing_mview USING gin (countries_ids_ary);


--
-- Name: idx_ac_taxon_checklist_btree; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_checklist_btree ON public.auto_complete_taxon_concepts_mview USING btree (name_for_matching text_pattern_ops, type_of_match) WHERE (taxonomy_is_cites_eu AND show_in_checklist_ac);


--
-- Name: idx_ac_taxon_checklist_gist; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_checklist_gist ON public.auto_complete_taxon_concepts_mview USING gist (name_for_matching public.gist_trgm_ops) WHERE (taxonomy_is_cites_eu AND show_in_checklist_ac);


--
-- Name: idx_ac_taxon_gist; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_gist ON public.auto_complete_taxon_concepts_mview USING gist (name_for_matching public.gist_trgm_ops);


--
-- Name: idx_ac_taxon_splus_btree; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_splus_btree ON public.auto_complete_taxon_concepts_mview USING btree (name_for_matching text_pattern_ops, taxonomy_is_cites_eu, type_of_match) WHERE show_in_species_plus_ac;


--
-- Name: idx_ac_taxon_splus_gist; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_splus_gist ON public.auto_complete_taxon_concepts_mview USING gist (name_for_matching public.gist_trgm_ops) WHERE show_in_species_plus_ac;


--
-- Name: idx_ac_taxon_trade_ac_btree; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_trade_ac_btree ON public.auto_complete_taxon_concepts_mview USING btree (name_for_matching text_pattern_ops, type_of_match, taxonomy_is_cites_eu) WHERE show_in_trade_ac;


--
-- Name: idx_ac_taxon_trade_ac_gist; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_trade_ac_gist ON public.auto_complete_taxon_concepts_mview USING gist (name_for_matching public.gist_trgm_ops) WHERE show_in_trade_ac;


--
-- Name: idx_ac_taxon_trade_internal_btree; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_trade_internal_btree ON public.auto_complete_taxon_concepts_mview USING btree (name_for_matching text_pattern_ops, type_of_match, taxonomy_is_cites_eu) WHERE show_in_trade_internal_ac;


--
-- Name: idx_ac_taxon_trade_internal_gist; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ac_taxon_trade_internal_gist ON public.auto_complete_taxon_concepts_mview USING gist (name_for_matching public.gist_trgm_ops) WHERE show_in_trade_internal_ac;


--
-- Name: idx_events_where_is_current_on_type_subtype_designation; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_events_where_is_current_on_type_subtype_designation ON public.events USING btree (type, subtype, designation_id) WHERE is_current;


--
-- Name: idx_listing_changes_where_is_current_on_taxon_type_listing; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_listing_changes_where_is_current_on_taxon_type_listing ON public.listing_changes USING btree (taxon_concept_id, change_type_id, species_listing_id) WHERE is_current;


--
-- Name: idx_on_cites_suspension_notification_id_90078b2a64; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_cites_suspension_notification_id_90078b2a64 ON public.cites_suspension_confirmations USING btree (cites_suspension_notification_id);


--
-- Name: idx_on_created_by_id_9d0424fa57; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_created_by_id_9d0424fa57 ON public.nomenclature_change_reassignment_targets USING btree (created_by_id);


--
-- Name: idx_on_created_by_id_ac1c5548de; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_created_by_id_ac1c5548de ON public.nomenclature_change_output_reassignments USING btree (created_by_id);


--
-- Name: idx_on_is_current_type_taxon_concept_id_a115d056cb; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_is_current_type_taxon_concept_id_a115d056cb ON public.trade_restrictions USING btree (is_current, type, taxon_concept_id);


--
-- Name: idx_on_listing_change_id_geo_entity_id_35e8cc1641; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_listing_change_id_geo_entity_id_35e8cc1641 ON public.listing_distributions USING btree (listing_change_id, geo_entity_id);


--
-- Name: idx_on_nomenclature_change_input_id_837992fd1b; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_nomenclature_change_input_id_837992fd1b ON public.nomenclature_change_reassignments USING btree (nomenclature_change_input_id);


--
-- Name: idx_on_nomenclature_change_output_id_8c146310b0; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_nomenclature_change_output_id_8c146310b0 ON public.nomenclature_change_reassignment_targets USING btree (nomenclature_change_output_id);


--
-- Name: idx_on_nomenclature_change_output_id_90bc77e905; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_nomenclature_change_output_id_90bc77e905 ON public.nomenclature_change_output_reassignments USING btree (nomenclature_change_output_id);


--
-- Name: idx_on_nomenclature_change_reassignment_id_f4d2638734; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_nomenclature_change_reassignment_id_f4d2638734 ON public.nomenclature_change_reassignment_targets USING btree (nomenclature_change_reassignment_id);


--
-- Name: idx_on_other_taxon_concept_id_taxon_concept_id_taxo_2c9706896e; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_on_other_taxon_concept_id_taxon_concept_id_taxo_2c9706896e ON public.taxon_relationships USING btree (other_taxon_concept_id, taxon_concept_id, taxon_relationship_type_id);


--
-- Name: idx_on_reference_id_taxon_concept_id_0ee5d90f26; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_on_reference_id_taxon_concept_id_0ee5d90f26 ON public.taxon_concept_references USING btree (reference_id, taxon_concept_id);


--
-- Name: idx_on_taxon_concept_id_ancestor_taxon_concept_id_t_0c619cc4e3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_taxon_concept_id_ancestor_taxon_concept_id_t_0c619cc4e3 ON public.taxon_concepts_and_ancestors_mview USING btree (taxon_concept_id, ancestor_taxon_concept_id, tree_distance);


--
-- Name: idx_on_taxon_concept_id_change_type_id_species_list_cd32a66f6c; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_taxon_concept_id_change_type_id_species_list_cd32a66f6c ON public.listing_changes USING btree (taxon_concept_id, change_type_id, species_listing_id);


--
-- Name: idx_on_taxon_concept_id_other_taxon_concept_id_taxo_71c4a75896; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_on_taxon_concept_id_other_taxon_concept_id_taxo_71c4a75896 ON public.taxon_relationships USING btree (taxon_concept_id, other_taxon_concept_id, taxon_relationship_type_id);


--
-- Name: idx_on_taxon_concept_id_reference_id_762bf1e1d6; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_on_taxon_concept_id_reference_id_762bf1e1d6 ON public.taxon_concept_references USING btree (taxon_concept_id, reference_id);


--
-- Name: idx_on_taxon_concept_id_species_listing_id_change_t_46cc05e312; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_taxon_concept_id_species_listing_id_change_t_46cc05e312 ON public.listing_changes USING btree (taxon_concept_id, species_listing_id, change_type_id);


--
-- Name: idx_on_taxon_concept_id_term_id_7d43d0e952; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_on_taxon_concept_id_term_id_7d43d0e952 ON public.trade_taxon_concept_term_pairs USING btree (taxon_concept_id, term_id);


--
-- Name: idx_on_term_id_taxon_concept_id_884cb66b5b; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_on_term_id_taxon_concept_id_884cb66b5b ON public.trade_taxon_concept_term_pairs USING btree (term_id, taxon_concept_id);


--
-- Name: idx_on_updated_by_id_50171fe98f; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_updated_by_id_50171fe98f ON public.nomenclature_change_reassignment_targets USING btree (updated_by_id);


--
-- Name: idx_on_updated_by_id_b274995041; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_updated_by_id_b274995041 ON public.nomenclature_change_output_reassignments USING btree (updated_by_id);


--
-- Name: idx_on_user_id_response_status_created_at_04ab285ff3; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_on_user_id_response_status_created_at_04ab285ff3 ON public.api_requests USING btree (user_id, response_status, created_at);


--
-- Name: index_active_storage_attachments_on_blob_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_active_storage_attachments_on_blob_id ON public.active_storage_attachments USING btree (blob_id);


--
-- Name: index_active_storage_attachments_uniqueness; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_active_storage_attachments_uniqueness ON public.active_storage_attachments USING btree (record_type, record_id, name, blob_id);


--
-- Name: index_active_storage_blobs_on_key; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_active_storage_blobs_on_key ON public.active_storage_blobs USING btree (key);


--
-- Name: index_active_storage_variant_records_uniqueness; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_active_storage_variant_records_uniqueness ON public.active_storage_variant_records USING btree (blob_id, variation_digest);


--
-- Name: index_ahoy_events_on_name_and_time; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_ahoy_events_on_name_and_time ON public.ahoy_events USING btree (name, "time");


--
-- Name: index_ahoy_events_on_time; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_ahoy_events_on_time ON public.ahoy_events USING btree ("time");


--
-- Name: index_ahoy_events_on_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_ahoy_events_on_user_id ON public.ahoy_events USING btree (user_id);


--
-- Name: index_ahoy_events_on_visit_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_ahoy_events_on_visit_id ON public.ahoy_events USING btree (visit_id);


--
-- Name: index_ahoy_visits_on_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_ahoy_visits_on_user_id ON public.ahoy_visits USING btree (user_id);


--
-- Name: index_ahoy_visits_on_visitor_id_and_started_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_ahoy_visits_on_visitor_id_and_started_at ON public.ahoy_visits USING btree (visitor_id, started_at);


--
-- Name: index_annotations_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_annotations_on_created_by_id ON public.annotations USING btree (created_by_id);


--
-- Name: index_annotations_on_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_annotations_on_event_id ON public.annotations USING btree (event_id);


--
-- Name: index_annotations_on_original_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_annotations_on_original_id ON public.annotations USING btree (original_id);


--
-- Name: index_annotations_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_annotations_on_updated_by_id ON public.annotations USING btree (updated_by_id);


--
-- Name: index_api_requests_on_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_api_requests_on_created_at ON public.api_requests USING btree (created_at);


--
-- Name: index_bulk_downloads_on_requestor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_bulk_downloads_on_requestor_id ON public.bulk_downloads USING btree (requestor_id);


--
-- Name: index_bulk_downloads_on_requestor_id_and_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_bulk_downloads_on_requestor_id_and_id ON public.bulk_downloads USING btree (requestor_id, id);


--
-- Name: index_change_types_on_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_change_types_on_designation_id ON public.change_types USING btree (designation_id);


--
-- Name: index_change_types_on_designation_id_and_display_name_en; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_change_types_on_designation_id_and_display_name_en ON public.change_types USING btree (designation_id, display_name_en);


--
-- Name: index_change_types_on_designation_id_and_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_change_types_on_designation_id_and_name ON public.change_types USING btree (designation_id, name);


--
-- Name: index_change_types_on_display_name_en_and_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_change_types_on_display_name_en_and_designation_id ON public.change_types USING btree (display_name_en, designation_id);


--
-- Name: index_change_types_on_name_and_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_change_types_on_name_and_designation_id ON public.change_types USING btree (name, designation_id);


--
-- Name: index_citation_geo_entities_on_geo_entity_id_citation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_citation_geo_entities_on_geo_entity_id_citation_id ON public.document_citation_geo_entities USING btree (geo_entity_id, document_citation_id);


--
-- Name: index_citation_taxon_concepts_on_taxon_concept_id_citation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_citation_taxon_concepts_on_taxon_concept_id_citation_id ON public.document_citation_taxon_concepts USING btree (taxon_concept_id, document_citation_id);


--
-- Name: index_cites_processes_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_cites_processes_on_taxon_concept_id ON public.cites_processes USING btree (taxon_concept_id);


--
-- Name: index_cites_suspension_confirmations_on_cites_suspension_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_cites_suspension_confirmations_on_cites_suspension_id ON public.cites_suspension_confirmations USING btree (cites_suspension_id);


--
-- Name: index_combinations_mview_on_document_id_tc_id_ge_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_combinations_mview_on_document_id_tc_id_ge_id ON public.document_citations_mview USING btree (document_id, taxon_concept_id, geo_entity_id, id);


--
-- Name: index_comments_on_commentable_and_comment_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_comments_on_commentable_and_comment_type ON public.comments USING btree (commentable_id, commentable_type, comment_type);


--
-- Name: index_comments_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_comments_on_created_by_id ON public.comments USING btree (created_by_id);


--
-- Name: index_comments_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_comments_on_updated_by_id ON public.comments USING btree (updated_by_id);


--
-- Name: index_common_names_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_common_names_on_created_by_id ON public.common_names USING btree (created_by_id);


--
-- Name: index_common_names_on_language_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_common_names_on_language_id ON public.common_names USING btree (language_id);


--
-- Name: index_common_names_on_language_id_and_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_common_names_on_language_id_and_name ON public.common_names USING btree (language_id, name);


--
-- Name: index_common_names_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_common_names_on_updated_by_id ON public.common_names USING btree (updated_by_id);


--
-- Name: index_designation_geo_entities_on_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_designation_geo_entities_on_designation_id ON public.designation_geo_entities USING btree (designation_id);


--
-- Name: index_designation_geo_entities_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_designation_geo_entities_on_geo_entity_id ON public.designation_geo_entities USING btree (geo_entity_id);


--
-- Name: index_designations_on_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_designations_on_name ON public.designations USING btree (name);


--
-- Name: index_designations_on_taxonomy_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_designations_on_taxonomy_id ON public.designations USING btree (taxonomy_id);


--
-- Name: index_distribution_references_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distribution_references_on_created_by_id ON public.distribution_references USING btree (created_by_id);


--
-- Name: index_distribution_references_on_distribution_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distribution_references_on_distribution_id ON public.distribution_references USING btree (distribution_id);


--
-- Name: index_distribution_references_on_reference_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distribution_references_on_reference_id ON public.distribution_references USING btree (reference_id);


--
-- Name: index_distribution_references_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distribution_references_on_updated_by_id ON public.distribution_references USING btree (updated_by_id);


--
-- Name: index_distribution_refs_on_distribution_id_reference_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_distribution_refs_on_distribution_id_reference_id ON public.distribution_references USING btree (distribution_id, reference_id);


--
-- Name: index_distributions_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distributions_on_created_by_id ON public.distributions USING btree (created_by_id);


--
-- Name: index_distributions_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distributions_on_geo_entity_id ON public.distributions USING btree (geo_entity_id);


--
-- Name: index_distributions_on_geo_entity_id_and_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_distributions_on_geo_entity_id_and_taxon_concept_id ON public.distributions USING btree (geo_entity_id, taxon_concept_id);


--
-- Name: index_distributions_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distributions_on_taxon_concept_id ON public.distributions USING btree (taxon_concept_id);


--
-- Name: index_distributions_on_taxon_concept_id_and_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_distributions_on_taxon_concept_id_and_geo_entity_id ON public.distributions USING btree (taxon_concept_id, geo_entity_id);


--
-- Name: index_distributions_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_distributions_on_updated_by_id ON public.distributions USING btree (updated_by_id);


--
-- Name: index_document_citation_geo_entities_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_geo_entities_on_created_by_id ON public.document_citation_geo_entities USING btree (created_by_id);


--
-- Name: index_document_citation_geo_entities_on_document_citation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_geo_entities_on_document_citation_id ON public.document_citation_geo_entities USING btree (document_citation_id);


--
-- Name: index_document_citation_geo_entities_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_geo_entities_on_geo_entity_id ON public.document_citation_geo_entities USING btree (geo_entity_id);


--
-- Name: index_document_citation_geo_entities_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_geo_entities_on_updated_by_id ON public.document_citation_geo_entities USING btree (updated_by_id);


--
-- Name: index_document_citation_taxon_concepts_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_taxon_concepts_on_created_by_id ON public.document_citation_taxon_concepts USING btree (created_by_id);


--
-- Name: index_document_citation_taxon_concepts_on_document_citation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_taxon_concepts_on_document_citation_id ON public.document_citation_taxon_concepts USING btree (document_citation_id);


--
-- Name: index_document_citation_taxon_concepts_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_taxon_concepts_on_taxon_concept_id ON public.document_citation_taxon_concepts USING btree (taxon_concept_id);


--
-- Name: index_document_citation_taxon_concepts_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citation_taxon_concepts_on_updated_by_id ON public.document_citation_taxon_concepts USING btree (updated_by_id);


--
-- Name: index_document_citations_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citations_on_created_by_id ON public.document_citations USING btree (created_by_id);


--
-- Name: index_document_citations_on_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citations_on_document_id ON public.document_citations USING btree (document_id);


--
-- Name: index_document_citations_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_citations_on_updated_by_id ON public.document_citations USING btree (updated_by_id);


--
-- Name: index_document_tags_documents_composite; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_tags_documents_composite ON public.document_tags_documents USING btree (document_id, document_tag_id);


--
-- Name: index_document_tags_documents_on_document_tag_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_document_tags_documents_on_document_tag_id ON public.document_tags_documents USING btree (document_tag_id);


--
-- Name: index_documents_mview_on_date_raw; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_mview_on_date_raw ON public.api_documents_mview USING btree (date_raw);


--
-- Name: index_documents_mview_on_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_mview_on_event_id ON public.api_documents_mview USING btree (event_id);


--
-- Name: index_documents_mview_on_title_to_ts_vector; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_mview_on_title_to_ts_vector ON public.api_documents_mview USING gin (to_tsvector('simple'::regconfig, COALESCE(title, ''::text)));


--
-- Name: index_documents_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_created_by_id ON public.documents USING btree (created_by_id);


--
-- Name: index_documents_on_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_designation_id ON public.documents USING btree (designation_id);


--
-- Name: index_documents_on_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_event_id ON public.documents USING btree (event_id);


--
-- Name: index_documents_on_language_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_language_id ON public.documents USING btree (language_id);


--
-- Name: index_documents_on_language_id_and_primary_language_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_documents_on_language_id_and_primary_language_document_id ON public.documents USING btree (language_id, primary_language_document_id);


--
-- Name: index_documents_on_original_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_original_id ON public.documents USING btree (original_id);


--
-- Name: index_documents_on_primary_language_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_primary_language_document_id ON public.documents USING btree (primary_language_document_id);


--
-- Name: index_documents_on_title_to_ts_vector; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_title_to_ts_vector ON public.documents USING gin (to_tsvector('simple'::regconfig, COALESCE(title, ''::text)));


--
-- Name: index_documents_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_documents_on_updated_by_id ON public.documents USING btree (updated_by_id);


--
-- Name: index_eu_decision_confirmations_on_eu_decision_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decision_confirmations_on_eu_decision_id ON public.eu_decision_confirmations USING btree (eu_decision_id);


--
-- Name: index_eu_decision_confirmations_on_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decision_confirmations_on_event_id ON public.eu_decision_confirmations USING btree (event_id);


--
-- Name: index_eu_decision_types_on_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_eu_decision_types_on_name ON public.eu_decision_types USING btree (name);


--
-- Name: index_eu_decisions_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_created_by_id ON public.eu_decisions USING btree (created_by_id);


--
-- Name: index_eu_decisions_on_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_document_id ON public.eu_decisions USING btree (document_id);


--
-- Name: index_eu_decisions_on_end_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_end_event_id ON public.eu_decisions USING btree (end_event_id);


--
-- Name: index_eu_decisions_on_eu_decision_type_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_eu_decision_type_id ON public.eu_decisions USING btree (eu_decision_type_id);


--
-- Name: index_eu_decisions_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_geo_entity_id ON public.eu_decisions USING btree (geo_entity_id);


--
-- Name: index_eu_decisions_on_source_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_source_id ON public.eu_decisions USING btree (source_id);


--
-- Name: index_eu_decisions_on_srg_history_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_srg_history_id ON public.eu_decisions USING btree (srg_history_id);


--
-- Name: index_eu_decisions_on_start_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_start_event_id ON public.eu_decisions USING btree (start_event_id);


--
-- Name: index_eu_decisions_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_taxon_concept_id ON public.eu_decisions USING btree (taxon_concept_id);


--
-- Name: index_eu_decisions_on_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_term_id ON public.eu_decisions USING btree (term_id);


--
-- Name: index_eu_decisions_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_eu_decisions_on_updated_by_id ON public.eu_decisions USING btree (updated_by_id);


--
-- Name: index_events_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_events_on_created_by_id ON public.events USING btree (created_by_id);


--
-- Name: index_events_on_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_events_on_designation_id ON public.events USING btree (designation_id);


--
-- Name: index_events_on_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_events_on_name ON public.events USING btree (name);


--
-- Name: index_events_on_type_and_subtype_and_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_events_on_type_and_subtype_and_designation_id ON public.events USING btree (type, subtype, designation_id);


--
-- Name: index_events_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_events_on_updated_by_id ON public.events USING btree (updated_by_id);


--
-- Name: index_geo_entities_on_geo_entity_type_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_geo_entities_on_geo_entity_type_id ON public.geo_entities USING btree (geo_entity_type_id);


--
-- Name: index_geo_entities_on_iso_code2; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_geo_entities_on_iso_code2 ON public.geo_entities USING btree (iso_code2) WHERE (iso_code2 IS NOT NULL);


--
-- Name: index_geo_entities_on_iso_code3; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_geo_entities_on_iso_code3 ON public.geo_entities USING btree (iso_code3) WHERE (iso_code3 IS NOT NULL);


--
-- Name: index_geo_relationships_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_geo_relationships_on_geo_entity_id ON public.geo_relationships USING btree (geo_entity_id);


--
-- Name: index_geo_relationships_on_geo_relationship_type_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_geo_relationships_on_geo_relationship_type_id ON public.geo_relationships USING btree (geo_relationship_type_id);


--
-- Name: index_geo_relationships_on_other_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_geo_relationships_on_other_geo_entity_id ON public.geo_relationships USING btree (other_geo_entity_id);


--
-- Name: index_instruments_on_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_instruments_on_designation_id ON public.instruments USING btree (designation_id);


--
-- Name: index_instruments_on_designation_id_and_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_instruments_on_designation_id_and_name ON public.instruments USING btree (designation_id, name);


--
-- Name: index_instruments_on_name_and_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_instruments_on_name_and_designation_id ON public.instruments USING btree (name, designation_id);


--
-- Name: index_languages_on_iso_code1; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_languages_on_iso_code1 ON public.languages USING btree (iso_code1) WHERE (iso_code1 IS NOT NULL);


--
-- Name: index_languages_on_iso_code3; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_languages_on_iso_code3 ON public.languages USING btree (iso_code3);


--
-- Name: index_listing_changes_on_annotation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_annotation_id ON public.listing_changes USING btree (annotation_id);


--
-- Name: index_listing_changes_on_change_type_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_change_type_id ON public.listing_changes USING btree (change_type_id);


--
-- Name: index_listing_changes_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_created_by_id ON public.listing_changes USING btree (created_by_id);


--
-- Name: index_listing_changes_on_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_event_id ON public.listing_changes USING btree (event_id);


--
-- Name: index_listing_changes_on_hash_annotation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_hash_annotation_id ON public.listing_changes USING btree (hash_annotation_id);


--
-- Name: index_listing_changes_on_inclusion_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_inclusion_taxon_concept_id ON public.listing_changes USING btree (inclusion_taxon_concept_id);


--
-- Name: index_listing_changes_on_original_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_original_id ON public.listing_changes USING btree (original_id);


--
-- Name: index_listing_changes_on_parent_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_parent_id ON public.listing_changes USING btree (parent_id);


--
-- Name: index_listing_changes_on_species_listing_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_species_listing_id ON public.listing_changes USING btree (species_listing_id);


--
-- Name: index_listing_changes_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_taxon_concept_id ON public.listing_changes USING btree (taxon_concept_id);


--
-- Name: index_listing_changes_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_changes_on_updated_by_id ON public.listing_changes USING btree (updated_by_id);


--
-- Name: index_listing_distributions_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_distributions_on_created_by_id ON public.listing_distributions USING btree (created_by_id);


--
-- Name: index_listing_distributions_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_distributions_on_geo_entity_id ON public.listing_distributions USING btree (geo_entity_id);


--
-- Name: index_listing_distributions_on_listing_change_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_distributions_on_listing_change_id ON public.listing_distributions USING btree (listing_change_id);


--
-- Name: index_listing_distributions_on_original_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_distributions_on_original_id ON public.listing_distributions USING btree (original_id);


--
-- Name: index_listing_distributions_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_listing_distributions_on_updated_by_id ON public.listing_distributions USING btree (updated_by_id);


--
-- Name: index_nomenclature_change_inputs_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_inputs_on_created_by_id ON public.nomenclature_change_inputs USING btree (created_by_id);


--
-- Name: index_nomenclature_change_inputs_on_nomenclature_change_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_inputs_on_nomenclature_change_id ON public.nomenclature_change_inputs USING btree (nomenclature_change_id);


--
-- Name: index_nomenclature_change_inputs_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_inputs_on_taxon_concept_id ON public.nomenclature_change_inputs USING btree (taxon_concept_id);


--
-- Name: index_nomenclature_change_inputs_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_inputs_on_updated_by_id ON public.nomenclature_change_inputs USING btree (updated_by_id);


--
-- Name: index_nomenclature_change_outputs_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_created_by_id ON public.nomenclature_change_outputs USING btree (created_by_id);


--
-- Name: index_nomenclature_change_outputs_on_new_parent_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_new_parent_id ON public.nomenclature_change_outputs USING btree (new_parent_id);


--
-- Name: index_nomenclature_change_outputs_on_new_rank_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_new_rank_id ON public.nomenclature_change_outputs USING btree (new_rank_id);


--
-- Name: index_nomenclature_change_outputs_on_new_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_new_taxon_concept_id ON public.nomenclature_change_outputs USING btree (new_taxon_concept_id);


--
-- Name: index_nomenclature_change_outputs_on_nomenclature_change_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_nomenclature_change_id ON public.nomenclature_change_outputs USING btree (nomenclature_change_id);


--
-- Name: index_nomenclature_change_outputs_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_taxon_concept_id ON public.nomenclature_change_outputs USING btree (taxon_concept_id);


--
-- Name: index_nomenclature_change_outputs_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_outputs_on_updated_by_id ON public.nomenclature_change_outputs USING btree (updated_by_id);


--
-- Name: index_nomenclature_change_reassignments_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_reassignments_on_created_by_id ON public.nomenclature_change_reassignments USING btree (created_by_id);


--
-- Name: index_nomenclature_change_reassignments_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_change_reassignments_on_updated_by_id ON public.nomenclature_change_reassignments USING btree (updated_by_id);


--
-- Name: index_nomenclature_changes_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_changes_on_created_by_id ON public.nomenclature_changes USING btree (created_by_id);


--
-- Name: index_nomenclature_changes_on_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_changes_on_event_id ON public.nomenclature_changes USING btree (event_id);


--
-- Name: index_nomenclature_changes_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_nomenclature_changes_on_updated_by_id ON public.nomenclature_changes USING btree (updated_by_id);


--
-- Name: index_preset_tags_on_name_upper_model; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_preset_tags_on_name_upper_model ON public.preset_tags USING btree (name, upper((model)::text));


--
-- Name: index_proposal_details_on_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_proposal_details_on_document_id ON public.proposal_details USING btree (document_id);


--
-- Name: index_proposal_details_on_proposal_outcome_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_proposal_details_on_proposal_outcome_id ON public.proposal_details USING btree (proposal_outcome_id);


--
-- Name: index_ranks_on_display_name_en; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_ranks_on_display_name_en ON public.ranks USING btree (display_name_en);


--
-- Name: index_ranks_on_display_name_es; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_ranks_on_display_name_es ON public.ranks USING btree (display_name_es) WHERE (display_name_es IS NOT NULL);


--
-- Name: index_ranks_on_display_name_fr; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_ranks_on_display_name_fr ON public.ranks USING btree (display_name_fr) WHERE (display_name_fr IS NOT NULL);


--
-- Name: index_ranks_on_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_ranks_on_name ON public.ranks USING btree (name);


--
-- Name: index_references_on_citation_checksum; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_references_on_citation_checksum ON public."references" USING btree (((md5(citation) || "left"(citation, 992))));


--
-- Name: index_references_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_references_on_created_by_id ON public."references" USING btree (created_by_id);


--
-- Name: index_references_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_references_on_updated_by_id ON public."references" USING btree (updated_by_id);


--
-- Name: index_review_details_on_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_review_details_on_document_id ON public.review_details USING btree (document_id);


--
-- Name: index_review_details_on_process_stage_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_review_details_on_process_stage_id ON public.review_details USING btree (process_stage_id);


--
-- Name: index_review_details_on_review_phase_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_review_details_on_review_phase_id ON public.review_details USING btree (review_phase_id);


--
-- Name: index_species_listings_on_abbreviation_and_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_species_listings_on_abbreviation_and_designation_id ON public.species_listings USING btree (abbreviation, designation_id);


--
-- Name: index_species_listings_on_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_species_listings_on_designation_id ON public.species_listings USING btree (designation_id);


--
-- Name: index_species_listings_on_designation_id_and_abbreviation; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_species_listings_on_designation_id_and_abbreviation ON public.species_listings USING btree (designation_id, abbreviation);


--
-- Name: index_species_listings_on_designation_id_and_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_species_listings_on_designation_id_and_name ON public.species_listings USING btree (designation_id, name);


--
-- Name: index_species_listings_on_name_and_designation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_species_listings_on_name_and_designation_id ON public.species_listings USING btree (name, designation_id);


--
-- Name: index_srg_histories_on_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_srg_histories_on_name ON public.srg_histories USING btree (name);


--
-- Name: index_taggings_on_tag_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taggings_on_tag_id ON public.taggings USING btree (tag_id);


--
-- Name: index_taggings_on_tag_id_and_taggable_id_and_taggable_type; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_taggings_on_tag_id_and_taggable_id_and_taggable_type ON public.taggings USING btree (tag_id, taggable_id, taggable_type);


--
-- Name: INDEX index_taggings_on_tag_id_and_taggable_id_and_taggable_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX public.index_taggings_on_tag_id_and_taggable_id_and_taggable_type IS 'Strictly this table is managed by acts_as_taggable_on - remove this index if it becomes an issue';


--
-- Name: index_taggings_on_taggable_id_and_taggable_type_and_context; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taggings_on_taggable_id_and_taggable_type_and_context ON public.taggings USING btree (taggable_id, taggable_type, context);


--
-- Name: index_taxon_commons_on_common_name_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_commons_on_common_name_id ON public.taxon_commons USING btree (common_name_id);


--
-- Name: index_taxon_commons_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_commons_on_created_by_id ON public.taxon_commons USING btree (created_by_id);


--
-- Name: index_taxon_commons_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_commons_on_taxon_concept_id ON public.taxon_commons USING btree (taxon_concept_id);


--
-- Name: index_taxon_commons_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_commons_on_updated_by_id ON public.taxon_commons USING btree (updated_by_id);


--
-- Name: index_taxon_concept_references_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_references_on_created_by_id ON public.taxon_concept_references USING btree (created_by_id);


--
-- Name: index_taxon_concept_references_on_reference_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_references_on_reference_id ON public.taxon_concept_references USING btree (reference_id);


--
-- Name: index_taxon_concept_references_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_references_on_taxon_concept_id ON public.taxon_concept_references USING btree (taxon_concept_id);


--
-- Name: index_taxon_concept_references_on_tc_id_is_std_is_cascaded; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_taxon_concept_references_on_tc_id_is_std_is_cascaded ON public.taxon_concept_references USING btree (taxon_concept_id, reference_id, is_standard, is_cascaded);


--
-- Name: index_taxon_concept_references_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_references_on_updated_by_id ON public.taxon_concept_references USING btree (updated_by_id);


--
-- Name: index_taxon_concept_versions_on_event; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_versions_on_event ON public.taxon_concept_versions USING btree (event);


--
-- Name: index_taxon_concept_versions_on_full_name_and_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_versions_on_full_name_and_created_at ON public.taxon_concept_versions USING btree (full_name, created_at);


--
-- Name: index_taxon_concept_versions_on_taxonomy_name_and_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concept_versions_on_taxonomy_name_and_created_at ON public.taxon_concept_versions USING btree (taxonomy_name, created_at);


--
-- Name: index_taxon_concepts_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_created_by_id ON public.taxon_concepts USING btree (created_by_id);


--
-- Name: index_taxon_concepts_on_created_by_id_and_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_created_by_id_and_updated_by_id ON public.taxon_concepts USING btree (created_by_id, updated_by_id);


--
-- Name: index_taxon_concepts_on_dependents_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_dependents_updated_by_id ON public.taxon_concepts USING btree (dependents_updated_by_id);


--
-- Name: index_taxon_concepts_on_full_name; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_full_name ON public.taxon_concepts USING btree (upper((full_name)::text) text_pattern_ops);


--
-- Name: index_taxon_concepts_on_legacy_trade_code; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_legacy_trade_code ON public.taxon_concepts USING btree (legacy_trade_code);


--
-- Name: index_taxon_concepts_on_name_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_name_status ON public.taxon_concepts USING btree (name_status);


--
-- Name: index_taxon_concepts_on_parent_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_parent_id ON public.taxon_concepts USING btree (parent_id);


--
-- Name: index_taxon_concepts_on_rank_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_rank_id ON public.taxon_concepts USING btree (rank_id);


--
-- Name: index_taxon_concepts_on_taxon_name_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_taxon_name_id ON public.taxon_concepts USING btree (taxon_name_id);


--
-- Name: index_taxon_concepts_on_taxonomy_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_taxonomy_id ON public.taxon_concepts USING btree (taxonomy_id);


--
-- Name: index_taxon_concepts_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_concepts_on_updated_by_id ON public.taxon_concepts USING btree (updated_by_id);


--
-- Name: index_taxon_instruments_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_instruments_on_created_by_id ON public.taxon_instruments USING btree (created_by_id);


--
-- Name: index_taxon_instruments_on_instrument_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_instruments_on_instrument_id ON public.taxon_instruments USING btree (instrument_id);


--
-- Name: index_taxon_instruments_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_instruments_on_taxon_concept_id ON public.taxon_instruments USING btree (taxon_concept_id);


--
-- Name: index_taxon_instruments_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_instruments_on_updated_by_id ON public.taxon_instruments USING btree (updated_by_id);


--
-- Name: index_taxon_relationships_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_relationships_on_created_by_id ON public.taxon_relationships USING btree (created_by_id);


--
-- Name: index_taxon_relationships_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_relationships_on_taxon_concept_id ON public.taxon_relationships USING btree (taxon_concept_id);


--
-- Name: index_taxon_relationships_on_taxon_relationship_type_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_relationships_on_taxon_relationship_type_id ON public.taxon_relationships USING btree (taxon_relationship_type_id);


--
-- Name: index_taxon_relationships_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_taxon_relationships_on_updated_by_id ON public.taxon_relationships USING btree (updated_by_id);


--
-- Name: index_taxonomies_on_name; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_taxonomies_on_name ON public.taxonomies USING btree (name);


--
-- Name: index_term_trade_codes_pairs_on_term_and_trade_code; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_term_trade_codes_pairs_on_term_and_trade_code ON public.term_trade_codes_pairs USING btree (term_id, trade_code_id, trade_code_type);


--
-- Name: index_term_trade_codes_pairs_on_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_term_trade_codes_pairs_on_term_id ON public.term_trade_codes_pairs USING btree (term_id);


--
-- Name: index_term_trade_codes_pairs_on_term_id_and_trade_code_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_term_trade_codes_pairs_on_term_id_and_trade_code_id ON public.term_trade_codes_pairs USING btree (term_id, trade_code_id);


--
-- Name: index_term_trade_codes_pairs_on_trade_code_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_term_trade_codes_pairs_on_trade_code_id ON public.term_trade_codes_pairs USING btree (trade_code_id);


--
-- Name: index_term_trade_codes_pairs_on_trade_code_id_and_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_term_trade_codes_pairs_on_trade_code_id_and_term_id ON public.term_trade_codes_pairs USING btree (trade_code_id, term_id);


--
-- Name: index_trade_annual_report_uploads_on_created_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_annual_report_uploads_on_created_by ON public.trade_annual_report_uploads USING btree (created_by);


--
-- Name: index_trade_annual_report_uploads_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_annual_report_uploads_on_created_by_id ON public.trade_annual_report_uploads USING btree (created_by_id);


--
-- Name: index_trade_annual_report_uploads_on_trading_country_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_annual_report_uploads_on_trading_country_id ON public.trade_annual_report_uploads USING btree (trading_country_id);


--
-- Name: index_trade_annual_report_uploads_on_updated_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_annual_report_uploads_on_updated_by ON public.trade_annual_report_uploads USING btree (updated_by);


--
-- Name: index_trade_annual_report_uploads_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_annual_report_uploads_on_updated_by_id ON public.trade_annual_report_uploads USING btree (updated_by_id);


--
-- Name: index_trade_codes_on_code_and_type; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_trade_codes_on_code_and_type ON public.trade_codes USING btree (code, type);


--
-- Name: index_trade_conversion_rules_on_rule_type_and_rule_priority; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_trade_conversion_rules_on_rule_type_and_rule_priority ON public.trade_conversion_rules USING btree (rule_type, rule_priority);


--
-- Name: index_trade_plus_complete_mview_on_appendix; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_appendix ON public.trade_plus_complete_mview USING btree (appendix);


--
-- Name: index_trade_plus_complete_mview_on_exporter_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_exporter_id ON public.trade_plus_complete_mview USING btree (exporter_id);


--
-- Name: index_trade_plus_complete_mview_on_exporter_iso; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_exporter_iso ON public.trade_plus_complete_mview USING btree (exporter_iso);


--
-- Name: index_trade_plus_complete_mview_on_group_code; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_group_code ON public.trade_plus_complete_mview USING btree (group_code);


--
-- Name: index_trade_plus_complete_mview_on_id; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_trade_plus_complete_mview_on_id ON public.trade_plus_complete_mview USING btree (id);


--
-- Name: index_trade_plus_complete_mview_on_importer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_importer_id ON public.trade_plus_complete_mview USING btree (importer_id);


--
-- Name: index_trade_plus_complete_mview_on_importer_iso; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_importer_iso ON public.trade_plus_complete_mview USING btree (importer_iso);


--
-- Name: index_trade_plus_complete_mview_on_origin_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_origin_id ON public.trade_plus_complete_mview USING btree (origin_id);


--
-- Name: index_trade_plus_complete_mview_on_origin_iso; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_origin_iso ON public.trade_plus_complete_mview USING btree (origin_iso);


--
-- Name: index_trade_plus_complete_mview_on_purpose_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_purpose_id ON public.trade_plus_complete_mview USING btree (purpose_id);


--
-- Name: index_trade_plus_complete_mview_on_source_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_source_id ON public.trade_plus_complete_mview USING btree (source_id);


--
-- Name: index_trade_plus_complete_mview_on_taxon_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_taxon_id ON public.trade_plus_complete_mview USING btree (taxon_id);


--
-- Name: index_trade_plus_complete_mview_on_term_code; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_term_code ON public.trade_plus_complete_mview USING btree (term_code);


--
-- Name: index_trade_plus_complete_mview_on_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_term_id ON public.trade_plus_complete_mview USING btree (term_id);


--
-- Name: index_trade_plus_complete_mview_on_unit_code; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_unit_code ON public.trade_plus_complete_mview USING btree (unit_code);


--
-- Name: index_trade_plus_complete_mview_on_unit_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_unit_id ON public.trade_plus_complete_mview USING btree (unit_id);


--
-- Name: index_trade_plus_complete_mview_on_year; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year ON public.trade_plus_complete_mview USING brin (year);


--
-- Name: index_trade_plus_complete_mview_on_year_btree; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_btree ON public.trade_plus_complete_mview USING btree (year);


--
-- Name: index_trade_plus_complete_mview_on_year_exporter_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_exporter_id ON public.trade_plus_complete_mview USING brin (year, exporter_id);


--
-- Name: index_trade_plus_complete_mview_on_year_importer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_importer_id ON public.trade_plus_complete_mview USING brin (year, importer_id);


--
-- Name: index_trade_plus_complete_mview_on_year_origin_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_origin_id ON public.trade_plus_complete_mview USING brin (year, origin_id);


--
-- Name: index_trade_plus_complete_mview_on_year_purpose_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_purpose_id ON public.trade_plus_complete_mview USING brin (year, purpose_id);


--
-- Name: index_trade_plus_complete_mview_on_year_source_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_source_id ON public.trade_plus_complete_mview USING brin (year, source_id);


--
-- Name: index_trade_plus_complete_mview_on_year_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_term_id ON public.trade_plus_complete_mview USING brin (year, term_id);


--
-- Name: index_trade_plus_complete_mview_on_year_unit_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_plus_complete_mview_on_year_unit_id ON public.trade_plus_complete_mview USING brin (year, unit_id);


--
-- Name: index_trade_restriction_purposes_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_purposes_on_created_by_id ON public.trade_restriction_purposes USING btree (created_by_id);


--
-- Name: index_trade_restriction_purposes_on_purpose_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_purposes_on_purpose_id ON public.trade_restriction_purposes USING btree (purpose_id);


--
-- Name: index_trade_restriction_purposes_on_trade_restriction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_purposes_on_trade_restriction_id ON public.trade_restriction_purposes USING btree (trade_restriction_id);


--
-- Name: index_trade_restriction_purposes_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_purposes_on_updated_by_id ON public.trade_restriction_purposes USING btree (updated_by_id);


--
-- Name: index_trade_restriction_sources_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_sources_on_created_by_id ON public.trade_restriction_sources USING btree (created_by_id);


--
-- Name: index_trade_restriction_sources_on_source_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_sources_on_source_id ON public.trade_restriction_sources USING btree (source_id);


--
-- Name: index_trade_restriction_sources_on_trade_restriction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_sources_on_trade_restriction_id ON public.trade_restriction_sources USING btree (trade_restriction_id);


--
-- Name: index_trade_restriction_sources_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_sources_on_updated_by_id ON public.trade_restriction_sources USING btree (updated_by_id);


--
-- Name: index_trade_restriction_terms_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_terms_on_created_by_id ON public.trade_restriction_terms USING btree (created_by_id);


--
-- Name: index_trade_restriction_terms_on_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_terms_on_term_id ON public.trade_restriction_terms USING btree (term_id);


--
-- Name: index_trade_restriction_terms_on_trade_restriction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_terms_on_trade_restriction_id ON public.trade_restriction_terms USING btree (trade_restriction_id);


--
-- Name: index_trade_restriction_terms_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restriction_terms_on_updated_by_id ON public.trade_restriction_terms USING btree (updated_by_id);


--
-- Name: index_trade_restrictions_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_created_by_id ON public.trade_restrictions USING btree (created_by_id);


--
-- Name: index_trade_restrictions_on_end_notification_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_end_notification_id ON public.trade_restrictions USING btree (end_notification_id);


--
-- Name: index_trade_restrictions_on_geo_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_geo_entity_id ON public.trade_restrictions USING btree (geo_entity_id);


--
-- Name: index_trade_restrictions_on_start_notification_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_start_notification_id ON public.trade_restrictions USING btree (start_notification_id);


--
-- Name: index_trade_restrictions_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_taxon_concept_id ON public.trade_restrictions USING btree (taxon_concept_id);


--
-- Name: index_trade_restrictions_on_unit_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_unit_id ON public.trade_restrictions USING btree (unit_id);


--
-- Name: index_trade_restrictions_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_restrictions_on_updated_by_id ON public.trade_restrictions USING btree (updated_by_id);


--
-- Name: index_trade_shipments_on_appendix; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_appendix ON public.trade_shipments USING btree (appendix);


--
-- Name: index_trade_shipments_on_country_of_origin_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_country_of_origin_id ON public.trade_shipments USING btree (country_of_origin_id);


--
-- Name: index_trade_shipments_on_created_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_created_by_id ON public.trade_shipments USING btree (created_by_id);


--
-- Name: index_trade_shipments_on_created_by_id_and_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_created_by_id_and_updated_by_id ON public.trade_shipments USING btree (created_by_id, updated_by_id);


--
-- Name: index_trade_shipments_on_export_permits_ids; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_export_permits_ids ON public.trade_shipments USING gin (export_permits_ids);


--
-- Name: index_trade_shipments_on_exporter_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_exporter_id ON public.trade_shipments USING btree (exporter_id);


--
-- Name: index_trade_shipments_on_ifs_permits_ids; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_ifs_permits_ids ON public.trade_shipments USING gin (ifs_permits_ids);


--
-- Name: index_trade_shipments_on_import_permits_ids; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_import_permits_ids ON public.trade_shipments USING gin (import_permits_ids);


--
-- Name: index_trade_shipments_on_importer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_importer_id ON public.trade_shipments USING btree (importer_id);


--
-- Name: index_trade_shipments_on_origin_permits_ids; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_origin_permits_ids ON public.trade_shipments USING gin (origin_permits_ids);


--
-- Name: index_trade_shipments_on_purpose_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_purpose_id ON public.trade_shipments USING btree (purpose_id);


--
-- Name: index_trade_shipments_on_quantity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_quantity ON public.trade_shipments USING btree (quantity);


--
-- Name: index_trade_shipments_on_reported_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_reported_taxon_concept_id ON public.trade_shipments USING btree (reported_taxon_concept_id);


--
-- Name: index_trade_shipments_on_sandbox_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_sandbox_id ON public.trade_shipments USING btree (sandbox_id);


--
-- Name: index_trade_shipments_on_source_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_source_id ON public.trade_shipments USING btree (source_id);


--
-- Name: index_trade_shipments_on_taxon_concept_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_taxon_concept_id ON public.trade_shipments USING btree (taxon_concept_id);


--
-- Name: index_trade_shipments_on_term_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_term_id ON public.trade_shipments USING btree (term_id);


--
-- Name: index_trade_shipments_on_trade_annual_report_upload_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_trade_annual_report_upload_id ON public.trade_shipments USING btree (trade_annual_report_upload_id);


--
-- Name: index_trade_shipments_on_unit_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_unit_id ON public.trade_shipments USING btree (unit_id);


--
-- Name: index_trade_shipments_on_updated_by_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_updated_by_id ON public.trade_shipments USING btree (updated_by_id);


--
-- Name: index_trade_shipments_on_year; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_year ON public.trade_shipments USING btree (year);


--
-- Name: index_trade_shipments_on_year_exporter_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_year_exporter_id ON public.trade_shipments USING btree (year, exporter_id);


--
-- Name: index_trade_shipments_on_year_importer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_shipments_on_year_importer_id ON public.trade_shipments USING btree (year, importer_id);


--
-- Name: index_trade_taxon_groups_on_code; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_trade_taxon_groups_on_code ON public.trade_taxon_groups USING btree (code);


--
-- Name: index_trade_validation_errors_on_aru_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_validation_errors_on_aru_id ON public.trade_validation_errors USING btree (annual_report_upload_id);


--
-- Name: index_trade_validation_errors_on_matching_criteria; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_validation_errors_on_matching_criteria ON public.trade_validation_errors USING gin (matching_criteria jsonb_path_ops);


--
-- Name: index_trade_validation_errors_on_vr_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_trade_validation_errors_on_vr_id ON public.trade_validation_errors USING btree (validation_rule_id);


--
-- Name: index_trade_validation_errors_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_trade_validation_errors_unique ON public.trade_validation_errors USING btree (annual_report_upload_id, validation_rule_id, matching_criteria);


--
-- Name: index_users_on_authentication_token; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_users_on_authentication_token ON public.users USING btree (authentication_token);


--
-- Name: index_users_on_email; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_users_on_email ON public.users USING btree (email);


--
-- Name: index_users_on_reset_password_token; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX index_users_on_reset_password_token ON public.users USING btree (reset_password_token);


--
-- Name: index_versions_on_item_type_and_item_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX index_versions_on_item_type_and_item_id ON public.versions USING btree (item_type, item_id);


--
-- Name: taxon_concepts_and_ancestors__ancestor_taxon_concept_id_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX taxon_concepts_and_ancestors__ancestor_taxon_concept_id_tax_idx ON public.taxon_concepts_and_ancestors_mview USING btree (ancestor_taxon_concept_id, taxon_concept_id);


--
-- Name: taxon_concepts_and_ancestors_mview_taxonomy_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_and_ancestors_mview_taxonomy_id_idx ON public.taxon_concepts_and_ancestors_mview USING btree (taxonomy_id);


--
-- Name: taxon_concepts_mview_tmp_cites_show_name_status_cites_list_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_cites_show_name_status_cites_list_idx1 ON public.taxon_concepts_mview USING btree (cites_show, name_status, cites_listing_original, taxonomy_is_cites_eu, rank_name);


--
-- Name: taxon_concepts_mview_tmp_cms_show_name_status_cms_listing__idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_cms_show_name_status_cms_listing__idx1 ON public.taxon_concepts_mview USING btree (cms_show, name_status, cms_listing_original, taxonomy_is_cites_eu, rank_name);


--
-- Name: taxon_concepts_mview_tmp_countries_ids_ary_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_countries_ids_ary_idx ON public.taxon_concepts_mview USING gin (countries_ids_ary);


--
-- Name: taxon_concepts_mview_tmp_eu_show_name_status_eu_listing_or_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_eu_show_name_status_eu_listing_or_idx1 ON public.taxon_concepts_mview USING btree (eu_show, name_status, eu_listing_original, taxonomy_is_cites_eu, rank_name);


--
-- Name: taxon_concepts_mview_tmp_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_id_idx1 ON public.taxon_concepts_mview USING btree (id);


--
-- Name: taxon_concepts_mview_tmp_parent_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_parent_id_idx1 ON public.taxon_concepts_mview USING btree (parent_id);


--
-- Name: taxon_concepts_mview_tmp_taxonomy_is_cites_eu_cites_listed_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX taxon_concepts_mview_tmp_taxonomy_is_cites_eu_cites_listed_idx1 ON public.taxon_concepts_mview USING btree (taxonomy_is_cites_eu, cites_listed, kingdom_position);


--
-- Name: tmp_cascaded_cites_listing_ch_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_ch_show_in_downloads_taxon_conc_idx1 ON public.child_cites_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_cites_listing_ch_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_ch_show_in_timeline_taxon_conce_idx1 ON public.child_cites_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_cites_listing_ch_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_ch_taxon_concept_id_original_ta_idx1 ON public.child_cites_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_cites_listing_cha_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_cha_is_current_change_type_name_idx1 ON public.child_cites_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_cites_listing_chan_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_chan_inclusion_taxon_concept_id_idx1 ON public.child_cites_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_cites_listing_chang_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_chang_excluded_geo_entities_ids_idx1 ON public.child_cites_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_cites_listing_chang_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_chang_original_taxon_concept_id_idx1 ON public.child_cites_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_cites_listing_changes_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_changes_listed_geo_entities_ids_idx1 ON public.child_cites_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_cites_listing_changes_mvi_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cites_listing_changes_mvi_id_taxon_concept_id_idx1 ON public.child_cites_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_cms_listing_chan_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_chan_show_in_downloads_taxon_conc_idx1 ON public.child_cms_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_cms_listing_chan_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_chan_show_in_timeline_taxon_conce_idx1 ON public.child_cms_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_cms_listing_chan_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_chan_taxon_concept_id_original_ta_idx1 ON public.child_cms_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_cms_listing_chang_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_chang_is_current_change_type_name_idx1 ON public.child_cms_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_cms_listing_change_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_change_inclusion_taxon_concept_id_idx1 ON public.child_cms_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_cms_listing_changes_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_changes_excluded_geo_entities_ids_idx1 ON public.child_cms_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_cms_listing_changes_m_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_changes_m_listed_geo_entities_ids_idx1 ON public.child_cms_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_cms_listing_changes_mview_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_changes_mview_id_taxon_concept_id_idx1 ON public.child_cms_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_cms_listing_changes_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_cms_listing_changes_original_taxon_concept_id_idx1 ON public.child_cms_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_267_listi_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listi_show_in_downloads_taxon_conce_idx ON public.child_eu_263_267_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_267_listi_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listi_show_in_timeline_taxon_concep_idx ON public.child_eu_263_267_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_267_listi_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listi_taxon_concept_id_original_tax_idx ON public.child_eu_263_267_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_263_267_listing__inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listing__inclusion_taxon_concept_id_idx ON public.child_eu_263_267_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_267_listing_c_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listing_c_excluded_geo_entities_ids_idx ON public.child_eu_263_267_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_263_267_listing_c_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listing_c_original_taxon_concept_id_idx ON public.child_eu_263_267_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_267_listing_cha_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listing_cha_listed_geo_entities_ids_idx ON public.child_eu_263_267_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_263_267_listing_changes_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listing_changes_id_taxon_concept_id_idx ON public.child_eu_263_267_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_267_listing_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_267_listing_is_current_change_type_name_idx ON public.child_eu_263_267_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_263_listing_c_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_c_show_in_downloads_taxon_conce_idx ON public.child_eu_263_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_listing_c_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_c_show_in_timeline_taxon_concep_idx ON public.child_eu_263_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_listing_c_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_c_taxon_concept_id_original_tax_idx ON public.child_eu_263_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_263_listing_cha_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_cha_is_current_change_type_name_idx ON public.child_eu_263_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_263_listing_chan_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_chan_inclusion_taxon_concept_id_idx ON public.child_eu_263_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_listing_chang_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_chang_excluded_geo_entities_ids_idx ON public.child_eu_263_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_263_listing_chang_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_chang_original_taxon_concept_id_idx ON public.child_eu_263_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_263_listing_changes_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_changes_listed_geo_entities_ids_idx ON public.child_eu_263_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_263_listing_changes_mvi_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_263_listing_changes_mvi_id_taxon_concept_id_idx ON public.child_eu_263_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_267_263_listi_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listi_show_in_downloads_taxon_conce_idx ON public.child_eu_267_263_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_267_263_listi_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listi_show_in_timeline_taxon_concep_idx ON public.child_eu_267_263_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_267_263_listi_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listi_taxon_concept_id_original_tax_idx ON public.child_eu_267_263_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_267_263_listing__inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listing__inclusion_taxon_concept_id_idx ON public.child_eu_267_263_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_267_263_listing_c_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listing_c_excluded_geo_entities_ids_idx ON public.child_eu_267_263_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_267_263_listing_c_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listing_c_original_taxon_concept_id_idx ON public.child_eu_267_263_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_267_263_listing_cha_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listing_cha_listed_geo_entities_ids_idx ON public.child_eu_267_263_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_267_263_listing_changes_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listing_changes_id_taxon_concept_id_idx ON public.child_eu_267_263_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_267_263_listing_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_267_263_listing_is_current_change_type_name_idx ON public.child_eu_267_263_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_268_322_listi_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listi_show_in_downloads_taxon_conc_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_322_listi_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listi_show_in_timeline_taxon_conce_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_322_listi_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listi_taxon_concept_id_original_ta_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_268_322_listin_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listin_is_current_change_type_name_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_268_322_listing__excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listing__excluded_geo_entities_ids_idx1 ON public.child_eu_268_322_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_268_322_listing__original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listing__original_taxon_concept_id_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_322_listing_ch_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listing_ch_listed_geo_entities_ids_idx1 ON public.child_eu_268_322_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_268_322_listing_change_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listing_change_id_taxon_concept_id_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_322_listing_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_322_listing_inclusion_taxon_concept_id_idx1 ON public.child_eu_268_322_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_listing_c_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_c_show_in_downloads_taxon_conce_idx ON public.child_eu_268_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_listing_c_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_c_show_in_timeline_taxon_concep_idx ON public.child_eu_268_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_listing_c_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_c_taxon_concept_id_original_tax_idx ON public.child_eu_268_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_268_listing_cha_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_cha_is_current_change_type_name_idx ON public.child_eu_268_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_268_listing_chan_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_chan_inclusion_taxon_concept_id_idx ON public.child_eu_268_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_listing_chang_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_chang_excluded_geo_entities_ids_idx ON public.child_eu_268_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_268_listing_chang_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_chang_original_taxon_concept_id_idx ON public.child_eu_268_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_268_listing_changes_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_changes_listed_geo_entities_ids_idx ON public.child_eu_268_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_268_listing_changes_mvi_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_268_listing_changes_mvi_id_taxon_concept_id_idx ON public.child_eu_268_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_339_listi_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listi_show_in_downloads_taxon_conce_idx ON public.child_eu_322_339_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_339_listi_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listi_show_in_timeline_taxon_concep_idx ON public.child_eu_322_339_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_339_listi_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listi_taxon_concept_id_original_tax_idx ON public.child_eu_322_339_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_322_339_listing__inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listing__inclusion_taxon_concept_id_idx ON public.child_eu_322_339_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_339_listing_c_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listing_c_excluded_geo_entities_ids_idx ON public.child_eu_322_339_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_322_339_listing_c_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listing_c_original_taxon_concept_id_idx ON public.child_eu_322_339_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_339_listing_cha_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listing_cha_listed_geo_entities_ids_idx ON public.child_eu_322_339_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_322_339_listing_changes_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listing_changes_id_taxon_concept_id_idx ON public.child_eu_322_339_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_339_listing_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_339_listing_is_current_change_type_name_idx ON public.child_eu_322_339_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_322_listing_c_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_c_show_in_downloads_taxon_conc_idx1 ON public.child_eu_322_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_listing_c_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_c_show_in_timeline_taxon_conce_idx1 ON public.child_eu_322_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_listing_c_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_c_taxon_concept_id_original_ta_idx1 ON public.child_eu_322_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_322_listing_ch_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_ch_is_current_change_type_name_idx1 ON public.child_eu_322_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_322_listing_cha_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_cha_inclusion_taxon_concept_id_idx1 ON public.child_eu_322_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_listing_chan_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_chan_excluded_geo_entities_ids_idx1 ON public.child_eu_322_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_322_listing_chan_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_chan_original_taxon_concept_id_idx1 ON public.child_eu_322_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_322_listing_change_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_change_listed_geo_entities_ids_idx1 ON public.child_eu_322_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_322_listing_changes_mv_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_322_listing_changes_mv_id_taxon_concept_id_idx1 ON public.child_eu_322_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_339_listing_c_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_c_show_in_downloads_taxon_conce_idx ON public.child_eu_339_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_339_listing_c_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_c_show_in_timeline_taxon_concep_idx ON public.child_eu_339_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_339_listing_c_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_c_taxon_concept_id_original_tax_idx ON public.child_eu_339_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_339_listing_cha_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_cha_is_current_change_type_name_idx ON public.child_eu_339_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_339_listing_chan_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_chan_inclusion_taxon_concept_id_idx ON public.child_eu_339_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_339_listing_chang_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_chang_excluded_geo_entities_ids_idx ON public.child_eu_339_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_339_listing_chang_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_chang_original_taxon_concept_id_idx ON public.child_eu_339_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_339_listing_changes_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_changes_listed_geo_entities_ids_idx ON public.child_eu_339_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_339_listing_changes_mvi_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_339_listing_changes_mvi_id_taxon_concept_id_idx ON public.child_eu_339_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_361_listing_c_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_c_show_in_downloads_taxon_conc_idx1 ON public.child_eu_361_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_361_listing_c_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_c_show_in_timeline_taxon_conce_idx1 ON public.child_eu_361_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_361_listing_c_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_c_taxon_concept_id_original_ta_idx1 ON public.child_eu_361_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_361_listing_ch_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_ch_is_current_change_type_name_idx1 ON public.child_eu_361_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_361_listing_cha_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_cha_inclusion_taxon_concept_id_idx1 ON public.child_eu_361_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_361_listing_chan_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_chan_excluded_geo_entities_ids_idx1 ON public.child_eu_361_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_361_listing_chan_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_chan_original_taxon_concept_id_idx1 ON public.child_eu_361_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_361_listing_change_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_change_listed_geo_entities_ids_idx1 ON public.child_eu_361_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_361_listing_changes_mv_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_361_listing_changes_mv_id_taxon_concept_id_idx1 ON public.child_eu_361_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_41_55_listing_c_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_c_is_current_change_type_name_idx ON public.child_eu_41_55_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_41_55_listing_ch_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_ch_inclusion_taxon_concept_id_idx ON public.child_eu_41_55_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_41_55_listing_cha_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_cha_excluded_geo_entities_ids_idx ON public.child_eu_41_55_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_41_55_listing_cha_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_cha_original_taxon_concept_id_idx ON public.child_eu_41_55_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_41_55_listing_chang_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_chang_listed_geo_entities_ids_idx ON public.child_eu_41_55_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_41_55_listing_changes_m_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_changes_m_id_taxon_concept_id_idx ON public.child_eu_41_55_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_41_55_listing_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_show_in_downloads_taxon_conce_idx ON public.child_eu_41_55_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_41_55_listing_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_show_in_timeline_taxon_concep_idx ON public.child_eu_41_55_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_41_55_listing_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_41_55_listing_taxon_concept_id_original_tax_idx ON public.child_eu_41_55_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_42_44_listing_c_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_c_is_current_change_type_name_idx ON public.child_eu_42_44_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_42_44_listing_ch_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_ch_inclusion_taxon_concept_id_idx ON public.child_eu_42_44_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_44_listing_cha_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_cha_excluded_geo_entities_ids_idx ON public.child_eu_42_44_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_42_44_listing_cha_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_cha_original_taxon_concept_id_idx ON public.child_eu_42_44_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_44_listing_chang_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_chang_listed_geo_entities_ids_idx ON public.child_eu_42_44_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_42_44_listing_changes_m_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_changes_m_id_taxon_concept_id_idx ON public.child_eu_42_44_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_44_listing_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_show_in_downloads_taxon_conce_idx ON public.child_eu_42_44_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_44_listing_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_show_in_timeline_taxon_concep_idx ON public.child_eu_42_44_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_44_listing_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_44_listing_taxon_concept_id_original_tax_idx ON public.child_eu_42_44_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_42_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_42_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_42_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_42_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_42_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_chan_is_current_change_type_name_idx ON public.child_eu_42_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_42_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_42_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_42_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_42_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_change_original_taxon_concept_id_idx ON public.child_eu_42_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_42_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_42_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_42_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_42_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_42_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_47_42_44_list_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_list_show_in_downloads_taxon_conce_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_47_42_44_list_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_list_show_in_timeline_taxon_concep_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_47_42_44_list_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_list_taxon_concept_id_original_tax_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_47_42_44_listin_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_listin_is_current_change_type_name_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_47_42_44_listing__excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_listing__excluded_geo_entities_ids_idx ON public.child_eu_47_42_44_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_47_42_44_listing__original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_listing__original_taxon_concept_id_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_47_42_44_listing_ch_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_listing_ch_listed_geo_entities_ids_idx ON public.child_eu_47_42_44_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_47_42_44_listing_change_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_listing_change_id_taxon_concept_id_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_47_42_44_listing_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_47_42_44_listing_inclusion_taxon_concept_id_idx ON public.child_eu_47_42_44_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_49_66_41_48_55__is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_55__is_current_change_type_name_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_49_66_41_48_55_l_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_55_l_inclusion_taxon_concept_id_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_49_66_41_48_55_li_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_55_li_excluded_geo_entities_ids_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_49_66_41_48_55_li_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_55_li_original_taxon_concept_id_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_49_66_41_48_55_list_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_55_list_listed_geo_entities_ids_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_49_66_41_48_55_listing__id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_55_listing__id_taxon_concept_id_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_49_66_41_48_5_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_5_show_in_downloads_taxon_conce_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_49_66_41_48_5_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_5_show_in_timeline_taxon_concep_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_49_66_41_48_5_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_49_66_41_48_5_taxon_concept_id_original_tax_idx ON public.child_eu_49_66_41_48_55_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_54_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_54_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_54_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_54_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_54_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_54_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_54_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_chan_is_current_change_type_name_idx ON public.child_eu_54_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_54_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_54_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_54_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_54_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_54_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_change_original_taxon_concept_id_idx ON public.child_eu_54_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_54_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_54_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_54_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_54_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_54_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_41_listing__is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing__is_current_change_type_name_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_55_41_listing_c_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_c_inclusion_taxon_concept_id_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_41_listing_ch_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_ch_excluded_geo_entities_ids_idx1 ON public.child_eu_55_41_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_41_listing_ch_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_ch_original_taxon_concept_id_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_41_listing_chan_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_chan_listed_geo_entities_ids_idx1 ON public.child_eu_55_41_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_41_listing_changes__id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_changes__id_taxon_concept_id_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_41_listing_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_show_in_downloads_taxon_conc_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_41_listing_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_show_in_timeline_taxon_conce_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_41_listing_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_41_listing_taxon_concept_id_original_ta_idx1 ON public.child_eu_55_41_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_55_49_66_41_48__inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_48__inclusion_taxon_concept_id_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_49_66_41_48_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_48_is_current_change_type_name_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_55_49_66_41_48_l_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_48_l_excluded_geo_entities_ids_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_49_66_41_48_l_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_48_l_original_taxon_concept_id_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_49_66_41_48_lis_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_48_lis_listed_geo_entities_ids_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_49_66_41_48_listing_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_48_listing_id_taxon_concept_id_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_49_66_41_4_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_4_show_in_downloads_taxon_conc_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_49_66_41_4_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_4_show_in_timeline_taxon_conce_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_49_66_41_4_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_49_66_41_4_taxon_concept_id_original_ta_idx1 ON public.child_eu_55_49_66_41_48_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_55_66_41_48_l_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_l_show_in_downloads_taxon_conc_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_48_l_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_l_show_in_timeline_taxon_conce_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_48_l_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_l_taxon_concept_id_original_ta_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_55_66_41_48_li_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_li_is_current_change_type_name_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_55_66_41_48_lis_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_lis_inclusion_taxon_concept_id_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_48_list_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_list_excluded_geo_entities_ids_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_66_41_48_list_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_list_original_taxon_concept_id_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_48_listin_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_listin_listed_geo_entities_ids_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_66_41_48_listing_ch_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_48_listing_ch_id_taxon_concept_id_idx1 ON public.child_eu_55_66_41_48_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_list_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_list_show_in_downloads_taxon_conc_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_list_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_list_show_in_timeline_taxon_conce_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_list_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_list_taxon_concept_id_original_ta_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_55_66_41_listi_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_listi_is_current_change_type_name_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_55_66_41_listin_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_listin_inclusion_taxon_concept_id_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_listing_c_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_listing_c_listed_geo_entities_ids_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_66_41_listing_chang_id_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_listing_chang_id_taxon_concept_id_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_55_66_41_listing_excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_listing_excluded_geo_entities_ids_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_55_66_41_listing_original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_55_66_41_listing_original_taxon_concept_id_idx1 ON public.child_eu_55_66_41_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_62_54_listing_c_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_c_is_current_change_type_name_idx ON public.child_eu_62_54_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_62_54_listing_ch_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_ch_inclusion_taxon_concept_id_idx ON public.child_eu_62_54_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_62_54_listing_cha_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_cha_excluded_geo_entities_ids_idx ON public.child_eu_62_54_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_62_54_listing_cha_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_cha_original_taxon_concept_id_idx ON public.child_eu_62_54_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_62_54_listing_chang_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_chang_listed_geo_entities_ids_idx ON public.child_eu_62_54_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_62_54_listing_changes_m_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_changes_m_id_taxon_concept_id_idx ON public.child_eu_62_54_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_62_54_listing_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_show_in_downloads_taxon_conce_idx ON public.child_eu_62_54_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_62_54_listing_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_show_in_timeline_taxon_concep_idx ON public.child_eu_62_54_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_62_54_listing_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_62_54_listing_taxon_concept_id_original_tax_idx ON public.child_eu_62_54_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_65_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_65_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_65_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_65_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_65_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_65_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_65_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_chan_is_current_change_type_name_idx ON public.child_eu_65_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_65_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_65_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_65_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_65_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_65_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_change_original_taxon_concept_id_idx ON public.child_eu_65_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_65_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_65_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_65_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_65_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_65_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_48_55_l_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_l_show_in_downloads_taxon_conce_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_48_55_l_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_l_show_in_timeline_taxon_concep_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_48_55_l_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_l_taxon_concept_id_original_tax_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_66_41_48_55_lis_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_lis_is_current_change_type_name_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_66_41_48_55_list_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_list_inclusion_taxon_concept_id_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_48_55_listi_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_listi_excluded_geo_entities_ids_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_66_41_48_55_listi_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_listi_original_taxon_concept_id_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_48_55_listing_cha_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_listing_cha_id_taxon_concept_id_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_48_55_listing_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_48_55_listing_listed_geo_entities_ids_idx ON public.child_eu_66_41_48_55_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_66_41_55_list_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_list_show_in_downloads_taxon_conce_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_55_list_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_list_show_in_timeline_taxon_concep_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_55_list_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_list_taxon_concept_id_original_tax_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_66_41_55_listin_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_listin_is_current_change_type_name_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_66_41_55_listing__excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_listing__excluded_geo_entities_ids_idx ON public.child_eu_66_41_55_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_66_41_55_listing__original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_listing__original_taxon_concept_id_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_55_listing_ch_listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_listing_ch_listed_geo_entities_ids_idx ON public.child_eu_66_41_55_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_66_41_55_listing_change_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_listing_change_id_taxon_concept_id_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_66_41_55_listing_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_66_41_55_listing_inclusion_taxon_concept_id_idx ON public.child_eu_66_41_55_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_67_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_67_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_67_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_67_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_67_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_67_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_67_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_chan_is_current_change_type_name_idx ON public.child_eu_67_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_67_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_67_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_67_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_67_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_67_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_change_original_taxon_concept_id_idx ON public.child_eu_67_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_67_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_67_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_67_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_67_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_67_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_71_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_71_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_71_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_71_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_71_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_71_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_71_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_chan_is_current_change_type_name_idx ON public.child_eu_71_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_71_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_71_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_71_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_71_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_71_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_change_original_taxon_concept_id_idx ON public.child_eu_71_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_71_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_71_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_71_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_71_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_71_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_72_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_72_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_72_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_72_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_72_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_72_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_72_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_chan_is_current_change_type_name_idx ON public.child_eu_72_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_72_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_72_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_72_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_72_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_72_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_change_original_taxon_concept_id_idx ON public.child_eu_72_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_72_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_72_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_72_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_72_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_72_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_73_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_73_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_73_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_73_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_73_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_73_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_73_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_chan_is_current_change_type_name_idx ON public.child_eu_73_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_73_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_73_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_73_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_73_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_73_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_change_original_taxon_concept_id_idx ON public.child_eu_73_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_73_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_73_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_73_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_73_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_73_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_74_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_74_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_74_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_74_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_74_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_74_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_74_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_chan_is_current_change_type_name_idx ON public.child_eu_74_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_74_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_74_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_74_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_74_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_74_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_change_original_taxon_concept_id_idx ON public.child_eu_74_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_74_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_74_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_74_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_74_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_74_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_76_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_76_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_76_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_76_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_76_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_76_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_76_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_chan_is_current_change_type_name_idx ON public.child_eu_76_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_76_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_76_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_76_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_76_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_76_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_change_original_taxon_concept_id_idx ON public.child_eu_76_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_76_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_76_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_76_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_76_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_76_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_98_listing_ch_show_in_downloads_taxon_conce_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_ch_show_in_downloads_taxon_conce_idx ON public.child_eu_98_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_98_listing_ch_show_in_timeline_taxon_concep_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_ch_show_in_timeline_taxon_concep_idx ON public.child_eu_98_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_98_listing_ch_taxon_concept_id_original_tax_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_ch_taxon_concept_id_original_tax_idx ON public.child_eu_98_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_98_listing_chan_is_current_change_type_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_chan_is_current_change_type_name_idx ON public.child_eu_98_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_98_listing_chang_inclusion_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_chang_inclusion_taxon_concept_id_idx ON public.child_eu_98_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_98_listing_change_excluded_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_change_excluded_geo_entities_ids_idx ON public.child_eu_98_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_98_listing_change_original_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_change_original_taxon_concept_id_idx ON public.child_eu_98_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_98_listing_changes__listed_geo_entities_ids_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_changes__listed_geo_entities_ids_idx ON public.child_eu_98_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_98_listing_changes_mvie_id_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_98_listing_changes_mvie_id_taxon_concept_id_idx ON public.child_eu_98_listing_changes_mview USING btree (id, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_listing_chang_show_in_downloads_taxon_conc_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_chang_show_in_downloads_taxon_conc_idx1 ON public.child_eu_listing_changes_mview USING btree (show_in_downloads, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_listing_chang_show_in_timeline_taxon_conce_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_chang_show_in_timeline_taxon_conce_idx1 ON public.child_eu_listing_changes_mview USING btree (show_in_timeline, taxon_concept_id);


--
-- Name: tmp_cascaded_eu_listing_chang_taxon_concept_id_original_ta_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_chang_taxon_concept_id_original_ta_idx1 ON public.child_eu_listing_changes_mview USING btree (taxon_concept_id, original_taxon_concept_id, change_type_id, effective_at);


--
-- Name: tmp_cascaded_eu_listing_change_is_current_change_type_name_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_change_is_current_change_type_name_idx1 ON public.child_eu_listing_changes_mview USING btree (is_current, change_type_name);


--
-- Name: tmp_cascaded_eu_listing_changes__excluded_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_changes__excluded_geo_entities_ids_idx1 ON public.child_eu_listing_changes_mview USING gin (excluded_geo_entities_ids);


--
-- Name: tmp_cascaded_eu_listing_changes__original_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_changes__original_taxon_concept_id_idx1 ON public.child_eu_listing_changes_mview USING btree (original_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_listing_changes_inclusion_taxon_concept_id_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_changes_inclusion_taxon_concept_id_idx1 ON public.child_eu_listing_changes_mview USING btree (inclusion_taxon_concept_id);


--
-- Name: tmp_cascaded_eu_listing_changes_mv_listed_geo_entities_ids_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_cascaded_eu_listing_changes_mv_listed_geo_entities_ids_idx1 ON public.child_eu_listing_changes_mview USING gin (listed_geo_entities_ids);


--
-- Name: tmp_valid_taxon_concept_annex_taxon_concept_id_annex_effec_idx1; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX tmp_valid_taxon_concept_annex_taxon_concept_id_annex_effec_idx1 ON public.valid_taxon_concept_annex_year_mview USING btree (taxon_concept_id, annex, effective_from, effective_to);


--
-- Name: trade_permits_number_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX trade_permits_number_idx ON public.trade_permits USING btree (upper((number)::text) varchar_pattern_ops);


--
-- Name: trade_permits_number_trigm_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_permits_number_trigm_idx ON public.trade_permits USING gin (upper((number)::text) public.gin_trgm_ops);


--
-- Name: trade_restrictions_extract_year_from_start_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_restrictions_extract_year_from_start_date ON public.trade_restrictions USING btree (date_part('year'::text, start_date)) WHERE ((type)::text = 'Quota'::text);


--
-- Name: trade_sandbox_4163_appendix_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_appendix_idx ON public.trade_sandbox_4163 USING btree (appendix);


--
-- Name: trade_sandbox_4163_country_of_origin_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_country_of_origin_idx ON public.trade_sandbox_4163 USING btree (country_of_origin);


--
-- Name: trade_sandbox_4163_purpose_code_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_purpose_code_idx ON public.trade_sandbox_4163 USING btree (purpose_code);


--
-- Name: trade_sandbox_4163_quantity_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_quantity_idx ON public.trade_sandbox_4163 USING btree (quantity);


--
-- Name: trade_sandbox_4163_source_code_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_source_code_idx ON public.trade_sandbox_4163 USING btree (source_code);


--
-- Name: trade_sandbox_4163_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_taxon_concept_id_idx ON public.trade_sandbox_4163 USING btree (taxon_concept_id);


--
-- Name: trade_sandbox_4163_taxon_name_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_taxon_name_idx ON public.trade_sandbox_4163 USING btree (taxon_name);


--
-- Name: trade_sandbox_4163_term_code_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_term_code_idx ON public.trade_sandbox_4163 USING btree (term_code);


--
-- Name: trade_sandbox_4163_trading_partner_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_trading_partner_idx ON public.trade_sandbox_4163 USING btree (trading_partner);


--
-- Name: trade_sandbox_4163_unit_code_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX trade_sandbox_4163_unit_code_idx ON public.trade_sandbox_4163 USING btree (unit_code);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX unique_schema_migrations ON public.schema_migrations USING btree (version);


--
-- Name: valid_taxon_concept_annex_year_mview_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX valid_taxon_concept_annex_year_mview_idx ON public.valid_taxon_concept_annex_year_mview USING btree (taxon_concept_id, effective_from, effective_to, annex);


--
-- Name: valid_taxon_concept_appendix_year_mview_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX valid_taxon_concept_appendix_year_mview_idx ON public.valid_taxon_concept_appendix_year_mview USING btree (taxon_concept_id, effective_from, effective_to, appendix);


--
-- Name: valid_taxon_concept_appendix_year_mview_year_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX valid_taxon_concept_appendix_year_mview_year_idx ON public.valid_taxon_concept_appendix_year_mview USING btree (taxon_concept_id, date_part('year'::text, effective_from), date_part('year'::text, effective_to), appendix);


--
-- Name: valid_taxon_concept_term_mview_taxon_concept_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX valid_taxon_concept_term_mview_taxon_concept_id_idx ON public.valid_taxon_concept_term_mview USING btree (taxon_concept_id);


--
-- Name: valid_taxon_concept_term_mview_term_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX valid_taxon_concept_term_mview_term_id_idx ON public.valid_taxon_concept_term_mview USING btree (term_id);


--
-- Name: api_documents_view _RETURN; Type: RULE; Schema: public; Owner: -
--

CREATE OR REPLACE VIEW public.api_documents_view AS
 SELECT d.id,
    d.designation_id,
    designations.name AS designation_name,
    d.event_id,
    e.name AS event_name,
        CASE
            WHEN (e.published_at IS NOT NULL) THEN to_char(e.published_at, 'DD/MM/YYYY'::text)
            ELSE to_char((d.date)::timestamp with time zone, 'DD/MM/YYYY'::text)
        END AS date,
        CASE
            WHEN (e.published_at IS NOT NULL) THEN (e.published_at)::timestamp with time zone
            ELSE (d.date)::timestamp with time zone
        END AS date_raw,
    e.type AS event_type,
    d.title,
    upper("substring"(d.filename, ((length(d.filename) - "position"(reverse(d.filename), '.'::text)) + 2))) AS extension,
    d.is_public,
    d.type AS document_type,
    d.sort_index,
        CASE
            WHEN (l.iso_code1 IS NULL) THEN 'EN'::character varying(255)
            ELSE l.iso_code1
        END AS language,
        CASE
            WHEN (d.primary_language_document_id IS NULL) THEN d.id
            ELSE d.primary_language_document_id
        END AS primary_document_id,
    public.squish_null(pd.proposal_number) AS proposal_number,
    po.name AS proposal_outcome,
    rp.name AS review_phase,
    ((public.array_agg_notnull(pd.proposal_outcome_id) || public.array_agg_notnull(rd.review_phase_id)) || public.array_agg_notnull(rd.process_stage_id)) AS document_tags_ids,
    public.array_agg_notnull(DISTINCT dc.full_name ORDER BY dc.full_name) AS taxon_names,
    public.array_agg_notnull(DISTINCT dc.taxon_concept_id ORDER BY dc.taxon_concept_id) AS taxon_concept_ids,
    public.array_agg_notnull(DISTINCT dc.name_en ORDER BY dc.name_en) AS geo_entity_names,
    d.created_at,
    d.updated_at,
    d.created_by_id,
    uc.name AS created_by,
    d.updated_by_id,
    uu.name AS updated_by,
    d.general_subtype,
    d.volume,
    d.manual_id
   FROM ((((((((((public.documents d
     LEFT JOIN public.designations ON ((designations.id = d.designation_id)))
     LEFT JOIN public.events e ON ((e.id = d.event_id)))
     LEFT JOIN public.document_citations_mview dc ON ((dc.document_id = d.id)))
     LEFT JOIN public.languages l ON ((d.language_id = l.id)))
     LEFT JOIN public.proposal_details pd ON ((pd.document_id = d.id)))
     LEFT JOIN public.document_tags po ON ((pd.proposal_outcome_id = po.id)))
     LEFT JOIN public.review_details rd ON ((rd.document_id = d.id)))
     LEFT JOIN public.document_tags rp ON ((rd.review_phase_id = rp.id)))
     LEFT JOIN public.users uc ON ((d.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((d.updated_by_id = uu.id)))
  GROUP BY d.id, designations.name, e.name, e.published_at, e.type, d.title, l.iso_code1, pd.proposal_number, po.name, rp.name, uc.name, uu.name, d.general_subtype, d.volume;


--
-- Name: api_taxon_concepts_view _RETURN; Type: RULE; Schema: public; Owner: -
--

CREATE OR REPLACE VIEW public.api_taxon_concepts_view AS
 SELECT tc.id,
    tc.parent_id,
    taxonomies.name,
        CASE
            WHEN ((taxonomies.name)::text = 'CITES_EU'::text) THEN true
            ELSE false
        END AS taxonomy_is_cites_eu,
    tc.full_name,
    tc.author_year,
    'A'::text AS name_status,
    ranks.name AS rank,
    tc.taxonomic_position,
    (tc.listing OPERATOR(public.->) 'cites_listing'::text) AS cites_listing,
    (tc.listing OPERATOR(public.->) 'eu_listing'::text) AS eu_listing,
    (tc.data OPERATOR(public.->) 'kingdom_name'::text) AS kingdom_name,
    (tc.data OPERATOR(public.->) 'phylum_name'::text) AS phylum_name,
    (tc.data OPERATOR(public.->) 'class_name'::text) AS class_name,
    (tc.data OPERATOR(public.->) 'order_name'::text) AS order_name,
    (tc.data OPERATOR(public.->) 'family_name'::text) AS family_name,
    (tc.data OPERATOR(public.->) 'genus_name'::text) AS genus_name,
    (tc.data OPERATOR(public.->) 'kingdom_id'::text) AS kingdom_id,
    (tc.data OPERATOR(public.->) 'phylum_id'::text) AS phylum_id,
    (tc.data OPERATOR(public.->) 'class_id'::text) AS class_id,
    (tc.data OPERATOR(public.->) 'order_id'::text) AS order_id,
    (tc.data OPERATOR(public.->) 'family_id'::text) AS family_id,
    (tc.data OPERATOR(public.->) 'subfamily_id'::text) AS subfamily_id,
    (tc.data OPERATOR(public.->) 'genus_id'::text) AS genus_id,
    row_to_json(ROW((tc.data OPERATOR(public.->) 'kingdom_name'::text), (tc.data OPERATOR(public.->) 'phylum_name'::text), (tc.data OPERATOR(public.->) 'class_name'::text), (tc.data OPERATOR(public.->) 'order_name'::text), (tc.data OPERATOR(public.->) 'family_name'::text))::public.api_higher_taxa) AS higher_taxa,
    array_to_json(public.array_agg_notnull(ROW(synonyms.id, (synonyms.full_name)::text, (synonyms.author_year)::text, (synonyms.data OPERATOR(public.->) 'rank_name'::text))::public.api_taxon_concept)) AS synonyms,
    NULL::json AS accepted_names,
    tc.created_at,
    COALESCE(tc.dependents_updated_at, tc.updated_at) AS updated_at,
    true AS active
   FROM (((((public.taxon_concepts tc
     JOIN public.taxonomies ON ((taxonomies.id = tc.taxonomy_id)))
     JOIN public.ranks ON ((ranks.id = tc.rank_id)))
     LEFT JOIN public.taxon_relationships tr ON ((tr.taxon_concept_id = tc.id)))
     LEFT JOIN public.taxon_relationship_types trt ON (((trt.id = tr.taxon_relationship_type_id) AND ((trt.name)::text = 'HAS_SYNONYM'::text))))
     LEFT JOIN public.taxon_concepts synonyms ON (((synonyms.id = tr.other_taxon_concept_id) AND (synonyms.taxonomy_id = taxonomies.id))))
  WHERE ((tc.name_status)::text = 'A'::text)
  GROUP BY tc.id, tc.parent_id, taxonomies.name, tc.full_name, tc.author_year, ranks.name, tc.taxonomic_position, tc.created_at, tc.dependents_updated_at
UNION ALL
 SELECT tc.id,
    NULL::integer AS parent_id,
    taxonomies.name,
        CASE
            WHEN ((taxonomies.name)::text = 'CITES_EU'::text) THEN true
            ELSE false
        END AS taxonomy_is_cites_eu,
    tc.full_name,
    tc.author_year,
    'S'::text AS name_status,
    ranks.name AS rank,
    NULL::character varying AS taxonomic_position,
    NULL::text AS cites_listing,
    NULL::text AS eu_listing,
    NULL::text AS kingdom_name,
    NULL::text AS phylum_name,
    NULL::text AS class_name,
    NULL::text AS order_name,
    NULL::text AS family_name,
    NULL::text AS genus_name,
    NULL::text AS kingdom_id,
    NULL::text AS phylum_id,
    NULL::text AS class_id,
    NULL::text AS order_id,
    NULL::text AS family_id,
    NULL::text AS subfamily_id,
    NULL::text AS genus_id,
    NULL::json AS higher_taxa,
    NULL::json AS synonyms,
    array_to_json(public.array_agg_notnull(ROW(accepted_names.id, (accepted_names.full_name)::text, (accepted_names.author_year)::text, (accepted_names.data OPERATOR(public.->) 'rank_name'::text))::public.api_taxon_concept)) AS accepted_names,
    tc.created_at,
    COALESCE(tc.dependents_updated_at, tc.updated_at) AS updated_at,
    true AS active
   FROM (((((public.taxon_concepts tc
     JOIN public.taxonomies ON ((taxonomies.id = tc.taxonomy_id)))
     JOIN public.ranks ON ((ranks.id = tc.rank_id)))
     JOIN public.taxon_relationships tr ON ((tr.other_taxon_concept_id = tc.id)))
     JOIN public.taxon_relationship_types trt ON (((trt.id = tr.taxon_relationship_type_id) AND ((trt.name)::text = 'HAS_SYNONYM'::text))))
     JOIN public.taxon_concepts accepted_names ON (((accepted_names.id = tr.taxon_concept_id) AND (accepted_names.taxonomy_id = taxonomies.id))))
  WHERE ((tc.name_status)::text = 'S'::text)
  GROUP BY tc.id, tc.parent_id, taxonomies.name, tc.full_name, tc.author_year, ranks.name, tc.taxonomic_position, tc.created_at, tc.dependents_updated_at
UNION ALL
 SELECT taxon_concept_versions.taxon_concept_id AS id,
    NULL::integer AS parent_id,
    taxon_concept_versions.taxonomy_name AS name,
        CASE
            WHEN (taxon_concept_versions.taxonomy_name = 'CITES_EU'::text) THEN true
            ELSE false
        END AS taxonomy_is_cites_eu,
    taxon_concept_versions.full_name,
    taxon_concept_versions.author_year,
    taxon_concept_versions.name_status,
    taxon_concept_versions.rank_name AS rank,
    NULL::character varying AS taxonomic_position,
    NULL::text AS cites_listing,
    NULL::text AS eu_listing,
    NULL::text AS kingdom_name,
    NULL::text AS phylum_name,
    NULL::text AS class_name,
    NULL::text AS order_name,
    NULL::text AS family_name,
    NULL::text AS genus_name,
    NULL::text AS kingdom_id,
    NULL::text AS phylum_id,
    NULL::text AS class_id,
    NULL::text AS order_id,
    NULL::text AS family_id,
    NULL::text AS subfamily_id,
    NULL::text AS genus_id,
    NULL::json AS higher_taxa,
    NULL::json AS synonyms,
    NULL::json AS accepted_names,
    taxon_concept_versions.created_at,
    taxon_concept_versions.created_at AS updated_at,
    false AS active
   FROM public.taxon_concept_versions
  WHERE (((taxon_concept_versions.event)::text = 'destroy'::text) AND (taxon_concept_versions.name_status = ANY (ARRAY['A'::text, 'S'::text])));


--
-- Name: taxon_concepts_distributions_view _RETURN; Type: RULE; Schema: public; Owner: -
--

CREATE OR REPLACE VIEW public.taxon_concepts_distributions_view AS
 SELECT taxon_concepts.id,
    taxon_concepts.legacy_id,
    (taxon_concepts.data OPERATOR(public.->) 'phylum_name'::text) AS phylum_name,
    (taxon_concepts.data OPERATOR(public.->) 'class_name'::text) AS class_name,
    (taxon_concepts.data OPERATOR(public.->) 'order_name'::text) AS order_name,
    (taxon_concepts.data OPERATOR(public.->) 'family_name'::text) AS family_name,
    taxon_concepts.full_name,
    (taxon_concepts.data OPERATOR(public.->) 'rank_name'::text) AS rank_name,
    geo_entity_types.name AS geo_entity_type,
    geo_entities.name_en AS geo_entity_name,
    geo_entities.iso_code2 AS geo_entity_iso_code2,
    string_agg((tags.name)::text, ', '::text) AS tags,
    "references".citation AS reference_full,
    "references".id AS reference_id,
    "references".legacy_id AS reference_legacy_id,
    taxonomies.name AS taxonomy_name,
    taxon_concepts.taxonomic_position,
    taxon_concepts.taxonomy_id,
    array_to_string(ARRAY[distribution_note.note, distributions.internal_notes], '
'::text) AS internal_notes,
    to_char(distributions.created_at, 'DD/MM/YYYY'::text) AS created_at,
    uc.name AS created_by,
    to_char(distributions.updated_at, 'DD/MM/YYYY'::text) AS updated_at,
    uu.name AS updated_by
   FROM (((((((((((public.distributions
     RIGHT JOIN public.taxon_concepts ON ((distributions.taxon_concept_id = taxon_concepts.id)))
     LEFT JOIN public.taxonomies ON ((taxonomies.id = taxon_concepts.taxonomy_id)))
     LEFT JOIN public.geo_entities ON ((geo_entities.id = distributions.geo_entity_id)))
     LEFT JOIN public.geo_entity_types ON ((geo_entity_types.id = geo_entities.geo_entity_type_id)))
     LEFT JOIN public.distribution_references ON ((distribution_references.distribution_id = distributions.id)))
     LEFT JOIN public."references" ON (("references".id = distribution_references.reference_id)))
     LEFT JOIN public.taggings ON (((taggings.taggable_id = distributions.id) AND ((taggings.taggable_type)::text = 'Distribution'::text))))
     LEFT JOIN public.tags ON ((tags.id = taggings.tag_id)))
     LEFT JOIN public.comments distribution_note ON (((distribution_note.commentable_id = taxon_concepts.id) AND ((distribution_note.commentable_type)::text = 'TaxonConcept'::text) AND ((distribution_note.comment_type)::text = 'Distribution'::text))))
     LEFT JOIN public.users uc ON ((distributions.created_by_id = uc.id)))
     LEFT JOIN public.users uu ON ((distributions.updated_by_id = uu.id)))
  WHERE ((taxon_concepts.name_status)::text = 'A'::text)
  GROUP BY taxon_concepts.id, taxon_concepts.legacy_id, geo_entity_types.name, geo_entities.name_en, geo_entities.iso_code2, "references".citation, "references".id, taxonomies.name, distributions.internal_notes, distribution_note.note, uc.name, uu.name, distributions.created_at, distributions.updated_at;


--
-- Name: ahoy_events ahoy_events_user_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ahoy_events
    ADD CONSTRAINT ahoy_events_user_id_fk FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: ahoy_visits ahoy_visits_user_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ahoy_visits
    ADD CONSTRAINT ahoy_visits_user_id_fk FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: annotations annotations_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT annotations_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: annotations annotations_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT annotations_event_id_fk FOREIGN KEY (event_id) REFERENCES public.events(id);


--
-- Name: annotations annotations_source_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT annotations_source_id_fk FOREIGN KEY (original_id) REFERENCES public.annotations(id);


--
-- Name: annotations annotations_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.annotations
    ADD CONSTRAINT annotations_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: change_types change_types_designation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.change_types
    ADD CONSTRAINT change_types_designation_id_fk FOREIGN KEY (designation_id) REFERENCES public.designations(id);


--
-- Name: cites_suspension_confirmations cites_suspension_confirmations_cites_suspension_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cites_suspension_confirmations
    ADD CONSTRAINT cites_suspension_confirmations_cites_suspension_id_fk FOREIGN KEY (cites_suspension_id) REFERENCES public.trade_restrictions(id);


--
-- Name: cites_suspension_confirmations cites_suspension_confirmations_notification_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cites_suspension_confirmations
    ADD CONSTRAINT cites_suspension_confirmations_notification_id_fk FOREIGN KEY (cites_suspension_notification_id) REFERENCES public.events(id);


--
-- Name: comments comments_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: comments comments_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: common_names common_names_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.common_names
    ADD CONSTRAINT common_names_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: common_names common_names_language_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.common_names
    ADD CONSTRAINT common_names_language_id_fk FOREIGN KEY (language_id) REFERENCES public.languages(id);


--
-- Name: common_names common_names_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.common_names
    ADD CONSTRAINT common_names_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: designation_geo_entities designation_geo_entities_designation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designation_geo_entities
    ADD CONSTRAINT designation_geo_entities_designation_id_fk FOREIGN KEY (designation_id) REFERENCES public.designations(id);


--
-- Name: designation_geo_entities designation_geo_entities_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designation_geo_entities
    ADD CONSTRAINT designation_geo_entities_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: designations designations_taxonomy_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.designations
    ADD CONSTRAINT designations_taxonomy_id_fk FOREIGN KEY (taxonomy_id) REFERENCES public.taxonomies(id);


--
-- Name: distribution_references distribution_references_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_references
    ADD CONSTRAINT distribution_references_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: distribution_references distribution_references_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_references
    ADD CONSTRAINT distribution_references_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: distributions distributions_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: distributions distributions_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: document_citation_geo_entities document_citation_geo_entities_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_geo_entities
    ADD CONSTRAINT document_citation_geo_entities_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: document_citation_geo_entities document_citation_geo_entities_document_citation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_geo_entities
    ADD CONSTRAINT document_citation_geo_entities_document_citation_id_fk FOREIGN KEY (document_citation_id) REFERENCES public.document_citations(id);


--
-- Name: document_citation_geo_entities document_citation_geo_entities_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_geo_entities
    ADD CONSTRAINT document_citation_geo_entities_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: document_citation_geo_entities document_citation_geo_entities_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_geo_entities
    ADD CONSTRAINT document_citation_geo_entities_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: document_citation_taxon_concepts document_citation_taxon_concepts_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_taxon_concepts
    ADD CONSTRAINT document_citation_taxon_concepts_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: document_citation_taxon_concepts document_citation_taxon_concepts_document_citation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_taxon_concepts
    ADD CONSTRAINT document_citation_taxon_concepts_document_citation_id_fk FOREIGN KEY (document_citation_id) REFERENCES public.document_citations(id);


--
-- Name: document_citation_taxon_concepts document_citation_taxon_concepts_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_taxon_concepts
    ADD CONSTRAINT document_citation_taxon_concepts_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: document_citation_taxon_concepts document_citation_taxon_concepts_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citation_taxon_concepts
    ADD CONSTRAINT document_citation_taxon_concepts_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: document_citations document_citations_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citations
    ADD CONSTRAINT document_citations_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: document_citations document_citations_document_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citations
    ADD CONSTRAINT document_citations_document_id_fk FOREIGN KEY (document_id) REFERENCES public.documents(id);


--
-- Name: document_citations document_citations_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_citations
    ADD CONSTRAINT document_citations_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: documents documents_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: documents documents_designation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_designation_id_fk FOREIGN KEY (designation_id) REFERENCES public.designations(id) ON DELETE SET NULL;


--
-- Name: documents documents_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_event_id_fk FOREIGN KEY (event_id) REFERENCES public.events(id);


--
-- Name: documents documents_language_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_language_id_fk FOREIGN KEY (language_id) REFERENCES public.languages(id);


--
-- Name: documents documents_original_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_original_id_fk FOREIGN KEY (original_id) REFERENCES public.documents(id) ON DELETE SET NULL;


--
-- Name: documents documents_primary_language_document_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_primary_language_document_id_fk FOREIGN KEY (primary_language_document_id) REFERENCES public.documents(id) ON DELETE SET NULL;


--
-- Name: documents documents_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: eu_decision_confirmations eu_decision_confirmations_eu_decision_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decision_confirmations
    ADD CONSTRAINT eu_decision_confirmations_eu_decision_id_fk FOREIGN KEY (eu_decision_id) REFERENCES public.eu_decisions(id);


--
-- Name: eu_decision_confirmations eu_decision_confirmations_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decision_confirmations
    ADD CONSTRAINT eu_decision_confirmations_event_id_fk FOREIGN KEY (event_id) REFERENCES public.events(id);


--
-- Name: eu_decisions eu_decisions_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: eu_decisions eu_decisions_end_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_end_event_id_fk FOREIGN KEY (end_event_id) REFERENCES public.events(id);


--
-- Name: eu_decisions eu_decisions_eu_decision_type_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_eu_decision_type_id_fk FOREIGN KEY (eu_decision_type_id) REFERENCES public.eu_decision_types(id);


--
-- Name: eu_decisions eu_decisions_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: eu_decisions eu_decisions_source_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_source_id_fk FOREIGN KEY (source_id) REFERENCES public.trade_codes(id);


--
-- Name: eu_decisions eu_decisions_srg_history_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_srg_history_id_fk FOREIGN KEY (srg_history_id) REFERENCES public.srg_histories(id);


--
-- Name: eu_decisions eu_decisions_start_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_start_event_id_fk FOREIGN KEY (start_event_id) REFERENCES public.events(id);


--
-- Name: eu_decisions eu_decisions_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: eu_decisions eu_decisions_term_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_term_id_fk FOREIGN KEY (term_id) REFERENCES public.trade_codes(id);


--
-- Name: eu_decisions eu_decisions_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.eu_decisions
    ADD CONSTRAINT eu_decisions_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: events events_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: events events_designation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_designation_id_fk FOREIGN KEY (designation_id) REFERENCES public.designations(id);


--
-- Name: events events_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: bulk_downloads fk_rails_04ecb47988; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bulk_downloads
    ADD CONSTRAINT fk_rails_04ecb47988 FOREIGN KEY (requestor_id) REFERENCES public.users(id);


--
-- Name: active_storage_variant_records fk_rails_993965df05; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_variant_records
    ADD CONSTRAINT fk_rails_993965df05 FOREIGN KEY (blob_id) REFERENCES public.active_storage_blobs(id);


--
-- Name: active_storage_attachments fk_rails_c3b3935057; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.active_storage_attachments
    ADD CONSTRAINT fk_rails_c3b3935057 FOREIGN KEY (blob_id) REFERENCES public.active_storage_blobs(id);


--
-- Name: geo_entities geo_entities_geo_entity_type_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_entities
    ADD CONSTRAINT geo_entities_geo_entity_type_id_fk FOREIGN KEY (geo_entity_type_id) REFERENCES public.geo_entity_types(id);


--
-- Name: geo_relationships geo_relationships_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationships
    ADD CONSTRAINT geo_relationships_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: geo_relationships geo_relationships_geo_relationship_type_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationships
    ADD CONSTRAINT geo_relationships_geo_relationship_type_id_fk FOREIGN KEY (geo_relationship_type_id) REFERENCES public.geo_relationship_types(id);


--
-- Name: geo_relationships geo_relationships_other_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geo_relationships
    ADD CONSTRAINT geo_relationships_other_geo_entity_id_fk FOREIGN KEY (other_geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: instruments instruments_designation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.instruments
    ADD CONSTRAINT instruments_designation_id_fk FOREIGN KEY (designation_id) REFERENCES public.designations(id);


--
-- Name: listing_changes listing_changes_annotation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_annotation_id_fk FOREIGN KEY (annotation_id) REFERENCES public.annotations(id);


--
-- Name: listing_changes listing_changes_change_type_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_change_type_id_fk FOREIGN KEY (change_type_id) REFERENCES public.change_types(id);


--
-- Name: listing_changes listing_changes_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: listing_changes listing_changes_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_event_id_fk FOREIGN KEY (event_id) REFERENCES public.events(id);


--
-- Name: listing_changes listing_changes_hash_annotation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_hash_annotation_id_fk FOREIGN KEY (hash_annotation_id) REFERENCES public.annotations(id);


--
-- Name: listing_changes listing_changes_inclusion_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_inclusion_taxon_concept_id_fk FOREIGN KEY (inclusion_taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: listing_changes listing_changes_parent_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_parent_id_fk FOREIGN KEY (parent_id) REFERENCES public.listing_changes(id);


--
-- Name: listing_changes listing_changes_source_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_source_id_fk FOREIGN KEY (original_id) REFERENCES public.listing_changes(id);


--
-- Name: listing_changes listing_changes_species_listing_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_species_listing_id_fk FOREIGN KEY (species_listing_id) REFERENCES public.species_listings(id);


--
-- Name: listing_changes listing_changes_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: listing_changes listing_changes_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_changes
    ADD CONSTRAINT listing_changes_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: listing_distributions listing_distributions_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions
    ADD CONSTRAINT listing_distributions_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: listing_distributions listing_distributions_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions
    ADD CONSTRAINT listing_distributions_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: listing_distributions listing_distributions_listing_change_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions
    ADD CONSTRAINT listing_distributions_listing_change_id_fk FOREIGN KEY (listing_change_id) REFERENCES public.listing_changes(id);


--
-- Name: listing_distributions listing_distributions_source_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions
    ADD CONSTRAINT listing_distributions_source_id_fk FOREIGN KEY (original_id) REFERENCES public.listing_distributions(id);


--
-- Name: listing_distributions listing_distributions_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.listing_distributions
    ADD CONSTRAINT listing_distributions_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_inputs nomenclature_change_inputs_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_inputs
    ADD CONSTRAINT nomenclature_change_inputs_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_inputs nomenclature_change_inputs_nomenclature_change_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_inputs
    ADD CONSTRAINT nomenclature_change_inputs_nomenclature_change_id_fk FOREIGN KEY (nomenclature_change_id) REFERENCES public.nomenclature_changes(id);


--
-- Name: nomenclature_change_inputs nomenclature_change_inputs_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_inputs
    ADD CONSTRAINT nomenclature_change_inputs_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: nomenclature_change_inputs nomenclature_change_inputs_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_inputs
    ADD CONSTRAINT nomenclature_change_inputs_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_output_reassignments nomenclature_change_output_reassignments_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_output_reassignments
    ADD CONSTRAINT nomenclature_change_output_reassignments_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_output_reassignments nomenclature_change_output_reassignments_output_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_output_reassignments
    ADD CONSTRAINT nomenclature_change_output_reassignments_output_id_fk FOREIGN KEY (nomenclature_change_output_id) REFERENCES public.nomenclature_change_outputs(id);


--
-- Name: nomenclature_change_output_reassignments nomenclature_change_output_reassignments_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_output_reassignments
    ADD CONSTRAINT nomenclature_change_output_reassignments_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_new_parent_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_new_parent_id_fk FOREIGN KEY (new_parent_id) REFERENCES public.taxon_concepts(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_new_rank_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_new_rank_id_fk FOREIGN KEY (new_rank_id) REFERENCES public.ranks(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_new_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_new_taxon_concept_id_fk FOREIGN KEY (new_taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_nomenclature_change_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_nomenclature_change_id_fk FOREIGN KEY (nomenclature_change_id) REFERENCES public.nomenclature_changes(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: nomenclature_change_outputs nomenclature_change_outputs_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_outputs
    ADD CONSTRAINT nomenclature_change_outputs_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_reassignment_targets nomenclature_change_reassignment_targets_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignment_targets
    ADD CONSTRAINT nomenclature_change_reassignment_targets_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_reassignment_targets nomenclature_change_reassignment_targets_output_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignment_targets
    ADD CONSTRAINT nomenclature_change_reassignment_targets_output_id_fk FOREIGN KEY (nomenclature_change_output_id) REFERENCES public.nomenclature_change_outputs(id);


--
-- Name: nomenclature_change_reassignment_targets nomenclature_change_reassignment_targets_reassignment_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignment_targets
    ADD CONSTRAINT nomenclature_change_reassignment_targets_reassignment_id_fk FOREIGN KEY (nomenclature_change_reassignment_id) REFERENCES public.nomenclature_change_reassignments(id);


--
-- Name: nomenclature_change_reassignment_targets nomenclature_change_reassignment_targets_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignment_targets
    ADD CONSTRAINT nomenclature_change_reassignment_targets_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_reassignments nomenclature_change_reassignments_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignments
    ADD CONSTRAINT nomenclature_change_reassignments_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_change_reassignments nomenclature_change_reassignments_input_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignments
    ADD CONSTRAINT nomenclature_change_reassignments_input_id_fk FOREIGN KEY (nomenclature_change_input_id) REFERENCES public.nomenclature_change_inputs(id);


--
-- Name: nomenclature_change_reassignments nomenclature_change_reassignments_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_change_reassignments
    ADD CONSTRAINT nomenclature_change_reassignments_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_changes nomenclature_changes_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_changes
    ADD CONSTRAINT nomenclature_changes_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: nomenclature_changes nomenclature_changes_event_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_changes
    ADD CONSTRAINT nomenclature_changes_event_id_fk FOREIGN KEY (event_id) REFERENCES public.events(id);


--
-- Name: nomenclature_changes nomenclature_changes_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nomenclature_changes
    ADD CONSTRAINT nomenclature_changes_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: proposal_details proposal_details_document_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.proposal_details
    ADD CONSTRAINT proposal_details_document_id_fk FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE;


--
-- Name: proposal_details proposal_details_proposal_outcome_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.proposal_details
    ADD CONSTRAINT proposal_details_proposal_outcome_id_fk FOREIGN KEY (proposal_outcome_id) REFERENCES public.document_tags(id);


--
-- Name: references references_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."references"
    ADD CONSTRAINT references_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: references references_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."references"
    ADD CONSTRAINT references_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: review_details review_details_document_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_details
    ADD CONSTRAINT review_details_document_id_fk FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE;


--
-- Name: review_details review_details_process_stage_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_details
    ADD CONSTRAINT review_details_process_stage_id_fk FOREIGN KEY (process_stage_id) REFERENCES public.document_tags(id);


--
-- Name: review_details review_details_review_phase_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_details
    ADD CONSTRAINT review_details_review_phase_id_fk FOREIGN KEY (review_phase_id) REFERENCES public.document_tags(id);


--
-- Name: species_listings species_listings_designation_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.species_listings
    ADD CONSTRAINT species_listings_designation_id_fk FOREIGN KEY (designation_id) REFERENCES public.designations(id);


--
-- Name: taxon_commons taxon_commons_common_name_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_commons
    ADD CONSTRAINT taxon_commons_common_name_id_fk FOREIGN KEY (common_name_id) REFERENCES public.common_names(id);


--
-- Name: taxon_commons taxon_commons_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_commons
    ADD CONSTRAINT taxon_commons_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: taxon_commons taxon_commons_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_commons
    ADD CONSTRAINT taxon_commons_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: taxon_commons taxon_commons_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_commons
    ADD CONSTRAINT taxon_commons_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: distributions taxon_concept_geo_entities_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT taxon_concept_geo_entities_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: distributions taxon_concept_geo_entities_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT taxon_concept_geo_entities_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: distribution_references taxon_concept_geo_entity_references_reference_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_references
    ADD CONSTRAINT taxon_concept_geo_entity_references_reference_id_fk FOREIGN KEY (reference_id) REFERENCES public."references"(id);


--
-- Name: distribution_references taxon_concept_geo_entity_references_taxon_concept_geo_entity_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_references
    ADD CONSTRAINT taxon_concept_geo_entity_references_taxon_concept_geo_entity_fk FOREIGN KEY (distribution_id) REFERENCES public.distributions(id);


--
-- Name: taxon_concept_references taxon_concept_references_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_references
    ADD CONSTRAINT taxon_concept_references_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: taxon_concept_references taxon_concept_references_reference_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_references
    ADD CONSTRAINT taxon_concept_references_reference_id_fk FOREIGN KEY (reference_id) REFERENCES public."references"(id);


--
-- Name: taxon_concept_references taxon_concept_references_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_references
    ADD CONSTRAINT taxon_concept_references_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: taxon_concept_references taxon_concept_references_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concept_references
    ADD CONSTRAINT taxon_concept_references_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: taxon_concepts taxon_concepts_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: taxon_concepts taxon_concepts_dependents_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_dependents_updated_by_id_fk FOREIGN KEY (dependents_updated_by_id) REFERENCES public.users(id);


--
-- Name: taxon_concepts taxon_concepts_parent_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_parent_id_fk FOREIGN KEY (parent_id) REFERENCES public.taxon_concepts(id);


--
-- Name: taxon_concepts taxon_concepts_rank_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_rank_id_fk FOREIGN KEY (rank_id) REFERENCES public.ranks(id);


--
-- Name: taxon_concepts taxon_concepts_taxon_name_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_taxon_name_id_fk FOREIGN KEY (taxon_name_id) REFERENCES public.taxon_names(id);


--
-- Name: taxon_concepts taxon_concepts_taxonomy_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_taxonomy_id_fk FOREIGN KEY (taxonomy_id) REFERENCES public.taxonomies(id);


--
-- Name: taxon_concepts taxon_concepts_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_concepts
    ADD CONSTRAINT taxon_concepts_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: taxon_instruments taxon_instruments_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_instruments
    ADD CONSTRAINT taxon_instruments_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: taxon_instruments taxon_instruments_instrument_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_instruments
    ADD CONSTRAINT taxon_instruments_instrument_id_fk FOREIGN KEY (instrument_id) REFERENCES public.instruments(id);


--
-- Name: taxon_instruments taxon_instruments_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_instruments
    ADD CONSTRAINT taxon_instruments_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: taxon_instruments taxon_instruments_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_instruments
    ADD CONSTRAINT taxon_instruments_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: taxon_relationships taxon_relationships_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationships
    ADD CONSTRAINT taxon_relationships_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: taxon_relationships taxon_relationships_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationships
    ADD CONSTRAINT taxon_relationships_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: taxon_relationships taxon_relationships_taxon_relationship_type_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationships
    ADD CONSTRAINT taxon_relationships_taxon_relationship_type_id_fk FOREIGN KEY (taxon_relationship_type_id) REFERENCES public.taxon_relationship_types(id);


--
-- Name: taxon_relationships taxon_relationships_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.taxon_relationships
    ADD CONSTRAINT taxon_relationships_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: term_trade_codes_pairs term_trade_codes_pairs_term_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.term_trade_codes_pairs
    ADD CONSTRAINT term_trade_codes_pairs_term_id_fk FOREIGN KEY (term_id) REFERENCES public.trade_codes(id);


--
-- Name: term_trade_codes_pairs term_trade_codes_pairs_trade_code_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.term_trade_codes_pairs
    ADD CONSTRAINT term_trade_codes_pairs_trade_code_id_fk FOREIGN KEY (trade_code_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_annual_report_uploads trade_annual_report_uploads_created_by_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads
    ADD CONSTRAINT trade_annual_report_uploads_created_by_fk FOREIGN KEY (created_by) REFERENCES public.users(id);


--
-- Name: trade_annual_report_uploads trade_annual_report_uploads_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads
    ADD CONSTRAINT trade_annual_report_uploads_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: trade_annual_report_uploads trade_annual_report_uploads_trading_country_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads
    ADD CONSTRAINT trade_annual_report_uploads_trading_country_id_fk FOREIGN KEY (trading_country_id) REFERENCES public.geo_entities(id);


--
-- Name: trade_annual_report_uploads trade_annual_report_uploads_updated_by_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads
    ADD CONSTRAINT trade_annual_report_uploads_updated_by_fk FOREIGN KEY (updated_by) REFERENCES public.users(id);


--
-- Name: trade_annual_report_uploads trade_annual_report_uploads_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_annual_report_uploads
    ADD CONSTRAINT trade_annual_report_uploads_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: trade_restriction_purposes trade_restriction_purposes_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_purposes
    ADD CONSTRAINT trade_restriction_purposes_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: trade_restriction_purposes trade_restriction_purposes_purpose_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_purposes
    ADD CONSTRAINT trade_restriction_purposes_purpose_id FOREIGN KEY (purpose_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_restriction_purposes trade_restriction_purposes_trade_restriction_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_purposes
    ADD CONSTRAINT trade_restriction_purposes_trade_restriction_id FOREIGN KEY (trade_restriction_id) REFERENCES public.trade_restrictions(id);


--
-- Name: trade_restriction_purposes trade_restriction_purposes_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_purposes
    ADD CONSTRAINT trade_restriction_purposes_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: trade_restriction_sources trade_restriction_sources_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_sources
    ADD CONSTRAINT trade_restriction_sources_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: trade_restriction_sources trade_restriction_sources_source_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_sources
    ADD CONSTRAINT trade_restriction_sources_source_id FOREIGN KEY (source_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_restriction_sources trade_restriction_sources_trade_restriction_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_sources
    ADD CONSTRAINT trade_restriction_sources_trade_restriction_id FOREIGN KEY (trade_restriction_id) REFERENCES public.trade_restrictions(id);


--
-- Name: trade_restriction_sources trade_restriction_sources_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_sources
    ADD CONSTRAINT trade_restriction_sources_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: trade_restriction_terms trade_restriction_terms_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_terms
    ADD CONSTRAINT trade_restriction_terms_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: trade_restriction_terms trade_restriction_terms_term_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_terms
    ADD CONSTRAINT trade_restriction_terms_term_id FOREIGN KEY (term_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_restriction_terms trade_restriction_terms_trade_restriction_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_terms
    ADD CONSTRAINT trade_restriction_terms_trade_restriction_id FOREIGN KEY (trade_restriction_id) REFERENCES public.trade_restrictions(id);


--
-- Name: trade_restriction_terms trade_restriction_terms_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restriction_terms
    ADD CONSTRAINT trade_restriction_terms_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: trade_restrictions trade_restrictions_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: trade_restrictions trade_restrictions_end_notification_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_end_notification_id_fk FOREIGN KEY (end_notification_id) REFERENCES public.events(id);


--
-- Name: trade_restrictions trade_restrictions_geo_entity_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_geo_entity_id_fk FOREIGN KEY (geo_entity_id) REFERENCES public.geo_entities(id);


--
-- Name: trade_restrictions trade_restrictions_start_notification_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_start_notification_id_fk FOREIGN KEY (start_notification_id) REFERENCES public.events(id);


--
-- Name: trade_restrictions trade_restrictions_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: trade_restrictions trade_restrictions_unit_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_unit_id_fk FOREIGN KEY (unit_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_restrictions trade_restrictions_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_restrictions
    ADD CONSTRAINT trade_restrictions_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: trade_shipments trade_shipments_country_of_origin_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_country_of_origin_id_fk FOREIGN KEY (country_of_origin_id) REFERENCES public.geo_entities(id);


--
-- Name: trade_shipments trade_shipments_created_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_created_by_id_fk FOREIGN KEY (created_by_id) REFERENCES public.users(id);


--
-- Name: trade_shipments trade_shipments_exporter_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_exporter_id_fk FOREIGN KEY (exporter_id) REFERENCES public.geo_entities(id);


--
-- Name: trade_shipments trade_shipments_importer_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_importer_id_fk FOREIGN KEY (importer_id) REFERENCES public.geo_entities(id);


--
-- Name: trade_shipments trade_shipments_purpose_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_purpose_id_fk FOREIGN KEY (purpose_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_shipments trade_shipments_reported_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_reported_taxon_concept_id_fk FOREIGN KEY (reported_taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: trade_shipments trade_shipments_source_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_source_id_fk FOREIGN KEY (source_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_shipments trade_shipments_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: trade_shipments trade_shipments_term_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_term_id_fk FOREIGN KEY (term_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_shipments trade_shipments_trade_annual_report_upload_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_trade_annual_report_upload_id_fk FOREIGN KEY (trade_annual_report_upload_id) REFERENCES public.trade_annual_report_uploads(id);


--
-- Name: trade_shipments trade_shipments_unit_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_unit_id_fk FOREIGN KEY (unit_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_shipments trade_shipments_updated_by_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_shipments
    ADD CONSTRAINT trade_shipments_updated_by_id_fk FOREIGN KEY (updated_by_id) REFERENCES public.users(id);


--
-- Name: trade_taxon_concept_term_pairs trade_taxon_concept_code_pairs_taxon_concept_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_taxon_concept_term_pairs
    ADD CONSTRAINT trade_taxon_concept_code_pairs_taxon_concept_id_fk FOREIGN KEY (taxon_concept_id) REFERENCES public.taxon_concepts(id);


--
-- Name: trade_taxon_concept_term_pairs trade_taxon_concept_code_pairs_term_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_taxon_concept_term_pairs
    ADD CONSTRAINT trade_taxon_concept_code_pairs_term_id_fk FOREIGN KEY (term_id) REFERENCES public.trade_codes(id);


--
-- Name: trade_validation_errors trade_validation_errors_aru_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_validation_errors
    ADD CONSTRAINT trade_validation_errors_aru_id_fk FOREIGN KEY (annual_report_upload_id) REFERENCES public.trade_annual_report_uploads(id) ON DELETE CASCADE;


--
-- Name: trade_validation_errors trade_validation_errors_vr_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.trade_validation_errors
    ADD CONSTRAINT trade_validation_errors_vr_id_fk FOREIGN KEY (validation_rule_id) REFERENCES public.trade_validation_rules(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

SET search_path TO "$user", public;

INSERT INTO "schema_migrations" (version) VALUES
('20250715111433'),
('20250522113100'),
('20250513134147'),
('20250506162929'),
('20250320135456'),
('20250320134111'),
('20250123104023'),
('20250117233330'),
('20250117115416'),
('20250117110225'),
('20241007075814'),
('20240930162316'),
('20240805112027'),
('20240729120000'),
('20240725145653'),
('20240724113700'),
('20240723164647'),
('20240322150101'),
('20240202224209'),
('20240115115503'),
('20240115115459'),
('20240115115456'),
('20240115115451'),
('20230915113624'),
('20230803181442'),
('20230620110017'),
('20230510221244'),
('20221017212659'),
('20221014141105'),
('20221014141104'),
('20221013155344'),
('20221011142831'),
('20220922143605'),
('20220819121517'),
('20220808124523'),
('20220803152826'),
('20220314110512'),
('20220223142512'),
('20220218161024'),
('20220119113158'),
('20210823165358'),
('20210624131423'),
('20210106174249'),
('20201026123892'),
('20201008133057'),
('20200807112659'),
('20200707183529'),
('20200514150717'),
('20200513105319'),
('20200416170653'),
('20200228113482'),
('20200227092509'),
('20200225154202'),
('20200224152531'),
('20200206150700'),
('20200124152531'),
('20191209215129'),
('20191023135814'),
('20191018135814'),
('20191017135814'),
('20191016175827'),
('20190806145454'),
('20190725145613'),
('20190725135814'),
('20190724131538'),
('20190606174223'),
('20190524142939'),
('20180724163021'),
('20180713123936'),
('20180705094119'),
('20180627135001'),
('20180601083440'),
('20180509135814'),
('20170404125230'),
('20170224133932'),
('20170119124811'),
('20170104215019'),
('20161219204239'),
('20161218150218'),
('20161215140343'),
('20161128152531'),
('20161123103614'),
('20161122145302'),
('20161111114955'),
('20161107191141'),
('20161104135655'),
('20161103110635'),
('20160705114949'),
('20160705093243'),
('20160630084345'),
('20160623105336'),
('20160621093131'),
('20160505105252'),
('20160504095537'),
('20160503073026'),
('20160425091139'),
('20160421083820'),
('20160406150331'),
('20160406101826'),
('20160405104833'),
('20160317154107'),
('20160317080944'),
('20160304141931'),
('20160223104016'),
('20160223074747'),
('20151221144352'),
('20151214111814'),
('20151201135029'),
('20151201095234'),
('20151117145544'),
('20151006153403'),
('20151005141953'),
('20151001094410'),
('20150929175554'),
('20150820183942'),
('20150820121520'),
('20150819124804'),
('20150818131407'),
('20150817204542'),
('20150817102427'),
('20150812180311'),
('20150806092509'),
('20150730153305'),
('20150723142812'),
('20150723141854'),
('20150722113923'),
('20150721121640'),
('20150720150338'),
('20150720133624'),
('20150717152937'),
('20150714075603'),
('20150713105852'),
('20150701133536'),
('20150610111751'),
('20150518161716'),
('20150518131629'),
('20150518122737'),
('20150518120700'),
('20150512222755'),
('20150512124835'),
('20150428071201'),
('20150427111732'),
('20150422101115'),
('20150421112808'),
('20150421071444'),
('20150421063910'),
('20150420151952'),
('20150420100448'),
('20150402131608'),
('20150402111504'),
('20150402111503'),
('20150401123614'),
('20150324114546'),
('20150318150923'),
('20150317131538'),
('20150310140649'),
('20150304104013'),
('20150302082111'),
('20150225103133'),
('20150225102903'),
('20150223115540'),
('20150218141458'),
('20150217174539'),
('20150210140508'),
('20150126161813'),
('20150126135438'),
('20150126125749'),
('20150122132408'),
('20150121234014'),
('20150121232443'),
('20150121111134'),
('20150119122122'),
('20150116112256'),
('20150114105024'),
('20150114084537'),
('20150112124146'),
('20150112113519'),
('20150112093954'),
('20150112080319'),
('20150109134326'),
('20150107173809'),
('20150107171940'),
('20150106100040'),
('20141230193844'),
('20141230193843'),
('20141228224334'),
('20141228101341'),
('20141228094935'),
('20141223171144'),
('20141223171143'),
('20141223164041'),
('20141223160054'),
('20141223141125'),
('20141223141124'),
('20141222133058'),
('20141222121945'),
('20141222103221'),
('20141217135242'),
('20141215134420'),
('20141215114029'),
('20141215104216'),
('20141212093310'),
('20141209133037'),
('20141209092341'),
('20141202142048'),
('20141124163355'),
('20141120211023'),
('20141113153137'),
('20141014125738'),
('20141008094314'),
('20141007145503'),
('20141004214703'),
('20141004213258'),
('20141003155548'),
('20141003104615'),
('20141002104704'),
('20141002065308'),
('20140929092236'),
('20140926121728'),
('20140918090432'),
('20140916154706'),
('20140915204931'),
('20140915075649'),
('20140911101846'),
('20140911100851'),
('20140910124718'),
('20140902113018'),
('20140814074055'),
('20140814074009'),
('20140814073530'),
('20140812133548'),
('20140811101246'),
('20140806122042'),
('20140730101120'),
('20140730083216'),
('20140721071654'),
('20140718122508'),
('20140709084708'),
('20140709084707'),
('20140703120106'),
('20140625102632'),
('20140624084138'),
('20140618122418'),
('20140612174934'),
('20140611105359'),
('20140606102744'),
('20140606102743'),
('20140606102742'),
('20140606102741'),
('20140606102740'),
('20140604100410'),
('20140530173241'),
('20140529073508'),
('20140528075844'),
('20140523150907'),
('20140523131927'),
('20140522125128'),
('20140521113436'),
('20140521112741'),
('20140521112702'),
('20140521105149'),
('20140521105116'),
('20140521105044'),
('20140521105017'),
('20140521104935'),
('20140521104850'),
('20140521103318'),
('20140521103243'),
('20140521102906'),
('20140521102836'),
('20140520132319'),
('20140520132248'),
('20140520131539'),
('20140520131040'),
('20140520130740'),
('20140520130708'),
('20140520130341'),
('20140520130258'),
('20140520125642'),
('20140520125612'),
('20140520124553'),
('20140520124510'),
('20140519105917'),
('20140519105842'),
('20140514144304'),
('20140514144222'),
('20140514143954'),
('20140514143916'),
('20140514143525'),
('20140514143438'),
('20140514141353'),
('20140514140438'),
('20140514131715'),
('20140514131633'),
('20140514082122'),
('20140514082045'),
('20140513090352'),
('20140513084500'),
('20140513084116'),
('20140513084035'),
('20140411143214'),
('20140326100059'),
('20140318132052'),
('20140313102554'),
('20140312145229'),
('20140221115708'),
('20140220171138'),
('20140220112825'),
('20140218105813'),
('20140210121403'),
('20140210121223'),
('20140207090849'),
('20140205084322'),
('20140116182242'),
('20140116134521'),
('20140116121054'),
('20140113173345'),
('20140113173344'),
('20140113160601'),
('20140113145605'),
('20140110111609'),
('20140110111239'),
('20140109175917'),
('20140108113028'),
('20131223110646'),
('20131218165627'),
('20131218164749'),
('20131217121051'),
('20131217102142'),
('20131217101949'),
('20131216121536'),
('20131216120901'),
('20131213140544'),
('20131212171122'),
('20131119164032'),
('20131119140820'),
('20131119140819'),
('20131119133659'),
('20131106163851'),
('20131106162824'),
('20131106162439'),
('20131106161335'),
('20131029165950'),
('20131022144429'),
('20131018134130'),
('20131018101540'),
('20131017163541'),
('20131017142454'),
('20131017123734'),
('20131017122309'),
('20131015150024'),
('20131014164845'),
('20131005215038'),
('20131005212713'),
('20130920185559'),
('20130916091657'),
('20130820080200'),
('20130820080014'),
('20130816172913'),
('20130816131841'),
('20130814103626'),
('20130814095805'),
('20130812101133'),
('20130808132441'),
('20130808132357'),
('20130802135401'),
('20130802130514'),
('20130702093702'),
('20130702093134'),
('20130620075330'),
('20121004124446'),
('20120703141230'),
('20120530135534');

