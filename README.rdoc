= Species+ {<img src="https://secure.travis-ci.org/unepwcmc/SAPI.png" />}[http://travis-ci.org/unepwcmc/SAPI] {<img src="https://codeclimate.com/github/unepwcmc/SAPI.png" />}[https://codeclimate.com/github/unepwcmc/SAPI] {<img src="https://coveralls.io/repos/unepwcmc/SAPI/badge.png?branch=master" alt="Coverage Status" />}[https://coveralls.io/r/unepwcmc/SAPI?branch=master]


Species+ is the new species integration platform developed at WCMC.

==Dependencies

(packages as for Ubuntu)

  - PostgreSQL
     - libpq-dev
     - postgresql-9.1
     - postgresql-contrib-9.1
  - Redis
  - TeXLive PdfLaTeX
     - texlive
     - texlive-full
     - texlive-latex-recommended
     - texlive-fonts-recommended
     - texlive-extra (is this included in texlive-full?)

==Installation

=== Gems
Gems are packaged, following this article:

  http://ryan.mcgeary.org/2011/02/09/vendor-everything-still-applies/

=== CORS

CORS using a rack middleware:

  http://blog.carbonfive.com/2012/02/27/supporting-cross-domain-ajax-in-rails-using-jsonp-and-cors/

for now we use the rack-cors middleware for development, staging has the appropriate headers defined in Apache config:

  <VirtualHost *:80>
    Header set Access-Control-Allow-Origin *
    Header set Access-Control-Allow-Methods "POST, GET, OPTIONS"
    Header set Access-Control-Allow-Headers "X-Requested-With, X-Prototype-Version"
    Header set Access-Control-Max-Age 1728000
    ...

=== Database

We use PostgreSQL 9.1 with the hstore and tablefunc extensions. We also use data modifying recursive CTEs, which are not supported on versions lower than 9.1.

The hstore and tablefunc extensions need to be installed separately from the contrib package.

To load the modules into your db in postgres >= 9.1:

  CREATE EXTENSION hstore
  CREATE EXTENSION tablefunc

This is done in migrations for your development and test environments. For staging and production needs to be done by hand, as it requires superuser privileges.

=== LaTeX: handling hyperlinks in included pdf documents
Latex does not preserve hyperlinks from an included pdf document, but there is a workaround to get this to work in order to be able to embed the intro pages in the checklist pdfs. The following needs to be when the intro pdfs are changed:
  
  - get pdfannotextractor.pl -- should be in texlive-extra package (?)
  - get libfile-which-perl
  - run this to install PDFBox (that's a Java jar required by pdfannotextractor that needs to be v. 0.7.2 or 0.7.3 -- not the current from apt-get))
      pdfannotextractor --install
  - run this command on every file to be included, this will generate a .pax file:
      pdfannotextractor static_index.pdf
  - finally, pdflatex should pick the pax files and use to reinsert hyperlinks into the included pdfs. It's considered an experimental feature.

More info: http://anorien.csc.warwick.ac.uk/mirrors/CTAN/macros/latex/contrib/pax/README

=== Files for import

The original data files are in Dropbox in a folder shared with the Species staff.
These files should have the same columns as defined in the helper import file (lib/tasks/helpers_for_import.rb).
Otherwise they should be renamed. After copying the files from the Dropbox folder to the project folder, currently
into lib/assets/files/cleaned/[animals|plants], I open them with excel and save them as Windows Comma Separated.
After this (in Mac OSx) I run the following command in the terminal from the folder where the files are:

  iconv -f Windows-1252 -t UTF-8 file_name.csv > file_name_utf8.csv

This should generate in a file utf8 compatible.

=== Data import

  rake import:redo
This task drops the database if not being used, creates it and runs the migrations. Then it loads the db seeds, and imports species, distributions,
cites listings, common names, synonyms, references and taxon concept references from the provided files in lib/assets/files/cleaned.
There are specific tasks for each of the types of data. Run 'rake -T' to get the list of tasks.




Note: if there is some issue with data encoding on the way, we may end up with the utf8 unknown symbol �, which, sadly, crashes latex. Ideal solution: get the data right. Quick solution (for annotations, which seem to be most affected):

  update annotation_translations set full_note = replace(full_note, '�', '') where id in (select id from annotation_translations where full_note like '%�%');

  update listing_changes_mview set english_full_note = replace(english_full_note, '�', ''), spanish_full_note = replace(spanish_full_note, '�',''), french_full_note = replace(french_full_note, '�', '')  where id in (select id from listing_changes_mview where english_full_note like '%�%' or spanish_full_note like '%�%' or french_full_note like '%�%');


=== Migrating local database into staging/production server

First in your local machine:
   1- Dump the local database sapi_development to a .sql file:
      pg_dump -c sapi_development > sapi_db.sql
   2- Transfer the .sql file to the database server that you want to migrate too:
      scp sapi_db.sql rails@unepwcmc-00X.vm.brightbox.net:~/
Then the web server:
   3- Drop existing database
     RAILS_ENV=environment bundle exec rake db:drop
   3.2- If this doesn't work straight away because the database is being used you'll need to kill the database process in the db server, and then try dropping the database again
   In the db server:
     ps axu | grep sapi
     sudo kill -9 [pid]
   4- Create the database again
     RAILS_ENV=environment bundle exec rake db:create
Then in the db server:
   5- Make sure that the user used in the database is the same as the one that exists in the database server. In my case this means replacing instances of simaob with wcmc:
     vim sapi_db.sql
     Do a few find and replace: 
       %s/simaob/wcmc/gi
       %s/postgres/wcmc/gi
   6- Run the .sql script to fill the database (for this example the database name is sapi_staging)
     sudo -u postgres psql -f sapi_db.sql -d sapi_staging
Back in the web server:
   7- Run the migrations just to make sure that the schema matches the latest migrations
     RAILS_ENV=environment bundle exec rake db:migrate
     
Maybe in the future we might want to create a chef script to do all this. :)

=== Job queue

1. start redis
  redis-server
2. start sidekiq
  bundle exec sidekiq
3. create new download job
  curl --data "output_layout=alphabetical&level_of_listing=0&show_synonyms=1&show_english=1&show_spanish=1&show_french=1&scientific_name=pediocactus&page=0&per_page=20&locale=en&download[format]=pdf&download[doc_type]=index" http://localhost:3000/downloads

response:
  {"downloads":[{"id":2,"doc_type":"index","format":"pdf","status":"working","created_at":"2012-10-30T11:44:21Z","updated_at":"2012-10-30T11:44:21Z"}]}
3. get status of job
  curl http://localhost:3000/downloads/2

response:
  {"status":"completed"}

==Development

=== Coding guidelines
Try to apply these coding guidelines:
  
  http://pub.cozmixng.org/~the-rwiki/rw-cgi.rb?cmd=view;name=RubyCodingConvention

== Database

=== PostgreSQL data types support
* foreign keys via foreigner: https://github.com/matthuhiggins/foreigner
* hstore support is via the 'activerecord-postgres-hstore' gem
* arrays are parsed using the 'pg_array_parser' gem


=== Migrating plpgsql functions
Stored procedures and views are not updated with regular migrations anymore, as that approach was cumbersome. Instead, procedures and other plpgsql constructs are defined in separate files under db/plpgsql and db/views and are hooked to the db:migrate task, so that every time db:migrate runs those files are executed in lexicographic order. Therefore, it is important to use 'CREATE OR REPLACE' or 'DROP' / 'CREATE' in these files for migrations to pass.

== Definitions and Resources

=== Taxonomic glossaries
  http://ibot.sav.sk/icbn/no%20frames/0120AppendixVII.htm
  http://bionomenclature-glossary.gbif.org/

=== Project glossary

  - taxon concept: represents a unique combination of a name and a reference;
  - usage: represents an association of a taxon concept with a name (not necessarily the defining name). can be used to apply multiple name systems to a taxon concept;
  - rank: represents the taxonomic rank of a taxon concept. From kingdom to species. The rank model supports hierarchical relations between different ranks;
  - geo entity: represents any geographic entity from different types (through the geo entity type model);
  - geo relationship: gives support to relationships between geo entities. For instance a geo entity of type Region may contain multiple geo entities of type Country, this would be managed through a geo relationship of 'Contains'. Where the Region Contains the Countries;

An older standard for plants naming conventions (is there an up to date version of that?): http://www.nhm.ac.uk/hosted_sites/tdwg/plants.html

=== Taxon concept relationships:

inter-designational:
  - equal =
  - includes <
  - included in >
  - overlaps ><
  - disjunct |

intra-designational:
  - synonym
  - homonym

=== Geographic Entities

==== Geographic Entity types
  - CITES Region
  - Region
  - Country
  - BRU
  - State
  - Special Administrative Region
  - Territory
  - Overseas Territory
  - Aquatic Territory

==== Geo entities relationships (non-final list):
  - Contains
  - Intersects

=== CITES listing
CITES lists taxon concepts in appendices on various taxonomic levels. Practically, the highest rank at which taxa seem to be listed is order.

Example of explicit listing when taxa are listed at lower ranks:
* [SUBSPECIES] Boa constrictor occidentalis : *I* BOIDAE (Reptilia) (E) Argentine Boa Constrictor, (F) Boa constrictor occidental
* [SPECIES]  Boa constrictor : *II* BOIDAE (Reptilia) (E) Ampalagua, Boa Constrictor, Giboya, Masacuate, (S) Boa constrictor, (F) Boa constrictor
* [FAMILY] BOIDAE spp. : *II* (Reptilia) (E) Boas (S) Boas, (F) Boas


Implicit listing can be inferred for all taxon concepts in the hierarchy. It affects taxa that don't have explicit listing assigned as well as those that have one assigned, as listings can be carried over from lower taxa to higher and thus produce split listings.

Following the previous example, after we infer the listings we get:
* [SUBSPECIES] Boa constrictor occidentalis: *I* BOIDAE (Reptilia) (E) Argentine Boa Constrictor, (F) Boa constrictor occidental
* [SPECIES] Boa constrictor: *I/II* BOIDAE (Reptilia) (E) Ampalagua, Boa Constrictor, Giboya, Masacuate, (S) Boa constrictor, (F) Boa constrictor
* [GENUS omitted]
* [FAMILY] BOIDAE spp.: *I/II* (Reptilia) (E) Boas (S) Boas, (F) Boas

There goes another example to show the difference between explicit and implicit listing when taxa are listed at a higher rank:

Explicit listing:
* [GENUS] Chamaeleo spp.: *II* CHAMAELEONIDAE (Reptilia) (E) Chameleons, (S) Camaleónes, (F) Caméléons, Caméléons vrais

Implicit listing:
* [GENUS] Chamaeleo spp.: *II* CHAMAELEONIDAE (Reptilia) (E) Chameleons, (S) Camaleónes, (F) Caméléons, Caméléons vrais
* [SPECIES] Chamaeleo affinis: *II* CHAMAELEONIDAE (Reptilia) (E) Ethiopian Highland Chameleon, Rüppell's Desert Chameleon
* [SPECIES] Chamaeleo africanus: *II* CHAMAELEONIDAE (Reptilia) (E) African Chameleon, Sahel Chameleon, (S) Camaleón africano, (F) Caméléon africain
* [SPECIES] Chamaeleo etc

The current checklist is constructed like the implicit listing examples, with the additional rules that:
* it does not include subspecies unless they're listed explicitly
* it does not include taxa higher than species unless they're listed explicitly

So that's why the Boa genus is ommitted in the first example or any subspecies of the Chamaeleo in the second example.

Regarding the output, there is no substantial difference in how these lists are presented, except that obviously the explicit one is shorter.

==== Cases of split listing

1. on species level: populations listed separately: Loxodonta africana I/II, Caiman latirostris I/II
2. on species level: subspecies listed separately: Boa constrictor I/II
3. on genus level: species listed separately: Arctocephalus spp I/II
4. on family level: species listed separately: Lutrinae spp I/II, Tapiridae spp I/II
5. on order level: species listed separately: Acipenseriformes spp I/II

==== Cases of NC listing

1. some populations not listed: Panax ginseng II/NC, Antilocapra americana I/NC
2. taxon listed and some subtaxa not listed: Psittaciformes spp I/II/NC
3. taxon not listed and subtaxa not listed: Aloe vera NC, Pereskia NC
4. taxon not listed and subtaxa listed: Cervus elaphus I/II/III/NC, Axis porcinus I/NC
5. subtaxa deleted from appendices: Psittaciformes spp I/II/NC

==== Current listing calculations

Calculating the current listing is carried out by a set of stored procedures which need to be run in the correct order, as they use their intermediate results to come up with the final listing. These are roughly the steps to be taken:
1. calculation of the cites_listed flag: this flag is initially set to true for taxa with current listings. It is then cascaded to ancestors and descendants, with the value being set to false (to be able to differentiate between taxa at level of listing and taxa with inherited listing)
2. next, there are a couple of flags to be calculated that have to do with taxa that are NC-listed. These are: cites_deleted, cites_excluded, cites_fully_covered, not_in_cites
3. next, the actual listing is calculated for explicitly listed taxa (this will take into consideration the not_in_cites flag)
4. finally, the current listing is cascaded to descendants and then to ancestors

TODO: the cites_show flag should be calculated properly to allow for filtering the checklist using that flag only

==== Description of the listing flags

# TODO clean up the listing flags description

There are several flags related to the CITES listing status of a taxon concept.
* cites_listes: if true, then taxon_concept listed explicitly; if false, then implicitly; if null, then not listed
NOTE: taxa deleted from appendices have this set to not null. should that be changed for consistency?
* cites_deleted: if true, taxon concept has been deleted from the appendices (in case of Appendix III it needs to be deleted by all parties that added it)
* cites_excluded: if true, taxon concept is excluded from its parent listing (calculated from ancestors usr_cites_exclusion flags and exceptions)
* cites_show: whether or not to show in the checklist. E.g. implicitly listed subspecies should have this set to false, whereas some NC taxon concepts such as Pereskia spp should have this set to true.

=== References
References are meant to be kept in an external system accessed by a web based API. For now we are using references imported from the old system.

Standard references are references recognized by CITES as references for specific taxon concepts. If a taxon concept has a standard reference, its name is considered to be 'accepted' and is therefore output in bold in the checklist index pdf.

To create a standard reference link, create a taxon_concept_references record with data = {:usr_is_std_ref => true}. This will be inherited by descendants, unless they have taxon_concepts.data = {:usr_no_std_ref => true}.


=== Events
Events are used to represent CITES CoPs, CITES Notifications, and EU regulations (amongst others). This group listing changes, and trade restrictions under a common element. Allowing for copying bulks of information that repeat year after year.

==== Event Types
* CitesCop: For CITES CoP
* CitesSuspensionNotification: For CITES Suspension Notification
* EuRegulation: for EU Implemeting/Listing/Legislation regulations
* SuspensionEuRegulation: for EU suspending regulations
