
default: &default
  adapter: postgresql
  encoding: unicode
  host:     <%= ENV.fetch("SAPI_DATABASE_HOST",     Rails.application.credentials.dig(:db, :host)) %>
  username: <%= ENV.fetch("SAPI_DATABASE_USERNAME", Rails.application.credentials.dig(:db, :username)) %>
  password: <%= ENV.fetch("SAPI_DATABASE_PASSWORD", Rails.application.credentials.dig(:db, :password)) %>
  port:     <%= ENV.fetch("SAPI_DATABASE_PORT",     Rails.application.credentials.dig(:db, :port)) %>
  variables:
    # It is important that ordinary queries do not hang while waiting for a
    # lock, as they risk piling up and also preventing important background
    # tasks from running. The deadlicks may only be evident on production.
    # The value given here, 10s, is generous. For longer-running queries that
    # can afford to wait, this can be overridden; for an example, see
    # `lib/modules/sapi_module/stored_procedures.rb`
    lock_timeout: 10s

development:
  <<: *default
  database: sapi_development
  timeout: 5000
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("SAPI_RAILS_MAX_THREADS") { 5 } %>

test:
  <<: *default
  database: sapi_test
  timeout: 5000

staging:
  <<: *default
  database: sapi_staging

production:
  <<: *default
  database: sapi_production
